# Generated and updated by Froley. Custom changes will not be overwritten; customize as desired.
module R2

class Visitor : Visitor<<Cmd>>
  # Standard tree-rebuilding visitor.
endClass

class Visitor<<$ReturnType>>
  METHODS
    method on( cmd:Cmd )->$ReturnType
      # Default per-node call sequence for regular 'Visitor' AKA 'Visitor<<Cmd>>':
      #   CALL                  OVERLOADABLE METHOD
      #   --------------------  -----------------------------------------
      #   visit(cmd)            -> on(cmd:CmdType)->Cmd (or ->ResultType)
      #   visit_content(cmd)       -> on_visit(cmd:CmdType)
      #     visit_children(cmd)       -> on_visit_children(cmd:CmdType)
      #                            on_validate(cmd:CmdType)->Cmd/ResultType
      #
      # For a regular 'Visitor' AKA 'Visitor<<Cmd>>':
      # - The AST is rebuilt with the return value of this call, so return
      #   'cmd' to keep this subtree or else return a different Cmd node to
      #   replace this subtree.
      visit_content( cmd )
      if ($ReturnType instanceOf Cmd)
        return validate( cmd )
      else
        validate( cmd )
        return $ReturnType.meta.default_value
      endIf

    method on_visit( cmd:Cmd )
      # Called from on(CmdType). If you overload this method with an extended
      # Cmd type, this node's children will only be visited if and
      # when you call visit_children(cmd).
      visit_children( cmd )

    method on_validate( cmd:Cmd )->$ReturnType
      if ($ReturnType instanceOf Cmd) return cmd
      else                            return $ReturnType.meta.default_value

    method visit( cmd:Cmd )->$ReturnType [propagated]
      # Call to invoke the appropriate on/on_visit() for the given Cmd type.
      #
      # For example:
      #   method on( cmd:Binary )->Cmd
      #     cmd.left  = visit(cmd.left)
      #     cmd.right = visit(cmd.right)
      #     return cmd
      if ($ReturnType instanceOf Cmd)
        if (cmd is null) return null
      else
        if (cmd is null) return $ReturnType.meta.default_value
      endIf
      return cmd.dispatch<<ThisType,$ReturnType>>( this )

    method visit_children( cmd:Cmd )->Cmd [propagated]
      # Call from 'on()' or 'on_visit()' handler to visit subtrees.
      cmd.dispatch_on_visit_children<<ThisType>>( this )
      return cmd

    method visit_content( cmd:Cmd )->Cmd [propagated]
      # Primarily for internal use - see on(Cmd) for usage.
      cmd.dispatch_on_visit<<ThisType>>( this )
      return cmd

    method validate( cmd:Cmd )->$ReturnType [propagated]
      if ($ReturnType instanceOf Cmd)
        if (cmd is null) return null
      else
        if (cmd is null) return $ReturnType.meta.default_value
      endIf
      return cmd.dispatch_on_validate<<ThisType,$ReturnType>>( this )

    method on_visit_children( cmd:Cmd )
      # Overloaded automatically by the Froley compiler
      noAction

    method on_visit_children( cmd:CmdList )
      if ($ReturnType instanceOf Cmd)
        forEach (element in writer=cmd.list.rewriter)
          local visited_element = visit( element )
          if (visited_element) writer.write( visited_element )
        endForEach
      else
        visit( forEach in cmd.list )
      endIf

    method on_visit_children( cmd:Statements )
      if ($ReturnType instanceOf Cmd)
        forEach (element in writer=cmd.list.rewriter)
          local visited_element = visit( element )
          if (visited_element)
            if (visited_element.count)
              writer.write( forEach in visited_element )
            else
              writer.write( visited_element )
            endIf
          endIf
        endForEach
      else
        visit( forEach in cmd.list )
      endIf


    method on_visit_children( cmd:Binary )
      if ($ReturnType instanceOf Cmd)
        cmd.left = visit(cmd.left)
        cmd.right = visit(cmd.right)
      else
        visit( cmd.left )
        visit( cmd.right )
      endIf

    method on_visit_children( cmd:Unary )
      if ($ReturnType instanceOf Cmd)
        cmd.operand = visit(cmd.operand)
      else
        visit( cmd.operand )
      endIf

    method on_visit_children( cmd:Print )
      if ($ReturnType instanceOf Cmd)
        cmd.args = visit(cmd.args)
      else
        visit( cmd.args )
      endIf

    method on_visit_children( cmd:Println )
      if ($ReturnType instanceOf Cmd)
        cmd.args = visit(cmd.args)
      else
        visit( cmd.args )
      endIf

    method on_visit_children( cmd:ContextAccess )
      if ($ReturnType instanceOf Cmd)
        cmd.context = visit(cmd.context)
        cmd.args = visit(cmd.args)
      else
        visit( cmd.context )
        visit( cmd.args )
      endIf

    method on_visit_children( cmd:IndexAccess )
      if ($ReturnType instanceOf Cmd)
        cmd.context = visit(cmd.context)
        cmd.index = visit(cmd.index)
      else
        visit( cmd.context )
        visit( cmd.index )
      endIf

    method on_visit_children( cmd:LocalDef )
      if ($ReturnType instanceOf Cmd)
        cmd.initial_value = visit(cmd.initial_value)
        cmd.type_ref = visit(cmd.type_ref)
      else
        visit( cmd.initial_value )
        visit( cmd.type_ref )
      endIf

    method on_visit_children( cmd:Procedure )
      if ($ReturnType instanceOf Cmd)
        cmd.parameters = visit(cmd.parameters)
        cmd.return_type = visit(cmd.return_type)->(as Type)
        cmd.attributes = visit(cmd.attributes)->(as Attributes)
        cmd.statements = visit(cmd.statements)
      else
        visit( cmd.parameters )
        visit( cmd.return_type )
        visit( cmd.attributes )
        visit( cmd.statements )
      endIf

    method on_visit_children( cmd:Block )
      if ($ReturnType instanceOf Cmd)
        cmd.statements = visit(cmd.statements)
      else
        visit( cmd.statements )
      endIf

endClass
