module R2

class Type : Cmd
  DEFINITIONS
    PRIMITIVE = 1
    OBJECT    = 2

  ROGUE_ATTRIBUTE( is_primitive, Type.PRIMITIVE )
  ROGUE_ATTRIBUTE( is_object,    Type.OBJECT )

  PROPERTIES
    module_context = Program.current_module : Module
    name           : String
    c_name         : String
    attributes     : Int32

  METHODS
    method init( t, name, attributes=Type.OBJECT )

    method init( existing:Type )
      prior.init( existing )
      name = existing.name

    method cloned->this
      return this

    method description->String
      return "Type($)" (%name)

    method is_reference->Logical
      return (attributes & OBJECT)?

    method to->Character
      return Cmd.to_character(name)

    method to->Int32:  return name
    method to->Logical: return name?
    method to->String: return name

endClass

class BuiltInType : Type;

class TypeLogical : BuiltInType
  METHODS
    method init( t:Token )
      prior.init( t, "Logical", Type.PRIMITIVE )
endClass

class TypeByte : BuiltInType
  METHODS
    method init( t:Token )
      prior.init( t, "Byte", Type.PRIMITIVE )
endClass

class TypeCharacter : BuiltInType
  METHODS
    method init( t:Token )
      prior.init( t, "Character", Type.PRIMITIVE )
endClass

class TypeInt32 : BuiltInType
  METHODS
    method init( t:Token )
      prior.init( t, "Int32", Type.PRIMITIVE )
endClass

class TypeInt64 : BuiltInType
  METHODS
    method init( t:Token )
      prior.init( t, "Int64", Type.PRIMITIVE )
endClass

class TypeReal32 : BuiltInType
  METHODS
    method init( t:Token )
      prior.init( t, "Real32", Type.PRIMITIVE )
endClass

class TypeReal64 : BuiltInType
  METHODS
    method init( t:Token )
      prior.init( t, "Real64", Type.PRIMITIVE )
endClass

class TypeString : BuiltInType
  METHODS
    method init( t:Token )
      prior.init( t, "String", Type.OBJECT )
endClass

