$include IO/Scanner
$include Value/JSON

uses Geometry

class Value [compound]
  DEFINITIONS
    # Internal use.
    TYPE_UNDEFINED =  0
    TYPE_BYTE      =  1
    TYPE_CHARACTER =  2
    TYPE_INT32     =  3
    TYPE_INT64     =  4
    TYPE_REAL32    =  5
    TYPE_REAL64    =  6
    TYPE_LOGICAL   =  7
    TYPE_NULL      =  8
    TYPE_XY        =  9
    TYPE_BOX       = 10
    TYPE_OBJECT    = 11
    TYPE_STRING    = 12
    TYPE_LIST      = 13
    TYPE_TABLE     = 14

  NATIVE
    nativeHeader
      @|#define ROGUE_VALUE_TYPE_UNDEFINED 0
       |#define ROGUE_VALUE_TYPE_BYTE      1
       |#define ROGUE_VALUE_TYPE_CHARACTER 2
       |#define ROGUE_VALUE_TYPE_INT32     3
       |#define ROGUE_VALUE_TYPE_INT64     4
       |#define ROGUE_VALUE_TYPE_REAL32    5
       |#define ROGUE_VALUE_TYPE_REAL64    6
       |#define ROGUE_VALUE_TYPE_LOGICAL   7
       |#define ROGUE_VALUE_TYPE_NULL      8
       |#define ROGUE_VALUE_TYPE_XY        9
       |#define ROGUE_VALUE_TYPE_BOX       10
       |#define ROGUE_VALUE_TYPE_OBJECT    11
       |#define ROGUE_VALUE_TYPE_STRING    12
       |#define ROGUE_VALUE_TYPE_LIST      13
       |#define ROGUE_VALUE_TYPE_TABLE     14

  PROPERTIES
    # All properties should be considered INTERNAL USE ONLY because they are
    # tricky - .type must be checked to know which property is valid.
    type      : Int32
    object    : Object # Can't be mixed into the union due to GC constraints

    box       : Box       [faux]
    byte      : Byte      [faux]
    character : Character [faux]
    int32     : Int32     [faux]
    int64     : Int64     [faux]
    logical   : Logical   [faux]
    real      : Real      [faux]
    real32    : Real32    [faux]
    real64    : Real32    [faux]
    xy        : XY        [faux]

    native @|union
            |{
            |  GeometryBox    box;
            |  RogueByte      byte;
            |  RogueCharacter character;
            |  RogueInt32     int32;
            |  RogueInt64     int64;
            |  RogueLogical   logical;
            |  RogueReal      real;
            |  RogueReal32    real32;
            |  RogueReal64    real64;
            |  GeometryXY     xy;
            |};

  GLOBAL METHODS
    method create->Value
      return native( "(RogueValue) { ROGUE_VALUE_TYPE_UNDEFINED }" )->Value  # undefined

    method create( value:Logical )->Value
      return native( "(RogueValue) {  ROGUE_VALUE_TYPE_LOGICAL, 0, {.logical=$value} }" )->Value

    method create( value:Byte )->Value
      return native( "(RogueValue) {  ROGUE_VALUE_TYPE_BYTE, 0, {.byte=$value} }" )->Value

    method create( value:Character )->Value
      return native( "(RogueValue) {  ROGUE_VALUE_TYPE_CHARACTER, 0, {.character=$value} }" )->Value

    method create( value:Int32 )->Value
      return native( "(RogueValue) {  ROGUE_VALUE_TYPE_INT32, 0, {.int32=$value} }" )->Value

    method create( value:Int64 )->Value
      return native( "(RogueValue) {  ROGUE_VALUE_TYPE_INT64, 0, {.int64=$value} }" )->Value

    method create( value:Real32 )->Value
      return native( "(RogueValue) {  ROGUE_VALUE_TYPE_REAL32, 0, {.real32=$value} }" )->Value

    method create( value:Real64 )->Value
      return native( "(RogueValue) {  ROGUE_VALUE_TYPE_REAL64, 0, {.real64=$value} }" )->Value

    method create( value:XY )->Value
      return native( "(RogueValue) {  ROGUE_VALUE_TYPE_XY, 0, {.xy=$value} }" )->Value

    method create( value:Box )->Value
      return native( "(RogueValue) { ROGUE_VALUE_TYPE_BOX, 0, {.box=$value} }" )->Value

    method create( value:Object )->Value [preferred]
      if (value) return native( "(RogueValue) { ROGUE_VALUE_TYPE_OBJECT, $value }" )->Value
      else       return native( "(RogueValue) { ROGUE_VALUE_TYPE_NULL }" )->Value  # null value

    method create( value:String )->Value
      if (value) return native( "(RogueValue) { ROGUE_VALUE_TYPE_STRING, (RogueObject*)$value }" )->Value
      else       return native( "(RogueValue) { ROGUE_VALUE_TYPE_NULL }" )->Value  # null value

    method create( value:Value[] )->Value
      if (value) return native( "(RogueValue) { ROGUE_VALUE_TYPE_LIST, (RogueObject*)$value }" )->Value
      else       return native( "(RogueValue) { ROGUE_VALUE_TYPE_NULL }" )->Value  # null value

    method create( value:[String:Value] )->Value
      if (value) return native( "(RogueValue) { ROGUE_VALUE_TYPE_TABLE, (RogueObject*)$value }" )->Value
      else       return native( "(RogueValue) { ROGUE_VALUE_TYPE_NULL }" )->Value  # null value

    method list->Value
      # Convenience syntax: @[] is equivalent to Value.list()
      local data = Value[]
      return native( "(RogueValue) { ROGUE_VALUE_TYPE_LIST, (RogueObject*)$data }" )->Value

    method table->Value
      # Convenience syntax: @{} is equivalent to Value.table()
      local data = [String:Value]
      return native( "(RogueValue) { ROGUE_VALUE_TYPE_TABLE, (RogueObject*)$data }" )->Value

  METHODS
    method add( value:Value )
      which (type)
        case TYPE_LIST
          object->(as Value[]).add( value )
      endWhich

    method add_all( value:Value )
      which (type)
        case TYPE_LIST
          local list = object->(as Value[])
          list.reserve( value.count )
          list.add( forEach in value )
      endWhich

    method contains( value:Value )->Logical
      which (type)
        case TYPE_STRING
          which (value.type)
            case TYPE_CHARACTER: return object->(as String).contains( value.character )
            case TYPE_STRING:    return object->(as String).contains( value.object->(as String) )
            others:              return false
          endWhich
        case TYPE_LIST
          return object->(as Value[]).contains( value )
        case TYPE_TABLE
          return object->(as [String:Value]).contains( value->String )
        others
          return false
      endWhich

    method count->Int32
      which (type)
        case TYPE_STRING
          return object->(as String).count
        case TYPE_LIST
          return object->(as Value[]).count
        case TYPE_TABLE
          return object->(as [String:Value]).count
        case TYPE_UNDEFINED
          return 0
        others
          return 1
      endWhich

    method entries->TableEntriesIterator<<String,Value>>
      if (type != TYPE_TABLE) return TableEntriesIterator<<String,Value>>( null )
      return object->(as [String:Value]).entries

    method get( index:Int32 )->Value
      which (type)
        case TYPE_LIST
          local list = object->(as Value[])
          if (index < 0 or index >= list.count) return undefined
          return list[index]

        case TYPE_STRING
          local st = object->(as String)
          if (index < 0 or index >= st.count) return undefined
          return st[index]

        case TYPE_TABLE
          local table = object->(as [String:Value])
          if (index < 0 or index >= table.count) return undefined
          return table.at(index)

        others
          if (index == 0) return this
          return undefined
      endWhich

    method get( key:String )->Value
      which (type)
        case TYPE_TABLE
          return object->(as [String:Value])[ key ]
        others
          return undefined
      endWhich

    method is_collection->Logical
      which (type)
        case TYPE_STRING, TYPE_LIST, TYPE_TABLE
          return true
        others
          return false
      endWhich

    method is_box->Logical
      return (type == TYPE_BOX)

    method is_byte->Logical
      return (type == TYPE_BYTE)

    method is_character->Logical
      return (type == TYPE_CHARACTER)

    method is_int32->Logical
      return (type == TYPE_INT32)

    method is_int64->Logical
      return (type == TYPE_INT64)

    method is_logical->Logical
      return (type == TYPE_LOGICAL)

    method is_list->Logical
      return (type == TYPE_LIST)

    method is_null->Logical
      return (type == TYPE_NULL)

    method is_number->Logical
      return (type >= TYPE_BYTE and type <= TYPE_REAL64)

    method is_object->Logical
      return (type == TYPE_OBJECT)

    method is_real32->Logical
      return (type == TYPE_REAL32)

    method is_real64->Logical
      return (type == TYPE_REAL64)

    method is_string->Logical
      return (type == TYPE_STRING)

    method is_table->Logical
      return (type == TYPE_TABLE)

    method is_undefined->Logical
      return (type == TYPE_UNDEFINED)

    method is_xy->Logical
      return (type == TYPE_XY)

    method keys->TableKeysIterator<<String,Value>>
      if (type != TYPE_TABLE) return TableKeysIterator<<String,Value>>( null )
      return object->(as [String:Value]).keys

    method locate( value:Value, i1=null:Int32? )->Int32?
      which (type)
        case TYPE_STRING
          which (value.type)
            case TYPE_CHARACTER: return object->(as String).locate( value.character, i1 )
            case TYPE_STRING:    return object->(as String).locate( value.object->(as String), i1 )
            others:              return null
          endWhich
        case TYPE_LIST
          return object->(as Value[]).locate( value, i1 )
        others
          return null
      endWhich

    method locate_last( value:Value, i1=null:Int32? )->Int32?
      which (type)
        case TYPE_STRING
          which (value.type)
            case TYPE_CHARACTER: return object->(as String).locate_last( value.character, i1 )
            case TYPE_STRING:    return object->(as String).locate_last( value.object->(as String), i1 )
            others:              return null
          endWhich
        case TYPE_LIST
          return object->(as Value[]).locate_last( value, i1 )
        others
          return null
      endWhich

    method operator?->Logical
      if (type == TYPE_NULL or type == TYPE_UNDEFINED) return false
      return this->Logical

    method operator<>( other:Value )->Int32
      if (type == TYPE_UNDEFINED) return (other.type == TYPE_UNDEFINED)

      if (type <= TYPE_REAL64 and other.type <= TYPE_REAL64)
        # Both are primitives
        if (type == TYPE_REAL64 or other.type == TYPE_REAL64) return (real64 <> other.real64).sign
        if (type == TYPE_REAL32 or other.type == TYPE_REAL32) return (real32 <> other.real32).sign
        return (int64 <> other.int64).sign
      endIf

      if (type != other.type) return type <> other.type

      which (type)
        case TYPE_LOGICAL
          return logical <> other.logical
        case TYPE_NULL
          return 0  # equal
        case TYPE_XY
          return xy <> other.xy
        case TYPE_BOX
          if (box.size == other.box.size) return box.position <> other.box.position
          else                            return box.size <> other.box.size
        case TYPE_OBJECT
          if (object == other.object) return 0
          return object.object_id <> other.object.object_id
        case TYPE_STRING
          return object->(as String) <> other.object->(as String)
        case TYPE_LIST
          if (object->(as Value[]) == other.object->(as Value[])) return 0
          return object.object_id <> other.object.object_id
        case TYPE_TABLE
          if (object->(as [String:Value]) == other.object->(as [String:Value])) return 0
          return object.object_id <> other.object.object_id
        others
          return type <> other.type
      endWhich

    method remove( value:Value )->Value
      which (type)
        case TYPE_LIST
          return object->(as Value[]).remove( value )
        case TYPE_TABLE
          return object->(as [String:Value]).remove( value )
        others
          return undefined
      endWhich

    method remove_at( index:Int32 )->Value
      which (type)
        case TYPE_LIST
          return object->(as Value[]).remove_at( index )
        case TYPE_TABLE
          return object->(as [String:Value]).remove_at( index )
        others
          return undefined
      endWhich

    method set( index:Int32, value:Value )
      which (type)
        case TYPE_LIST
          local list = object->(as Value[])
          if (index < 0 or index >= list.count) return
          list[index] = value
      endWhich

    method set( key:String, value:Value )
      which (type)
        case TYPE_TABLE
          object->(as [String:Value])[ key ] = value
      endWhich

    method to->Box
      which (type)
        case TYPE_BOX:       return box
        case TYPE_XY:        return Box(xy)
        others:              return defaultValue<<Box>>
      endWhich

    method to->Byte
      which (type)
        case TYPE_BYTE:      return byte
        case TYPE_CHARACTER: return character->Byte
        case TYPE_INT32:     return int32->Byte
        case TYPE_INT64:     return int64->Byte
        case TYPE_REAL32:    return real32->Byte
        case TYPE_REAL64:    return real64->Byte
        case TYPE_OBJECT:    return (object->String->Int32)?
        case TYPE_STRING:    return (object->String->Int32)?
        others:              return 0
      endWhich

    method to->Character
      which (type)
        case TYPE_BYTE:      return byte->Character
        case TYPE_CHARACTER: return character
        case TYPE_INT32:     return int32->Character
        case TYPE_INT64:     return int64->Character
        case TYPE_REAL32:    return real32->Character
        case TYPE_REAL64:    return real64->Character
        case TYPE_OBJECT, TYPE_STRING
          local st = object->String
          if (st and st.count) return st[0]
          else                 return 0
        others:              return 0
      endWhich

    method to->Int32
      which (type)
        case TYPE_BYTE:      return byte->Int32
        case TYPE_CHARACTER: return character->Int32
        case TYPE_INT32:     return int32->Int32
        case TYPE_INT64:     return int64->Int32
        case TYPE_REAL32:    return real32->Int32
        case TYPE_REAL64:    return real64->Int32
        case TYPE_OBJECT:    return object->String->Int32
        case TYPE_STRING:    return object->String->Int32
        others:              return 0
      endWhich

    method to->Int64
      which (type)
        case TYPE_BYTE:      return byte->Int64
        case TYPE_CHARACTER: return character->Int64
        case TYPE_INT32:     return int32->Int64
        case TYPE_INT64:     return int64->Int64
        case TYPE_REAL32:    return real32->Int64
        case TYPE_REAL64:    return real64->Int64
        case TYPE_OBJECT:    return object->String->Int64
        case TYPE_STRING:    return object->String->Int64
        others:              return 0
      endWhich

    method to->Logical
      which (type)
        case TYPE_LOGICAL:   return logical
        case TYPE_BYTE:      return byte?
        case TYPE_CHARACTER: return character?
        case TYPE_INT32:     return int32?
        case TYPE_INT64:     return int64?
        case TYPE_REAL32:    return real32?
        case TYPE_REAL64:    return real64?
        case TYPE_XY:        return xy.x? or xy.y?
        case TYPE_BOX:       return box.size.x? or box.size.y?
        case TYPE_OBJECT:    return true
        case TYPE_STRING:    return true
        case TYPE_LIST:      return true
        case TYPE_TABLE:     return true
        others:              return false
      endWhich

    method to->Object
      which (type)
        case TYPE_OBJECT, TYPE_STRING: return object
        others:                        return null
      endWhich

    method to->Real32
      which (type)
        case TYPE_BYTE:      return byte->Real32
        case TYPE_CHARACTER: return character->Real32
        case TYPE_INT32:     return int32->Real32
        case TYPE_INT64:     return int64->Real32
        case TYPE_REAL32:    return real32->Real32
        case TYPE_REAL64:    return real64->Real32
        case TYPE_OBJECT:    return object->String->Real32
        case TYPE_STRING:    return object->String->Real32
        others:              return 0
      endWhich

    method to->Real64
      which (type)
        case TYPE_BYTE:      return byte->Real64
        case TYPE_CHARACTER: return character->Real64
        case TYPE_INT32:     return real64->Real64
        case TYPE_INT64:     return int64->Real64
        case TYPE_REAL32:    return real32->Real64
        case TYPE_REAL64:    return real64->Real64
        case TYPE_OBJECT:    return object->String->Real64
        case TYPE_STRING:    return object->String->Real64
        others:              return 0
      endWhich

    method to->String
      which (type)
        case TYPE_UNDEFINED: return ""
        case TYPE_NULL:      return "null"
        case TYPE_LOGICAL:   return logical->String
        case TYPE_BYTE:      return byte->String
        case TYPE_CHARACTER: return character->String
        case TYPE_INT32:     return int32->String
        case TYPE_INT64:     return int64->String
        case TYPE_REAL32:    return real32->String
        case TYPE_REAL64:    return real64->String
        case TYPE_XY:        return xy->String
        case TYPE_BOX:       return box->String
        case TYPE_OBJECT:    return object->String
        case TYPE_STRING:    return object->String
        case TYPE_LIST:      return object->(as Value[])->String
        case TYPE_TABLE:     return object->(as [String:Value])->String
        others:              return ""
      endWhich

    method to->XY
      which (type)
        case TYPE_XY:        return xy
        others:              return defaultValue<<XY>>
      endWhich

    method to<<$Type>>->$Type
      if (isPrimitive<<$Type>>)
        return this->$Type
      elseIf (isReference<<$Type>>)
        return this->Object->(as $Type)
      elseIf (isEnum<<$Type>>)
        local st = this->String
        if (st) return $Type(st)
        else    return $Type(0)
      elseIf ($Type isType XY or $Type isType Box)
        return this->$Type
      else
        local box = this->Object->(as Boxed<<$Type>>)
        if (box) return box->$Type
        return defaultValue<<$Type>>
      endIf

    method to_json( &formatted, &omit_commas )->String
      local result = String()
      write_json( result, &=formatted, &=omit_commas )
      return result

    method values->TableValuesIterator<<String,Value>>
      if (type != TYPE_TABLE) return TableValuesIterator<<String,Value>>( null )
      return object->(as [String:Value]).values

    method write_json( builder:String, &formatted, &omit_commas )
      which (type)
        case TYPE_UNDEFINED
          noAction
        case TYPE_BYTE
          builder.print( byte )
        case TYPE_CHARACTER
          # Write single character as a string
          builder.print '"'
          write_json_character( character, builder )
          builder.print '"'
        case TYPE_INT32
          builder.print( int32 )
        case TYPE_INT64
          builder.print( int64 )
        case TYPE_REAL32
          builder.print( real32 )
        case TYPE_REAL64
          builder.print( real64 )
        case TYPE_LOGICAL
          builder.print( logical )
        case TYPE_NULL
          builder.print( "null" )
        case TYPE_XY
          builder.[ print('['), print(xy.x), print(','), print(xy.y), print(']') ]
        case TYPE_BOX
          builder.[ print('['), print(box.position.x), print(','), print(box.position.y) ]
          builder.[ print(','), print(box.size.x),     print(','), print(box.size.y), print(']') ]
        case TYPE_OBJECT
          object.write_json( builder, &=formatted, &=omit_commas )
        case TYPE_STRING
          write_json_string( object->(as String), builder )
        case TYPE_LIST
          if (count)
            builder.print '['
            if (formatted) builder.indent+=2; builder.println
            forEach (item at i in object->(as Value[]))
              if (i)
                if (omit_commas) builder.print ' '
                else             builder.print ','
                if (formatted) builder.println
              endIf
              item.write_json( builder, &=formatted, &=omit_commas )
            endForEach
            if (formatted) builder.indent-=2; builder.println
            builder.print ']'
          else
            builder.print "[]"
          endIf
        case TYPE_TABLE
          if (count)
            builder.print '{'
            if (formatted) builder.indent+=2; builder.println
            forEach (entry at i in object->(as [String:Value]).entries)
              if (i)
                if (omit_commas) builder.print ' '
                else             builder.print ','
                if (formatted) builder.println
              endIf
              write_json_string( entry.key, builder )
              builder.print ':'
              entry.value.write_json( builder, &=formatted, &=omit_commas )
            endForEach
            if (formatted) builder.indent-=2; builder.println
            builder.print '}'
          else
            builder.print "{}"
          endIf
      endWhich

    method write_json_string( st:String, builder:String )
      builder.print '"'
      write_json_character( (forEach in st), builder )
      builder.print '"'

    method write_json_character( ch:Character, builder:String )
      which (ch)
        case '"':
          builder.print( "\\\"" )
        case '\\':
          builder.print( "\\\\" )
        case '\b':
          builder.print( "\\b" )
        case '\f':
          builder.print( "\\f" )
        case '\n':
          builder.print( "\\n" )
        case '\r':
          builder.print( "\\r" )
        case '\t':
          builder.print( "\\t" )
        others
          if (ch >= 32 and ch <= 126)
            builder.print( ch )
          elseIf (ch < 32 or ch == 127 or ch == 0x2028 or ch == 0x2029)
            # RE: 2028/2029:
            # http://stackoverflow.com/questions/2965293/javascript-parse-error-on-u2028-unicode-character
            builder.print( "\\u" )
            local n = ch : Int32
            loop 4
              local digit = (n :>>>: 12) & 15
              n = n:<<:4
              if (digit <= 9)
                builder.print( digit )
              else
                builder.print( ('a' + (digit - 10))->Character )
              endIf
            endLoop
          else
            # Store printable Unicode without encoding as \\uXXXX
            builder.print( ch )
          endIf
      endWhich
endClass

augment Object
  METHODS
    method write_json( builder:String, &formatted, &omit_commas )
      builder.[ print(''{"type":"''), print(type_name), print(''"}'') ]
endAugment

