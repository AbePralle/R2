class String
  GLOBAL PROPERTIES
    pool = StringPool()

  PROPERTIES
    count           : Int32  # in whole characters
    cursor_offset   : Int32  # in bytes
    cursor_index    : Int32  # in characters
    hash_code       = -1
    indent          : Int32
    at_newline      = true
    is_immutable    : Logical
    is_ascii        : Logical  # makes indexing easier if true
    data            : Byte[]

  METHODS
    method init
      init( 20 )

    method init( existing:String )
      count = existing.count
      hash_code = existing.hash_code
      is_ascii = existing.is_ascii
      data = existing.data.cloned
      data[count] = 0

    method init( byte_capacity:Int32 )
      data = Byte[]( byte_capacity + 1 )
      data[0] = 0
      is_ascii = true

    method capacity->Int32
      return data.capacity

    method clear->this
      if (is_immutable) return this
      data.clear
      data[0] = 0
      count = 0
      indent = 0
      at_newline = true
      hash_code = -1
      return this

    method cloned->String
      return String( this )

    method first->Character
      return this[0]

    method get( index:Int32 )->Character
      if (is_ascii) return data[index]

      cursor = index

      native ...
        @|
         |char* utf8 = $data->as_utf8;
         |
         |RogueInt32 offset = $cursor_offset;
         |RogueCharacter ch = utf8[ offset ];
         |if (ch & 0x80)
         |{
         |  if (ch & 0x20)
         |  {
         |    if (ch & 0x10)
         |    {
         |      return ((ch&7)<<18)
         |          | ((utf8[offset+1] & 0x3F) << 12)
         |          | ((utf8[offset+2] & 0x3F) << 6)
         |          | (utf8[offset+3] & 0x3F);
         |    }
         |    else
         |    {
         |      return ((ch&15)<<12)
         |          | ((utf8[offset+1] & 0x3F) << 6)
         |          | (utf8[offset+2] & 0x3F);
         |    }
         |  }
         |  else
         |  {
         |    return ((ch&31)<<6)
         |        | (utf8[offset+1] & 0x3F);
         |  }
         |}
         |else
         |{
         |  return ch;
         |}

    method hash_code->Int32
      if (@hash_code == -1)
        native @|$hash_code = RogueString_compute_hash_code( $this, 0 );
      endIf
      return @hash_code

    method last->Character
      return this[ count-1 ]

    method print( value:Byte )->this
      return print( value->Int64 )

    method print( value:Character )->this
      if (is_immutable) return this
      hash_code = -1  # invalidate

      if (value == '\n')
        at_newline = true
      elseIf (at_newline)
        if (indent)
          forEach (i in 1..indent) data.add(' ')
          count += indent
        endIf
        at_newline = false
      endIf

      ++count
      if (value <= Character(0x7F))
        data.add( value )
      else
        is_ascii = false
        if (value <= Character(0x7FF))
          data.[ add(0xC0 | (value:>>>:6)), add(0x80 | (value & 0x3F)) ]
        elseIf (value <= Character(0xFFFF))
          data.[ add(0xE0 | (value:>>>:12)), add(0x80 | ((value:>>>:6) & 0x3F)), add(0x80 | (value & 0x3F)) ]
        elseIf (value <= Character(0x10FFFF))
          data.[ add(0xF0 | (value:>>>:18)), add(0x80 | ((value:>>>:12) & 0x3F)) ]
          data.[ add(0x80 | ((value:>>>:6) & 0x3F)), add(0x80 | (value & 0x3F)) ]
        else
          data.add( '?' )
        endIf
      endIf
      return this

    method print( value:Int32 )->this
      return print( value->Int64 )

    method print( value:Int64 )->this
      if (value == (1->Int64 :<<: 63))
        return print( "-9223372036854775808" )
      elseIf (value < 0)
        print( '-' )
        return print( -value )
      elseIf (value >= 10)
        print( value / 10 )
        return print( ('0'+(value%10))->Character )
      else
        return print( ('0'+value)->Character )
      endIf

    method print( value:Object )->this
      if (is_immutable) return this

      if (value is null)
        print( "null" )
        return this
      endIf

      print( value->String )
      return this

      #{
    method print( value:Real32 )->this
      return this.print( value->Real64 )
      }#

      #{
    method print( value:Real64 )->this
      if (value == 0)
        print( "0.0" )
        return this
      elseIf (value.is_infinite)
        if (value < 0) print( "-infinity" )
        else           print( "infinity" )
        return this
      elseIf (value.is_NaN)
        print( "NaN" )
        return this
      endIf

      if (value < 0)
        print( '-' )
        value = -value
      endIf

      # Display power of 10 exponent for numbers >= 1e16 or <= 1e-4
      if (value >= 1000000000000000.0)
        local pow10 = 0
        while (value >= 10.0)
          value /= 10.0
          ++pow10
        endWhile

        return print( value ).print( 'e' ).print( pow10->Int32 )
      endIf

      if (value < 0.00001)
        local pow10 = 0
        while (value < 0.1)
          value *= 10.0
          --pow10
        endWhile

        return print( value ).print( 'e' ).print( pow10->Int32 )
      endIf

      # Standard output
      forEach (decimal_count in 1..18)
        print_to_work_bytes( value, decimal_count )
        if (scan_work_bytes == value) escapeForEach
      endForEach

      print_work_bytes

      return this

    method print( value:Real64, decimal_places:Int32 )->this
      if (value.is_infinite)
        if (value < 0) print( "-infinity" )
        else           print( "infinity" )
        return this
      elseIf (value.is_NaN)
        print( "NaN" )
        return this
      endIf

      if (value < 0 )
        print( '-' )
        value = -value
      endIf

      local whole = Math.floor( value )
      value -= whole
      while (whole >= 10)
        print( ('0' + ((whole%10)->Int32))->Character )
        whole /= 10
      endWhile
      print( ('0' + ((whole%10)->Int32))->Character )

      reverse

      if (decimal_places != 0)
        print( '.' )
        forEach (1..decimal_places)
          value *= 10
          local digit = Math.floor(value)->Int32
          value -= digit
          print( ('0' + digit)->Character )
        endForEach
      endIf
      if (value >= 0.5)
        print( '5' )
        _round_off
      endIf

      return this
      }#

    method print( value:String )->this
      if (is_immutable) return this

      if (value is null)
        print( "null" )
        return this
      endIf

      if (value.count == 0) return this  # no change

      reserve( value.data.count )  # will include space for null terminator
      native ...
        @|memcpy( $this->data->as_utf8+$data->count, $value->data->as_utf8, $value->data->count );
         |$this->count       += $value->count;
         |$this->data->count += $value->data->count;
         |$this->data->as_utf8[$this->data->count] = 0;

      hash_code = -1;

      return this

    method remove_first->Character
      local result = this[ 0 ]
      if (is_immutable) return result

      cursor = 1
      data.shift( -cursor_offset )
      hash_code = -1
      --count
      data[count] = 0
      return result

    method remove_last->Character
      local result = this[ count-1 ]
      if (is_immutable) return result

      --count
      cursor = count
      data.discard_from( cursor_offset )
      hash_code = -1
      return result

    method reserve( additional_bytes:Int32 )
      if (is_immutable) return
      data.reserve( additional_bytes+1 ) # +1 for null terminator

      #{
    method reverse
      # Reverses the characters in this mutable String.
      if (is_immutable) return

      use builder=String.pool
        result.reserve( count )
        result.print( forEach in this step -1 )
        clear
        this.print result
      endUse

    method reversed->String
      local result = String()
      result.reserve( count )
      result.print( forEach in this step -1 )
      return result
      }#

    method set_cursor( character_index:Int32 )
      # Sets this string's cursor_offset (in bytes) and cursor_index (in characters)
      if (is_ascii)
        cursor_offset = character_index
        cursor_index = character_index
        return
      endIf

      native ...
        @|char* utf8 = $data->as_utf8;
         |
         |RogueInt32 c_offset;
         |RogueInt32 c_index;
         |
         |if ($character_index == 0)
         |{
         |  $cursor_index = 0;
         |  $cursor_offset = 0;
         |  return;
         |}
         |else if ($character_index >= $count - 1 || $cursor_index > $count-1 || $cursor_offset > $data->count-1)
         |{
         |  c_offset = $data->count;
         |  c_index = $count;
         |}
         |else
         |{
         |  c_offset = $cursor_offset;
         |  c_index  = $cursor_index;
         |}
         |
         |while (c_index < $character_index)
         |{
         |  while ((utf8[++c_offset] & 0xC0) == 0x80) {}
         |  ++c_index;
         |}
         |
         |while (c_index > $character_index)
         |{
         |  while ((utf8[--c_offset] & 0xC0) == 0x80) {}
         |  --c_index;
         |}
         |
         |$cursor_index = c_index;
         |$cursor_offset = c_offset;

         #{
    method _round_off
      # Internal use.
      #
      # Removes the last digit and rounds off preceding digits accordingly.
      #
      # Requires: this mutable String contains a real number in the form [0-9]*.[0-9]+
      if (remove_last >= '5')
        forEach (i in count-1 downTo 0)
          if (this[i] != '.')
            local digit = this[i]
            if (digit == '9') this[i] = 0
            if (this[i] == ('9'+1)) work_bytes[i] = '0'
            else                          return
          endIf
          --i
        endWhile
        work_bytes.insert( '1' )
      endIf
      }#

  NATIVE
    nativeHeader @|RogueString* RogueString_create( const char* cstring, int byte_count, int must_free );
                  |RogueString* RogueString_create_from_ascii256( const char* cstring, int byte_count, int must_free );
                  |RogueInt32   RogueString_compute_hash_code( RogueString* THIS, RogueInt32 starting_hash );
                  |const char*  RogueString_to_c_string( RogueString* st );
                  |RogueInt32   RogueString_utf8_character_count( const char* cstring, int byte_count );

    nativeCode  @|RogueString* RogueString_create( const char* cstring, int byte_count, int must_free )
                 |{
                 |  if (byte_count == -1) byte_count = (int) strlen(cstring);
                 |  RogueInt32 character_count = RogueString_utf8_character_count( cstring, byte_count );
                 |  if (character_count == -1) return RogueString_create_from_ascii256( cstring, byte_count, must_free );
                 |
                 |  RogueString* result = ROGUE_CREATE_OBJECT( RogueString );
                 |  RogueByteList* data = ROGUE_CREATE_OBJECT( RogueByteList );
                 |  result->data = data;
                 |
                 |  data->as_utf8        = (char*) cstring;
                 |  data->count          = byte_count;
                 |  data->capacity       = byte_count + 1;
                 |  data->is_borrowed    = !must_free;
                 |  data->element_size   = 1;
                 |
                 |  result->count        = character_count;
                 |  result->is_immutable = !must_free;
                 |  result->hash_code    = -1;
                 |  result->is_ascii     = (character_count == byte_count);
                 |  return result;
                 |}
                 |
                 |RogueString* RogueString_create_from_ascii256( const char* cstring, int byte_count, int must_free )
                 |{
                 |  if (byte_count == -1) byte_count = (int) strlen(cstring);
                 |
                 |  int utf8_byte_count = 0;
                 |  int i;
                 |  for (i=byte_count; --i>=0; )
                 |  {
                 |    if (cstring[i] & 0x80) utf8_byte_count += 2;
                 |    else                   ++utf8_byte_count;
                 |  }
                 |
                 |  if (utf8_byte_count == byte_count)
                 |  {
                 |    return RogueString_create( cstring, byte_count, must_free );
                 |  }
                 |
                 |  RogueString* result = ROGUE_CREATE_OBJECT( RogueString );
                 |  RogueString__init__RogueInt32( result, utf8_byte_count );
                 |
                 |  char* utf8 = result->data->as_utf8;
                 |  int dest_i = 0;
                 |  for (i=-1; ++i<byte_count; )
                 |  {
                 |    char ch = cstring[i];
                 |    if (ch & 0x80)
                 |    {
                 |      // %aaaaaaaa ->
                 |      // %110x xxaa 10aa aaaa
                 |      utf8[dest_i]   = 0xC0 | ((ch >> 6) & 0x03);
                 |      utf8[dest_i+1] = 0x80 | ((ch >> 2) & 0x3F);
                 |      dest_i += 2;
                 |    }
                 |    else
                 |    {
                 |      utf8[dest_i++] = ch;
                 |    }
                 |  }
                 |  utf8[ utf8_byte_count ] = 0;
                 |
                 |  result->data->count = utf8_byte_count;
                 |  result->count       = byte_count;
                 |  result->hash_code   = -1;
                 |
                 |  if (must_free) ROGUE_FREE( (void*)cstring );
                 |
                 |  return result;
                 |}
                 |
                 |RogueInt32 RogueString_compute_hash_code( RogueString* THIS, RogueInt32 starting_hash )
                 |{
                 |  RogueInt32 hash = starting_hash;
                 |  int n = THIS->data->count;
                 |  char* src = THIS->data->as_utf8 - 1;
                 |  while (--n >= 0)
                 |  {
                 |    hash = ((hash<<3) - hash) + *(++src);
                 |  }
                 |  return hash;
                 |}
                 |
                 |const char* RogueString_to_c_string( RogueString* st )
                 |{
                 |  if ( !st ) { return "null"; }
                 |  return st->data->as_utf8;
                 |}
                 |
                 |RogueInt32 RogueString_utf8_character_count( const char* cstring, int byte_count )
                 |{
                 |  // Returns -1 if 'cstring' is not a valid UTF-8 string.
                 |  if (byte_count == -1) byte_count = strlen(cstring);
                 |
                 |  RogueInt32 character_count = 0;
                 |  int i;
                 |  for (i=0; i<byte_count; ++character_count)
                 |  {
                 |    int b = cstring[ i ];
                 |    if (b & 0x80)
                 |    {
                 |      if ( !(b & 0x40) ) { return -1;}
                 |
                 |      if (b & 0x20)
                 |      {
                 |        if (b & 0x10)
                 |        {
                 |          // %11110xxx 10xxxxxx 10xxxxxx 10xxxxxx
                 |          if (b & 0x08) { return -1;}
                 |          if (i + 4 > byte_count || ((cstring[i+1] & 0xC0) != 0x80) || ((cstring[i+2] & 0xC0) != 0x80)
                 |              || ((cstring[i+3] & 0xC0) != 0x80)) { return -1;}
                 |          i += 4;
                 |        }
                 |        else
                 |        {
                 |          // %1110xxxx 10xxxxxx 10xxxxxx
                 |          if (i + 3 > byte_count || ((cstring[i+1] & 0xC0) != 0x80) || ((cstring[i+2] & 0xC0) != 0x80))
                 |          {
                 |            return -1;
                 |          }
                 |          i += 3;
                 |        }
                 |      }
                 |      else
                 |      {
                 |        // %110x xxxx 10xx xxxx
                 |        if (i + 2 > byte_count || ((cstring[i+1] & 0xC0) != 0x80)) { return -1; }
                 |        i += 2;
                 |      }
                 |    }
                 |    else
                 |    {
                 |      ++i;
                 |    }
                 |  }
                 |
                 |  return character_count;
                 |}
                 |

endClass

class StringPool : ObjectPool<<String>>
  METHODS
    method on_end_use( builder:String )
      available.add( builder.clear )
endClass

