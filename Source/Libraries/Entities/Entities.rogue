module Entities

uses Geometry [export]
uses Utility/Node

$macro ENTITY_ATTRIBUTE( NAME, is_name, value )
  DEFINITIONS
    $id(ATTRIBUTE_ NAME) = value

  METHODS
    method is_name->Logical
      return (attributes & (value))

    method $id(set_ is_name)( setting:Logical )
      if (setting) attributes |= (value)
      else         attributes &= !(value)
$endMacro

$include Entities/Entity

class Entities : Entity[]
  METHODS
    method needs_redraw( callback=null:Function(Box) )->Logical
      local any_dirty = false
      forEach (entity in this)
        if (entity.needs_redraw(callback))
          if (not callback) return true
          any_dirty = true
        endIf
      endForEach
      return any_dirty

    method draw( origin:XY )
      forEach (entity in this)
        if (not entity.is_hidden) entity.draw( origin )
      endForEach

    method update
      (forEach in this).update
endClass
