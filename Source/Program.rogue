module R2

class Program [singleton]
  PROPERTIES
    t              : Token

    is_configured  = false

    type_Logical   : Type
    type_Character : Type
    type_Int32     : Type
    type_Real64    : Type
    type_String    : Type
    type_Value     : Type

    type_Object    : Type
    type_Global    : Type
    type_XY        : Type

    parsed_files   = StringTable<<AST>>()
    definitions    = StringTable<<Token[]>>()

    default_module  : Module
    global_module   : Module
    current_module  : Module
    all_modules     = Module[]
    modules_by_name = StringTable<<Module>>()

  METHODS
    method init
      Program = this # update singleton reference

      t = Token( TokenType.EOI, "R2" )

      default_module = Module( t, "Default" )
      global_module  = Module( t, "Global" )
      default_module.uses_module( global_module )

      current_module = global_module
      type_Logical   = TypeLogical(t)
      type_Character = TypeCharacter(t)
      type_Int32     = TypeInt32(t)
      type_Real64    = TypeReal64(t)
      type_String    = TypeString(t)
      type_Value     = TypeValue(t)
      type_Object    = Type( t, "Object" )
      type_Global    = Type( t, "Global" )
      type_XY        = Type( t, "XY" ).[ is_built_in=true ]

      current_module = default_module

    method get_module( name:String )->Module
      return modules_by_name[ name ]

    method get_module( t:Token, name:String )->Module
      if (name is null)
        return default_module
      elseIf (modules_by_name.contains(name))
        return modules_by_name[ name ]
      else
        return Module( t, name )  # Module adds itself to lookup tables.
      endIf

    method find_type( name:String )->Type
      if (name.contains("::"))
        local m = get_module( name.before_first("::") )
        return m.find_type( name.after_first("::") )
      else
        local type = default_module.find_type( name, &extended_search )
        if (type) return type
        return null
      endIf

    method include( filepath:String )
      include( t, filepath )

    method include( t:Token, filepath:String )
      filepath = File.abs( filepath.with_trailing( ".r2" ) )
      if (not File.exists(filepath))
        throw t.error( "No such file '$'."(filepath) )
      endIf

      if (parsed_files.contains(filepath)) return
      parsed_files[filepath] = null # placeholder to prevent recursive inclusion

      temporarily current_module = Program.default_module
        local tokens = Scanner( File(filepath) ).tokenize
        Parser( tokens ).preprocess
        local ast = Parser(tokens).parse->(as AST)
        parsed_files[ filepath ] = ast
        if (ast)
          Collector().visit( ast )
        endIf
      endTemporarily

    method resolve
      (forEach in all_modules).organize

      local r_on_launch = default_module.find_routine( "on_launch()" )
      if (not r_on_launch)
        r_on_launch = Routine( t, default_module, "on_launch", Statements(t) )
        default_module.add_routine( r_on_launch )
      endIf
      (forEach in all_modules).collect_global_statements( r_on_launch.statements )
      r_on_launch.is_organized = false
      r_on_launch.organize

      (forEach in all_modules).resolve


    method set_current_module( @current_module )

    method set_current_module( t:Token, name:String )
      if (name is null)
        @current_module = default_module
      elseIf (modules_by_name.contains(name))
        @current_module = modules_by_name[ name ]
      else
        @current_module = Module( t, name )
      endIf

    method type( name:String )->Type
      if (name.contains("::"))
        local m = get_module( name.before_first("::") )
        return m.type( name.after_first("::") )
      else
        return default_module.type( name )
      endIf

endClass

