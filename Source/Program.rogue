module R2

class Program [singleton]
  PROPERTIES
    t              = Token( TokenType.EOI, "Rogue" )
    included_files = Set<<String>>()
    definitions    = StringTable<<Token[]>>()

    modules        = StringTable<<Module>>()
    default_module : Module
    current_module : Module

    type_String    = TypeString( t )

  METHODS
    method init
      Program = this  # update singleton reference
      default_module = get_module( t, "Default" )
      current_module = default_module

    method description->String
      return "Program"

    method get_module( t:Token, name:String )->Module
      local m = modules[ name ]
      if (m) return m

      m = Module( t, name )
      modules[ name ] = m
      return m

    method include( filepath:String )
      include( t, filepath )

    method include( t:Token, filepath:String )
      filepath = File.abs( filepath.with_trailing( ".r2" ) )
      if (not File.exists(filepath))
        throw t.error( "No such file '$'."(filepath) )
      endIf

      if (included_files.contains(filepath)) return
      included_files.add( filepath )

      temporarily current_module = Program.default_module
        local tokens = Scanner( File(filepath) ).tokenize
        Parser( tokens ).preprocess
        local elements = Parser(tokens).parse
        if (elements)
          local collector = Collector()
          collector.visit( forEach in elements )
        endIf
      endTemporarily

    method resolve
      (forEach in modules).organize
      (forEach in modules).resolve

endClass
