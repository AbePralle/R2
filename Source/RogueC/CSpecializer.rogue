module Rogue

augment
  METHODS
    method Module.specialize_c
      local specializer = CSpecializer( this )
      forEach (type in types)
        type.specialize_c( specializer )
      endForEach

      forEach (r in routines)
        specializer.visit( null, r )
      endForEach

    method Type.specialize_c( specializer:CSpecializer )
      specializer.visit( this )  # does not visit children
      specializer.visit( forEach in global_methods )
endAugment

class CSpecializer : Visitor
  PROPERTIES
    writer         : CWriter
    this_module    : Module
    this_type      : Type
    this_procedure : Procedure
    autoname_index = 0

    statement_injector : ListRewriter<<Cmd>>

  METHODS
    method init( this_module )

    method visit( this_type )
      this_procedure = null
      # TODO

    method visit( this_type, this_procedure )
      visit( this_procedure )

    method autoname( base:String )->String
      local result = "_auto_$_$"(base,autoname_index)
      ++autoname_index
      return result

    method on_visit( cmd:Procedure )
      autoname_index = 0

      forEach (p at i in cmd.parameters)
        block p = p->(as Local)
          p.c_name = "$_$" (p.name,i)
        endBlock
      endForEach

      local di = cmd.parameters.count
      forEach (v at i in cmd.locals) v.c_name = "$_$"(v.name,i+di)

      visit_children( cmd )

    method on_visit( cmd:Statements )
      temporarily statement_injector = cmd.list.rewriter
        forEach (statement in statement_injector)
          statement = visit( statement )
          if (statement) statement_injector.write( statement )
        endForEach
      endTemporarily

endClass

augment Local
  PROPERTIES
    c_name : String
endAugment

augment Procedure
  PROPERTIES
    c_name : String

  METHODS
    method c_name->String
      throw UnsupportedOperationError()
endAugment

augment Type
  PROPERTIES
    c_name : String   # e.g. RogueString
    c_type : String   # e.g. RogueString*

  METHODS
    method c_type->String
      if (@c_type) return @c_type
      @c_type = c_name
      if (is_reference) @c_type += "*"
      return @c_type

    method c_name->String
      if (@c_name) return @c_name
      @c_name = "$$" (module_context.c_name,name)
      return @c_name

endAugment

