module Rogue

$include "Macros.rogue"

$include "AccessAndAssignPatcher.rogue"
$include "AspectMethodPatcher.rogue"
$include "AssignIDs.rogue"
$include "Attributes.rogue"
$include "BranchAnalyzer.rogue"
$include "BuildDynamicMethodTable.rogue"
$include "Candidates.rogue"
$include "Collector.rogue"
$include "CullUnusedElements.rogue"
$include "TypeOrganizer.rogue"
$include "ContextBlockPatcher.rogue"
$include "ControlType.rogue"
$include "CmdType.rogue"
$include "CGenerator.rogue"
$include "CSpecializer.rogue"
$include "CWriter.rogue"
$include "DecompositionAnalyzer.rogue"
$include "Finalizer.rogue"
$include "InspectionVisitor.rogue"
$include "Module.rogue"
$include "MethodOrganizer.rogue"
$include "Parser.rogue"
$include "Procedure.rogue"
$include "Program.rogue"
$include "PropertyOrganizer.rogue"
$include "Resolver.rogue"
$include "Scanner.rogue"
$include "Template.rogue"
$include "Transformer.rogue"
$include "Type.rogue"
$include "EndScopePatcher.rogue"
uses Rogue
uses Utility/CommandLineParser

try
  RogueC( System.command_line_arguments )

catch (error:CompileError)
  Console.error.println error
  System.exit 1
catch (error:Error)
  Console.error.println error
  Console.error.println error.stack_trace
  System.exit 1
endTry

class RogueC
  PROPERTIES
    command : Value

  METHODS
    method init( args:String[] )
      command = parse_args( args )

      if (command//options//help or command//args.count == 0)
        print_usage
        System.exit 0
      endIf

      if (command//options//libraries)
        local paths = String[]
        forEach (lib in command//options//libraries)
          local path = lib->String.replacing(';',',')
          if (not System.is_windows) path .= replacing(':',',')
          paths.add( forEach in path->String.split(',') )
        endForEach
        command//options//libraries = paths
        Program.add_include_search_path( forEach in paths )
      endIf

      if (command//options//real)
        local real_bits = command//options//real->Int32
        if (real_bits != 32 and real_bits != 64)
          throw Error( "--real can only be set to 32 or 64." )
        endIf
        Program.real_bits = real_bits
      endIf

      Program.include( forEach in command//args )
      Program.include( "Standard" )
      Program.resolve
      Program.generate_c

    method parse_args( args:String[] )->Value
      local command = CommandLineParser().
      [
        option( "--debug" )
        option( "--gc=" )
        option( "--gc-threshold=" )
        option( "--help",       &aliases=["-h","-?"] )
        option( "--libraries=", &alias="-L", &multi )
        option( "--main" )
        option( "--output=" )
        option( "--real=", &alias="-r" )
        #option( "--setting=", &alias="-s" )
      ].parse( args )

      if (command//options.contains("debug"))
        Program.stack_trace = true
      endIf

      if (command//options.contains("gc"))
        which (command//options//gc->String)
          case "auto":   Program.gc_auto = true
          case "manual": Program.gc_auto = false
          others
            throw Program.t.error( "Valid --gc modes are 'auto' and 'manual'." )
        endWhich
      endIf

      if (command//options.contains("gc-threshold"))
        local option = command//options["gc-threshold"]->String
        local value = option->Int32
        if (option.ends_with("m",&ignore_case) or option.ends_with("mb",&ignore_case))
          value *= 1024*1024
        elseIf (option.ends_with("k",&ignore_case) or option.ends_with("kb",&ignore_case))
          value *= 1024
        endIf
        Program.gc_threshold = value
      endIf

      if (command//options//main)
        Program.generate_main = true
      endIf

      if (command//args.count > 0)
        if (command//options//output)
            local filepath = command//options//output->String
            if (File.is_folder(filepath))
              filepath /= command//args.first->String.before_suffix( ".rogue" )
            else
              local parent = File.folder( filepath )
              if (String.exists(parent)) File.create_folder( parent )
            endIf
            Program.output_filepath = filepath
        else
          Program.output_filepath = command//args.first->String.before_suffix( ".rogue" )
        endIf
      endIf

      return command

    method print_usage
      println @|USAGE
               |  rogue [OPTIONS] <filepath>
               |
               |OPTIONS
               |  --help, -h, -?
               |    Show this help text.
               |
               |  --gc=[auto|manual]
               |    Sets garbage collection mode:
               |      --gc=auto   - Collects after every [--gc-threshold] number of bytes have
               |                    been allocated (default 1 MB). This is slower than 'manual'
               |                    due to the extra overhead of tracking local variables.
               |      --gc=manual - Rogue_collect_garbage() should be called by the C framework
               |                    at a regular interval (such as after every frame) outside of
               |                    any calls into Rogue code. Or: never call GC for programs
               |                    that complete a task and then halt; this will allow them to
               |                    execute as fast as possible. Calling Rogue_collect_garbage()
               |                    only results in a GC if the --gc-threshold has been reached.
               |
               |  --gc-threshold={number}[MB|K]
               |    Sets the GC threshold in bytes (default), megabytes, or kilobytes. '1048576',
               |    '1024K', and '1MB' are all equivalent. The default is 1MB.
               |
               |  --libraries="path1;path2", -L path1:path2
               |    Specify paths RogueC should look through for '$include' and 'uses' directives.
               |    This option can be listed multiple times. Both ';' and ':' can be used as a
               |    path separator on quoted paths.
               |
               |  --main
               |    Generates a main() function with the C output.
               |
               |  --output=<filepath>
               |   Specify the destination folder and/or the base filename for generated C
               |   output.
               |
               |  --real=32, -r 32
               |    Specifies that the 'Real' datatype should be Real32 instead of Real64.
               |    This affects the type of floating point literals (2.54, pi) as well.

endClass

