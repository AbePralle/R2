# Generated and updated by Froley. Custom changes will not be overwritten; customize as desired.
module Rogue

class Visitor : Visitor<<Cmd>>
  # Standard tree-rebuilding visitor.
endClass

class Visitor<<$ReturnType>>
  PROPERTIES
    this_module    : Module
    this_type      : Type
    this_procedure : Procedure

  METHODS
    method on( cmd:Cmd )->$ReturnType
      # Default per-node call sequence for regular 'Visitor' AKA 'Visitor<<Cmd>>':
      #   CALL                  OVERLOADABLE METHOD
      #   --------------------  -----------------------------------------
      #   visit(cmd)            -> on(cmd:CmdType)->Cmd (or ->ResultType)
      #   visit_content(cmd)       -> on_visit(cmd:CmdType)
      #     visit_children(cmd)       -> on_visit_children(cmd:CmdType)
      #                            on_validate(cmd:CmdType)->Cmd/ResultType
      #
      # For a regular 'Visitor' AKA 'Visitor<<Cmd>>':
      # - The AST is rebuilt with the return value of this call, so return
      #   'cmd' to keep this subtree or else return a different Cmd node to
      #   replace this subtree.
      visit_content( cmd )
      if ($ReturnType isType Cmd)
        return validate( cmd )
      else
        validate( cmd )
        return $ReturnType.meta.default_value
      endIf

    method on_visit( cmd:Cmd )
      # Called from on(CmdType). If you overload this method with an extended
      # Cmd type, this node's children will only be visited if and
      # when you call visit_children(cmd).
      visit_children( cmd )

    method on_validate( cmd:Cmd )->$ReturnType
      if ($ReturnType isType Cmd) return cmd
      else                            return $ReturnType.meta.default_value

    method visit( cmd:Cmd )->$ReturnType [propagated]
      # Call to invoke the appropriate on/on_visit() for the given Cmd type.
      #
      # For example:
      #   method on( cmd:Binary )->Cmd
      #     cmd.left  = visit(cmd.left)
      #     cmd.right = visit(cmd.right)
      #     return cmd
      if ($ReturnType isType Cmd)
        if (cmd is null) return null
      else
        if (cmd is null) return $ReturnType.meta.default_value
      endIf
      #@trace cmd.type_name
      return cmd.dispatch<<ThisType,$ReturnType>>( this )

    method visit_children( cmd:Cmd )->Cmd [propagated]
      # Call from 'on()' or 'on_visit()' handler to visit subtrees.
      cmd.dispatch_on_visit_children<<ThisType>>( this )
      return cmd

    method visit_content( cmd:Cmd )->Cmd [propagated]
      # Primarily for internal use - see on(Cmd) for usage.
      cmd.dispatch_on_visit<<ThisType>>( this )
      return cmd

    method visit( m:Module )
      visit_routines( m )
      visit_types( m )

    method visit_routines( m:Module )
      temporarily this_module = m
        forEach(r in m.routines.values)
          temporarily this_procedure = r
            visit( r )
          endTemporarily
        endForEach
      endTemporarily

    method visit_types( m:Module )
      temporarily this_module = m
        forEach (type in m.types.values)
          visit_type( type )
        endForEach
      endTemporarily

    method visit_type( type:Type )
      temporarily this_type = type
        on_visit_type( type )
      endTemporarily

    method on_visit_type( type:Type )
      visit_global_methods( type )
      visit_methods( type )

    method visit_global_methods( type:Type )
      temporarily this_type = type
        forEach (m in type.global_methods.values)
          temporarily this_procedure = m
            visit( m )
          endTemporarily
        endForEach
      endTemporarily

    method visit_methods( type:Type )
      temporarily this_type = type
        forEach (m in type.methods.values)
          temporarily this_procedure = m
            visit( m )
          endTemporarily
        endForEach
      endTemporarily

    method validate( cmd:Cmd )->$ReturnType [propagated]
      if ($ReturnType isType Cmd)
        if (cmd is null) return null
      else
        if (cmd is null) return $ReturnType.meta.default_value
      endIf
      return cmd.dispatch_on_validate<<ThisType,$ReturnType>>( this )

    method on_visit_children( cmd:Cmd )
      # Overloaded automatically by the Froley compiler
      noAction

    method on_visit_children( cmd:CmdList )
      if ($ReturnType isType Cmd)
        forEach (element in writer=cmd.list.rewriter)
          local visited_element = visit( element )
          if (visited_element) writer.write( visited_element )
        endForEach
      else
        visit( forEach in cmd.list )
      endIf

    method on_visit_children( cmd:Statements )
      if ($ReturnType isType Cmd)
        forEach (element in writer=cmd.list.rewriter)
          local visited_element = visit( element )
          if (visited_element)
            if (visited_element instanceOf Statements)
              writer.write( forEach in visited_element )
            else
              writer.write( visited_element )
            endIf
          endIf
        endForEach
      else
        visit( forEach in cmd.list )
      endIf


    method on_visit_children( cmd:Binary )
      if ($ReturnType isType Cmd)
        cmd.left = visit(cmd.left)
        cmd.right = visit(cmd.right)
      else
        visit( cmd.left )
        visit( cmd.right )
      endIf

    method on_visit_children( cmd:Unary )
      if ($ReturnType isType Cmd)
        cmd.operand = visit(cmd.operand)
      else
        visit( cmd.operand )
      endIf

    method on_visit_children( cmd:Print )
      if ($ReturnType isType Cmd)
        cmd.args = visit(cmd.args)
      else
        visit( cmd.args )
      endIf

    method on_visit_children( cmd:Println )
      if ($ReturnType isType Cmd)
        cmd.args = visit(cmd.args)
      else
        visit( cmd.args )
      endIf

    method on_visit_children( cmd:ContextAccess )
      if ($ReturnType isType Cmd)
        cmd.context = visit(cmd.context)
        cmd.args = visit(cmd.args)
      else
        visit( cmd.context )
        visit( cmd.args )
      endIf

    method on_visit_children( cmd:IndexAccess )
      if ($ReturnType isType Cmd)
        cmd.context = visit(cmd.context)
        cmd.index = visit(cmd.index)
      else
        visit( cmd.context )
        visit( cmd.index )
      endIf

    method on_visit_children( cmd:Procedure )
      if ($ReturnType isType Cmd)
        cmd.parameters = visit(cmd.parameters)
        cmd.return_type = visit(cmd.return_type)->(as Type)
        cmd.attributes = visit(cmd.attributes)->(as Attributes)
        cmd.body = visit(cmd.body)->(as LocalScope)
      else
        visit( cmd.parameters )
        visit( cmd.return_type )
        visit( cmd.attributes )
        visit( cmd.body )
      endIf

    method on_visit_children( cmd:Local )
      if ($ReturnType isType Cmd)
        cmd.type = visit(cmd.type)->(as Type)
      else
        visit( cmd.type )
      endIf

    method on_visit_children( cmd:LocalDeclarations )
      if ($ReturnType isType Cmd)
        cmd.declarations = visit(cmd.declarations)
        cmd.type = visit(cmd.type)->(as Type)
      else
        visit( cmd.declarations )
        visit( cmd.type )
      endIf

    method on_visit_children( cmd:Access )
      if ($ReturnType isType Cmd)
        cmd.args = visit(cmd.args)
      else
        visit( cmd.args )
      endIf

    method on_visit_children( cmd:Assign )
      if ($ReturnType isType Cmd)
        cmd.target = visit(cmd.target)
        cmd.new_value = visit(cmd.new_value)
      else
        visit( cmd.target )
        visit( cmd.new_value )
      endIf

    method on_visit_children( cmd:SetLocal )
      if ($ReturnType isType Cmd)
        cmd.info = visit(cmd.info)->(as Local)
        cmd.new_value = visit(cmd.new_value)
      else
        visit( cmd.info )
        visit( cmd.new_value )
      endIf

    method on_visit_children( cmd:GetLocal )
      if ($ReturnType isType Cmd)
        cmd.info = visit(cmd.info)->(as Local)
      else
        visit( cmd.info )
      endIf

    method on_visit_children( cmd:Class )
      if ($ReturnType isType Cmd)
        cmd.name = visit(cmd.name)
        cmd.template_parameters = visit(cmd.template_parameters)
        cmd.constructor_properties = visit(cmd.constructor_properties)
        cmd.base_types = visit(cmd.base_types)
        cmd.attributes = visit(cmd.attributes)->(as Attributes)
        cmd.sections = visit(cmd.sections)
      else
        visit( cmd.name )
        visit( cmd.template_parameters )
        visit( cmd.constructor_properties )
        visit( cmd.base_types )
        visit( cmd.attributes )
        visit( cmd.sections )
      endIf

    method on_visit_children( cmd:PropertyDeclarations )
      if ($ReturnType isType Cmd)
        cmd.declarations = visit(cmd.declarations)
        cmd.type = visit(cmd.type)->(as Type)
      else
        visit( cmd.declarations )
        visit( cmd.type )
      endIf

    method on_visit_children( cmd:Property )
      if ($ReturnType isType Cmd)
        cmd.initial_value = visit(cmd.initial_value)
        cmd.type = visit(cmd.type)->(as Type)
      else
        visit( cmd.initial_value )
        visit( cmd.type )
      endIf

    method on_visit_children( cmd:ForEachCollection )
      if ($ReturnType isType Cmd)
        cmd.data = visit(cmd.data)
        cmd.starting_index = visit(cmd.starting_index)
        cmd.step_size = visit(cmd.step_size)
      else
        visit( cmd.data )
        visit( cmd.starting_index )
        visit( cmd.step_size )
      endIf

    method on_visit_children( cmd:ForEachControl )
      if ($ReturnType isType Cmd)
        cmd.optional_at = visit(cmd.optional_at)->(as ForEachAt)
        cmd.collection = visit(cmd.collection)->(as ForEachCollection)
      else
        visit( cmd.optional_at )
        visit( cmd.collection )
      endIf

    method on_visit_children( cmd:Block )
      if ($ReturnType isType Cmd)
        cmd.statements = visit(cmd.statements)
      else
        visit( cmd.statements )
      endIf

    method on_visit_children( cmd:Conditional )
      if ($ReturnType isType Cmd)
        cmd.initialization = visit(cmd.initialization)
        cmd.condition = visit(cmd.condition)
        cmd.statements = visit(cmd.statements)
      else
        visit( cmd.initialization )
        visit( cmd.condition )
        visit( cmd.statements )
      endIf

    method on_visit_children( cmd:ForEach )
      if ($ReturnType isType Cmd)
        cmd.condition = visit(cmd.condition)->(as ForEachControl)
        cmd.statements = visit(cmd.statements)
      else
        visit( cmd.condition )
        visit( cmd.statements )
      endIf

    method on_visit_children( cmd:ControlStructure )
      if ($ReturnType isType Cmd)
        cmd.initialization = visit(cmd.initialization)
        cmd.statements = visit(cmd.statements)
      else
        visit( cmd.initialization )
        visit( cmd.statements )
      endIf

    method on_visit_children( cmd:Iterator )
      if ($ReturnType isType Cmd)
        cmd.initialization = visit(cmd.initialization)
        cmd.control = visit(cmd.control)
        cmd.condition = visit(cmd.condition)
        cmd.statements = visit(cmd.statements)
        cmd.upkeep = visit(cmd.upkeep)
      else
        visit( cmd.initialization )
        visit( cmd.control )
        visit( cmd.condition )
        visit( cmd.statements )
        visit( cmd.upkeep )
      endIf

    method on_visit_children( cmd:If )
      if ($ReturnType isType Cmd)
        cmd.condition = visit(cmd.condition)
        cmd.statements = visit(cmd.statements)
        cmd.cmd_else = visit(cmd.cmd_else)->(as If)
      else
        visit( cmd.condition )
        visit( cmd.statements )
        visit( cmd.cmd_else )
      endIf

    method on_visit_children( cmd:Return )
      if ($ReturnType isType Cmd)
        cmd.result = visit(cmd.result)
      else
        visit( cmd.result )
      endIf

    method on_visit_children( cmd:Routine )
      if ($ReturnType isType Cmd)
        cmd.parameters = visit(cmd.parameters)
        cmd.return_type = visit(cmd.return_type)->(as Type)
        cmd.attributes = visit(cmd.attributes)->(as Attributes)
        cmd.body = visit(cmd.body)->(as LocalScope)
      else
        visit( cmd.parameters )
        visit( cmd.return_type )
        visit( cmd.attributes )
        visit( cmd.body )
      endIf

    method on_visit_children( cmd:CallProcedure )
      if ($ReturnType isType Cmd)
        cmd.args = visit(cmd.args)
      else
        visit( cmd.args )
      endIf

    method on_visit_children( cmd:PrintValue )
      if ($ReturnType isType Cmd)
        cmd.operand = visit(cmd.operand)
      else
        visit( cmd.operand )
      endIf

    method on_visit_children( cmd:UsesModule )
      if ($ReturnType isType Cmd)
        cmd.path = visit(cmd.path)
        cmd.attributes = visit(cmd.attributes)->(as Attributes)
      else
        visit( cmd.path )
        visit( cmd.attributes )
      endIf

    method on_visit_children( cmd:DefineModule )
      if ($ReturnType isType Cmd)
        cmd.attributes = visit(cmd.attributes)->(as Attributes)
      else
        visit( cmd.attributes )
      endIf

    method on_visit_children( cmd:ModuleQualifiedID )
      if ($ReturnType isType Cmd)
        cmd.context = visit(cmd.context)
      else
        visit( cmd.context )
      endIf

    method on_visit_children( cmd:NativeExpression )
      if ($ReturnType isType Cmd)
        cmd.result_type = visit(cmd.result_type)
      else
        visit( cmd.result_type )
      endIf

    method on_visit_children( cmd:CreateObject )
      if ($ReturnType isType Cmd)
        cmd.of_type = visit(cmd.of_type)->(as Type)
        cmd.args = visit(cmd.args)
      else
        visit( cmd.of_type )
        visit( cmd.args )
      endIf

    method on_visit_children( cmd:Method )
      if ($ReturnType isType Cmd)
        cmd.type_context = visit(cmd.type_context)->(as Type)
        cmd.parameters = visit(cmd.parameters)
        cmd.return_type = visit(cmd.return_type)->(as Type)
        cmd.attributes = visit(cmd.attributes)->(as Attributes)
        cmd.body = visit(cmd.body)->(as LocalScope)
      else
        visit( cmd.type_context )
        visit( cmd.parameters )
        visit( cmd.return_type )
        visit( cmd.attributes )
        visit( cmd.body )
      endIf

    method on_visit_children( cmd:TypeContext )
      if ($ReturnType isType Cmd)
        cmd.type = visit(cmd.type)->(as Type)
      else
        visit( cmd.type )
      endIf

    method on_visit_children( cmd:AddAndAssignLocal )
      if ($ReturnType isType Cmd)
        cmd.info = visit(cmd.info)->(as Local)
        cmd.operand = visit(cmd.operand)
      else
        visit( cmd.info )
        visit( cmd.operand )
      endIf

    method on_visit_children( cmd:OpAndAssign )
      if ($ReturnType isType Cmd)
        cmd.target = visit(cmd.target)
        cmd.operand = visit(cmd.operand)
      else
        visit( cmd.target )
        visit( cmd.operand )
      endIf

    method on_visit_children( cmd:CallMethod )
      if ($ReturnType isType Cmd)
        cmd.context = visit(cmd.context)
        cmd.args = visit(cmd.args)
      else
        visit( cmd.context )
        visit( cmd.args )
      endIf

    method on_visit_children( cmd:GetProperty )
      if ($ReturnType isType Cmd)
        cmd.context = visit(cmd.context)
        cmd.info = visit(cmd.info)->(as Property)
      else
        visit( cmd.context )
        visit( cmd.info )
      endIf

    method on_visit_children( cmd:GetThisProperty )
      if ($ReturnType isType Cmd)
        cmd.info = visit(cmd.info)->(as Property)
      else
        visit( cmd.info )
      endIf

    method on_visit_children( cmd:SetProperty )
      if ($ReturnType isType Cmd)
        cmd.context = visit(cmd.context)
        cmd.info = visit(cmd.info)->(as Property)
        cmd.new_value = visit(cmd.new_value)
      else
        visit( cmd.context )
        visit( cmd.info )
        visit( cmd.new_value )
      endIf

    method on_visit_children( cmd:SetThisProperty )
      if ($ReturnType isType Cmd)
        cmd.info = visit(cmd.info)->(as Property)
        cmd.new_value = visit(cmd.new_value)
      else
        visit( cmd.info )
        visit( cmd.new_value )
      endIf

    method on_visit_children( cmd:GetSingleton )
      if ($ReturnType isType Cmd)
        cmd.type = visit(cmd.type)->(as Type)
      else
        visit( cmd.type )
      endIf

    method on_visit_children( cmd:ConvertToType )
      if ($ReturnType isType Cmd)
        cmd.operand = visit(cmd.operand)
        cmd.to_type = visit(cmd.to_type)->(as Type)
      else
        visit( cmd.operand )
        visit( cmd.to_type )
      endIf

endClass
