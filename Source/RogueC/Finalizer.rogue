module Rogue

class Finalizer : InspectionVisitor
  METHODS
    method apply
      Program.apply( AssignIDs() )
      Program.apply( this )

      forEach (entry in Program.dynamic_methods.entries)
        if (entry.value.count > 1)
          (forEach in entry.value).attributes.dynamic_dispatch = true
        endIf
      endForEach

    method on_visit_type( type:Type )
      type.base_type_lookup_index = Program.base_type_lookup.count
      if (type.base_class)
        type.base_type_ids.add( type.base_class.id )
      endIf
      if (type.aspects)
        type.base_type_ids.add( (forEach in type.aspects).id )
      endIf
      Program.base_type_lookup.add( forEach in type.base_type_ids )

      if (type.is_aspect) return
      prior.on_visit_type( type )

    method on_visit( m:Method )
      if (m.type_context.is_aspect) return

      if (this_type.is_reference)
        if (m.type_context is this_type)
          if (this_type.base_class)
            local base_m = this_type.base_class.methods[ m.signature ]
            if (base_m) base_m.attributes.is_overridden = true
          endIf

          local full_sig = m.signature
          if (m.return_type) full_sig += "->" + m.return_type
          local methods = Program.dynamic_methods[full_sig]
          if (not methods)
            methods = Method[]
            Program.dynamic_methods[full_sig] = methods
          endIf
          methods.add( m )
        else
          assert (not m.inheriting_types.contains(this_type))
          m.inheriting_types.add( this_type )
        endIf
      endIf
      visit_children( m )

    method on_visit( p:Property )
      p.initial_value = null

endClass
