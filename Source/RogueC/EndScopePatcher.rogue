module Rogue

class EndScopePatcher : Visitor [singleton]
  PROPERTIES
    resolver      : Resolver
    insert_cmd    : Cmd
    control_stack = ControlStructure[]

  METHODS
    method patch( resolver, insert_cmd, cmd:Cmd )->Cmd
      assert control_stack.is_empty
      return visit( cmd )

    method on( cmd:ControlStructure )->Cmd
      control_stack.add( cmd )
      visit_content( cmd )
      control_stack.remove_last
      return cmd

    #method on( cmd:Escape )->Cmd
      #if ((forEach in control_stack).catches(cmd)) return cmd
      #return patched_statements( cmd )

    method on( cmd:Return )->Cmd
      if (cmd.result)
        # return expression
        # ->
        # local result = expression
        # patch_command
        # return result
        cmd.result = resolver.visit( visit(cmd.result) )
        local v = resolver.add_local( cmd.result.t, "result", cmd.result.require_type )
        local statements = Statements( v.t, SetLocal(v,cmd.result,&initial_assignment) )
        statements.add( insert_cmd.cloned )
        cmd.result = GetLocal(v)
        statements.add( cmd )
        return statements
      else
        return patched_statements( cmd )
      endIf

    method on( cmd:Throw )->Cmd
      return patched_statements( cmd )

    method patched_statements( cmd:Cmd )->Cmd
      return Statements( cmd.t, insert_cmd.cloned, cmd )

endClass
