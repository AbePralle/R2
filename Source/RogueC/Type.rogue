module RogueC

uses Utility/WorkList
uses Utility/ListLookupTable

class Type : Cmd
  PROPERTIES
    module_context    : Module
    name              : String
    base_class        : Type
    aspects           : Type[]
    extended_types    = Type[]
    attributes        : Attributes
    definitions       = StringTable<<Cmd>>()
    global_properties = StringTable<<Property>>()
    properties        = StringTable<<Property>>()
    native_properties = String[]
    global_methods    = StringTable<<GlobalMethod>>()
    methods           = StringTable<<Method>>()
    native_header     = NativeHeader[]
    native_code       = NativeCode[]
    class_def         : Cmd
    states            = StateDef[]

    categories        : Category[]

    type_template                    : Template
    type_args                        : TemplateArgs
    global_method_templates          = ListLookupTable<<String,GlobalMethodTemplate>>()
    global_method_template_instances = Set<<String>>()
    method_templates                 = ListLookupTable<<String,MethodTemplate>>()
    method_template_instances        = Set<<String>>()

    scoped_name           : String
    name_tokens           : Token[]

    id    : Int32     # used for dynamic dispatch tables; introspection data may not exist for all type ids
    index = -1        # index of type in lookup table; used for introspection
    method_data_index : Int32

    m_init_class          : GlobalMethod
    m_on_singleton_change : GlobalMethod
    m_on_cleanup          : Method
    m_primary_constructor : GlobalMethod   # for compounds; indicates what types are for destructuring assignments

    base_type_lookup_index  : Int32
    base_type_ids           = Int32[]

    is_type_organized    : Logical
    properties_organized : Logical
    methods_organizing   : Logical
    methods_organized    : Logical
    definitions_resolved : Logical
    is_resolved          : Logical

  GLOBAL METHODS
    method create( t:Token, name:String, type_args=null:TemplateArgs, &is_tuple )->Type
      # Standard type Name<<TypeArgs>> unless &is_tuple
      local base_name = name

      if (type_args)
        if (type_args.count)
          if (not is_tuple) name = type_args->String(name)
        else
          type_args = null
        endIf
      endIf

      local type = Program.current_module.find_type( t, name, &extended_search )
      if (type) return type

      local template_name = "$<<$>>" (base_name, which{type_args:type_args.count || 0})
      local template = Program.current_module.must_find_template( t, template_name, name, &extended_search )
      return Type( t, template, name, type_args, &=is_tuple )

    method create( t:Token, name:String, template_arg:Type )->Type
      # TypeName<<TypeArg>>
      local type_args = TemplateArgs(t).[ add(TokenList(t,template_arg.name_tokens)) ]
      return Type( t, name, type_args )

    method create( t:Token, module_context:Module, name:String )->Type
      # Module::TypeName
      local type = module_context.find_type( t, name )
      if (type) return type

      local template = Program.current_module.must_find_template( t, name+"<<0>>", name, &extended_search )
      return Type( t, template, name, null )

    method create( t:Token, template:Template, type_args=null:TemplateArgs, &is_tuple )->Type
      return Type( t, template, type_args->String(template.name), type_args, &=is_tuple )

    method create( t:Token, template:Template, name:String, type_args=null:TemplateArgs, &is_tuple )->Type
      # 'name' should already include <<type,args>>
      if (type_args)
        local type = template.module_context.find_type( t, name, &extended_search )
        if (type) return type
      endIf

      local type = Type( t, template.module_context, name, 0 )
      if (is_tuple) type.attributes.is_tuple = true
      type.type_template = template
      type.type_args     = type_args
      if (template.attributes.is_essential) type.ensure_definition
      return type

    method create( t:Token, element_type:Type )->Type
      # Creates an ElementType[] / List<<ElementType>>
      local name = element_type.name + "[]"
      if (name.ends_with("[][][][][][][][][]"))
        throw t.error( "Rogue does not support list types with more than 8 dimensions. Possible infinite template generation. For example, if type $DataType[] directly or indirectly uses type $DataType[][], then type Int32[][] will use type Int32[][][] and so on." )
      endIf
      local type = Program.current_module.find_type( t, name, &extended_search )
      if (type) return type

      local type_args = TemplateArgs(t).[ add(TokenList(t,element_type.name_tokens)) ]
      return Type( t, Program.default_module.must_find_template(t,"List<<1>>",name), name, type_args )

    method create( t:Token, key_type:Type, value_type:Type )->Type
      # Creates type [KeyType:ValueType] AKA Table<<KeyType,ValueType>>
      local name = "[$::$:$::$]"(key_type.module_context,key_type,value_type.module_context,value_type)

      local type = Program.current_module.find_type( t, name, &extended_search )
      if (type) return type

      local type_args = TemplateArgs(t)
      type_args.add( TokenList(t,key_type.name_tokens) )
      type_args.add( TokenList(t,value_type.name_tokens) )
      return Type( t, Program.default_module.must_find_template(t,"Table<<2>>",name), name, type_args )

    method create( t:Token, core_type:Type, optional:Logical )->Type
      # 'optional' is always true when this method is called.
      # CoreType -> CoreType? -> Optional<<CoreType>>
      local name = core_type.name + "?"
      local type = Program.current_module.find_type( t, name, &extended_search )
      if (type) return type

      local template = Program.default_module.must_find_template( t, "Optional<<1>>", name )
      local type_args = TemplateArgs(t).[ add(TokenList(t,core_type.name_tokens)) ]
      type = Type( t, template, name, type_args )
      type.attributes.is_optional = true
      return type

    method create( t:Token, anonymous_elements:AnonymousTupleTypeElements )->Type
      # Transform into named tuple type with names _1, _2, ...
      local named_elements = NamedTupleTypeElements( anonymous_elements.t )
      forEach (type at i in anonymous_elements)
        named_elements.add( NamedTupleTypeElement(anonymous_elements.t,"_$"(i+1),type) )
      endForEach

      return Type( t, named_elements )

    method create( t:Token, named_elements:NamedTupleTypeElements )->Type
      # Example
      # - NamedTupleTypeElements = [ {a:Int32}, {b:Real64} ]
      # - Tuple Type = Tuple<<4>> : Tuple<<a,Int32,b,Real64>>
      # - All in default module 'Rogue'
      local is_anonymous = true
      forEach (element at i in named_elements)
        # See if elements are named _1, _2, ...
        if (element.name != "_$"(i+1))
          is_anonymous = false
          escapeForEach
        endIf
      endForEach

      use builder = StringBuilder.pool
        builder.print '('
        forEach (element at i in named_elements)
          if (i > 0) builder.print ','
          if (not is_anonymous)
            builder.print element.name
            builder.print ':'
          endIf
          builder.print element.of_type.scoped_name
        endForEach
        builder.print ')'
        local tuple_type_name = builder->String

        local type = Program.default_module.types[ tuple_type_name ]
        if (type) return type

        local template_key = "Tuple<<$>>"(named_elements.count*2)
        local template = Program.default_module.templates[ template_key ]
        if (not template)
          # Create template e.g.:
          #   <<$name1,$Type1,$name2,$Type2>>
          #   ( name1:Type1, name2:Type2, ... ) [compound]
          #   endClass
          local placeholders = Token[]
          forEach (element at i in named_elements)
            placeholders.add( element.t.cloned(TokenType.PLACEHOLDER, "$name"+(i+1)) )
            placeholders.add( element.t.cloned(TokenType.PLACEHOLDER, "$Type"+(i+1)) )
          endForEach

          local tokens = Token[]
          t = t.cloned( t.type, null )
          tokens.add( t.cloned(TokenType.SYMBOL_OPEN_PAREN) )            # (
          forEach (i of named_elements)
            if (i > 0) tokens.add( t.cloned(TokenType.SYMBOL_COMMA) )    # ,
            tokens.add( t.cloned(TokenType.PLACEHOLDER, "$name"+(i+1)) ) # $nameN
            tokens.add( t.cloned(TokenType.SYMBOL_COLON) )               # :
            tokens.add( t.cloned(TokenType.PLACEHOLDER, "$Type"+(i+1)) ) # $TypeN
          endForEach
          tokens.add( t.cloned(TokenType.SYMBOL_CLOSE_PAREN) )           # )
          tokens.add( t.cloned(TokenType.SYMBOL_OPEN_SQUARE) )           # [
          tokens.add( t.cloned(TokenType.IDENTIFIER,"compound") )        # compound
          tokens.add( t.cloned(TokenType.SYMBOL_CLOSE_SQUARE) )          # ]
          tokens.add( t.cloned(TokenType.EOL) )                          # EOL
          tokens.add( t.cloned(TokenType.KEYWORD_END_CLASS) )            # endClass
          tokens.add( t.cloned(TokenType.EOL) )                          # EOL

          template = Template( t, Program.default_module, "Tuple", placeholders, tokens, Attribute.COMPOUND )
          Program.default_module.templates[ template_key ] = template
        endIf

        # Instantiate the template
        local template_args = TemplateArgs( t )
        forEach (element in named_elements)
          template_args.add( TokenList( element.t, Token[][element.t.cloned(TokenType.IDENTIFIER, element.name)] ) )
          template_args.add( TokenList( element.t, element.of_type.name_tokens.cloned ) )
        endForEach

        type = Type( t, template, tuple_type_name, template_args, &is_tuple )
        type.attributes.is_anonymous_tuple = is_anonymous
        return type
      endUse
      return null

  METHODS
    method init( t, name, attributes:Int64, &unlisted )
      init( t, Program.current_module, name, attributes, &=unlisted )

    method init( t, module_context, name, attributes:Int64, &unlisted )
      if (not unlisted) module_context.types[ name ] = this
      this.attributes = Attributes( t, attributes )

    method init( existing:Type )
      prior.init( existing )
      name   = existing.name
      c_name = existing.@c_name
      attributes = existing.attributes
      module_context = existing.module_context
      if (existing.categories) categories = existing.categories.cloned

    method add( m:GlobalMethod )
      local existing = global_methods[m.signature]
      if (existing and existing.type_context is m.type_context)
        throw m.t.error( "Global method $ is already defined."(m.dev_signature) )
      endIf
      global_methods[ m.signature ] = m

    method add( m:Method )
      local existing = methods[m.signature]
      if (existing and existing.type_context is m.type_context)
        throw m.t.error( "Method $ is already defined."(m.dev_signature) )
      endIf
      methods[ m.signature ] = m

    method add_base_type_id( id:Int32 )
      if (not base_type_ids.contains(id)) base_type_ids.add( id )

    method add_property( p:Property )
      p.type_context = this

      if (not p.type)
        if (p.initial_value)
          p.type = p.initial_value.type
          if (not p.type)
            throw p.t.error(
              ''Cannot implicitly determine type of property "$" from initial value. ''(p.name) +
              ''Add an explicit ': Type' at the end of the line.''
            )
          endIf
        else
          throw p.t.error( ''Property "$" must have an initial assignment or a declared ': Type'.''(p.name) )
        endIf
      endIf

      p.type.[ ensure_definition, organize_properties ]

      if (this.is_compound and p.type.is_compound)
        if (p.type.contains_embedded_compound(this))
          throw p.t.error(
              "Circular compound definition - $ directly or indirectly contains an embedded $, so $ cannot contain a $."...
              (p.type,this,this,p.type)
          )
        endIf
      endIf

      if (p.type.is_reference or (p.type.is_compound and p.type.contains_embedded_reference))
        this.attributes.contains_reference = true
      endIf

      local existing_p = this.properties[p.name]
      if (existing_p and existing_p.type_context is this)
        throw p.t.error( ''Type $ already defines a property called "$".''(this,p.name) )
      endIf
      this.properties[ p.name ] = p

    method add_extended_property( p:Property )
      local base_p = properties[p.name]
      if (base_p)
        if (not p.type.instance_of(base_p.type))
          throw p.t.error( "Redeclared property '$' has type $ which is not instanceOf inherited type $."...
            (p.name,p.type,base_p.type) )
        endIf
      endIf
      properties[p.name] = p

    method cloned->this
      return this

    method collect_base_type_ids
      if (base_type_ids.count) return

      if (base_class)
        base_class.collect_base_type_ids
        add_base_type_id( base_class.id )
        add_base_type_id( forEach in base_class.base_type_ids )
      endIf

      if (aspects)
        forEach (a in aspects)
          a.collect_base_type_ids
          add_base_type_id( a.id )
        endForEach
      endIf

    method collect_compounds_and_primitives( type_list:Type[] )
      if (attributes.is_visiting or attributes.is_collected) return
      attributes.is_visiting = true
      (forEach in global_properties).type.collect_compounds_and_primitives( type_list )
      (forEach in properties).type.collect_compounds_and_primitives( type_list )
      if (this.is_compound or this.is_primitive)
        type_list.add( this )
        attributes.is_collected = true
      endIf
      attributes.is_visiting = false

    method collect_reference_types( type_list:Type[] )
      if (attributes.is_visiting or attributes.is_collected) return
      attributes.is_visiting = true  # use as 'is_collected' flag; will be reset externally
      (forEach in global_properties).type.collect_reference_types( type_list )
      (forEach in properties).type.collect_reference_types( type_list )
      if (this.is_reference)
        type_list.add( this )
        attributes.is_collected = true
      endIf
      attributes.is_visiting = false

    method collect_methods( m_name:String, list:Procedure[], &require_global )
      ensure_definition
      organize_methods

      forEach (m in global_methods)
        if (m.name == m_name or m.base_name == m_name) list.add( m )
      endForEach

      if (require_global and base_class and m_name.begins_with("operator"))
        base_class.collect_methods( m_name, list, &require_global )
      endIf

      if (not require_global)
        forEach (m in methods)
          if (m.name == m_name or m.base_name == m_name) list.add( m )
        endForEach
      endIf

    method contains_embedded_compound( type:Type )->Logical
      forEach (p in properties)
        if (p.type is type) return true
        if (p.type.is_compound and p.type.contains_embedded_compound(type)) return true
      endForEach
      return false

    method contains_embedded_reference->Logical
      forEach (p in properties)
        if (p.type.is_reference) return true
        if (p.type.is_compound and p.type.contains_embedded_reference) return true
      endForEach
      return false

    method contains_reference->Logical
      return attributes.contains_reference

    method ensure_definition
      if (attributes.is_defined) return
      if (not type_template) type_template = module_context.must_find_template( t, name+"<<0>>", name )
      type_template.instantiate( this, type_args )

    method description->String
      return "$" (%name)

    method has_global_method_named( name:String )->Logical
      forEach (m in global_methods)
        if (m.name == name) return true
      endForEach
      return false

    method has_method_named( name:String )->Logical
      forEach (m in methods)
        if (m.name == name) return true
      endForEach
      return false

    method incorporate_global( aspect_m:GlobalMethod, &is_augment )
      aspect_m .= cloned
      AspectMethodPatcher.patch( this, aspect_m )

      local existing_m = global_methods[ aspect_m.signature ]
      if (existing_m)
        if (existing_m.return_type? xor aspect_m.return_type?)
          if (existing_m.return_type?)
            throw aspect_m.t.error( "Return type mismatch - existing global method $ does not return a value."...
                (existing_m.context_signature) )
          else
            throw aspect_m.t.error( "Return type mismatch - existing global method $ returns a value."...
                (existing_m.context_signature) )
          endIf
        endIf
        if (existing_m.return_type and existing_m.return_type is not aspect_m.return_type)
          throw aspect_m.t.error( "Return type mismatch - aspect method return type $ does not match existing return type $."...
          (aspect_m.return_type,existing_m.return_type) )
        endIf

        if (aspect_m.attributes.is_insert or aspect_m.attributes.is_append)
          forEach (aspect_p at i in aspect_m.parameters)
            local existing_p = existing_m.parameters[i]
            if (aspect_p.name != existing_p.name)
              throw aspect_m.t.error(
                "Parameter name mismatch - aspect parameter '$' must be named '$' as in the existing method."...
                (aspect_p.name,existing_p.name)
              )
            endIf
          endForEach
        endIf

      endIf

      if (existing_m)
        existing_m.attributes.flags |= aspect_m.attributes.flags
        if (aspect_m.attributes.is_insert)
          aspect_m.statements.add( forEach in existing_m.statements )
          existing_m.body = aspect_m.body
          existing_m.statements = aspect_m.statements
        elseIf (aspect_m.attributes.is_append)
          existing_m.statements.add( forEach in aspect_m.statements )
        elseIf (existing_m.type_context is not this or is_augment)
          global_methods[ aspect_m.signature ] = aspect_m
        endIf
      else
        global_methods[ aspect_m.signature ] = aspect_m
      endIf

    method incorporate( aspect_m:Method, &is_augment )
      aspect_m .= cloned
      AspectMethodPatcher.patch( this, aspect_m )

      local existing_m = methods[ aspect_m.signature ]
      if (existing_m)
        if (existing_m.return_type? xor aspect_m.return_type?)
          if (existing_m.return_type?)
            throw aspect_m.t.error( "Return type mismatch - existing method $ does not return a value."...
                (existing_m.context_signature) )
          else
            throw aspect_m.t.error( "Return type mismatch - existing method $ returns a value."...
                (existing_m.context_signature) )
          endIf
        endIf
        if (existing_m.return_type and existing_m.return_type is not aspect_m.return_type)
          throw aspect_m.t.error( "Return type mismatch - aspect method return type $ does not match existing return type $."...
          (aspect_m.return_type,existing_m.return_type) )
        endIf

        if (aspect_m.attributes.is_insert or aspect_m.attributes.is_append)
          forEach (aspect_p at i in aspect_m.parameters)
            local existing_p = existing_m.parameters[i]
            if (aspect_p.name != existing_p.name)
              throw aspect_m.t.error(
                "Parameter name mismatch - aspect parameter '$' must be named '$' as in the existing method."...
                (aspect_p.name,existing_p.name)
              )
            endIf
          endForEach
        endIf

      endIf

      if (existing_m)
        if (aspect_m.attributes.is_insert)
          aspect_m.statements.add( forEach in existing_m.statements )
          existing_m.body = aspect_m.body
          existing_m.statements = aspect_m.statements
        elseIf (aspect_m.attributes.is_append)
          existing_m.statements.add( forEach in aspect_m.statements )
        elseIf (existing_m.type_context is not this or is_augment)
          methods[ aspect_m.signature ] = aspect_m
        endIf
      else
        methods[ aspect_m.signature ] = aspect_m
      endIf

    method instance_of( ancestor_type:Type )->Logical
      if (ancestor_type is Program.type_Object and this.is_reference) return true

      if (ancestor_type.is_aspect)
        local type = this
        while (type)
          if (type.aspects)
            if ((forEach in type.aspects) is ancestor_type) return true
          endIf
          type .= base_class
        endWhile
        return false
      else
        local type = this
        while (type)
          if (type is ancestor_type) return true

          type .= base_class
        endWhile
        return false
      endIf

    method is_aspect->Logical
      return attributes.is_aspect

    method is_compatible_tuple( other_type:Type )->Logical
      contingent
        local params1 = this.m_primary_constructor.parameters
        local params2 = other_type.m_primary_constructor.parameters
        necessary (params1.count == params2.count)
        forEach (param at i in params1)
          necessary (param.type is params2[i].type)
        endForEach
        return true
      unsatisfied
        return false
      endContingent

    method is_compound->Logical
      return attributes.is_compound

    method is_enum->Logical
      return attributes.is_enum

    method is_object->Logical
      return attributes.is_object

    method is_primitive->Logical
      return attributes.is_primitive

    method is_reference->Logical
      return attributes.is_reference

    method is_value_type->Logical
      return attributes.is_primitive or attributes.is_compound

    method name_tokens->Token[]
      if (@name_tokens) return @name_tokens

      localize scoped_name

      use scanner = ObjectPool<<Scanner>>
        scanner.init( scoped_name, scoped_name )
        @name_tokens = scanner.tokenize
        @name_tokens.remove_last  # EOL
        return @name_tokens
      endUse

    method organize
      ensure_definition
      organize_type
      organize_properties
      organize_methods

    method organize_type
      if (is_type_organized) return
      is_type_organized = true

      TypeOrganizer( module_context ).visit( this, class_def )

      if (module_context.attributes.is_essential or module_context.attributes.is_api) attributes.is_essential = true
      if (module_context.attributes.is_api) attributes.is_api = true

      if (is_enum)
        if (base_class or aspects)
          throw t.error( "Rogue does not currently support enums with base types." )
        endIf
      endIf

      # Categorize base types
      if (base_class)
        base_class.ensure_definition
        base_class.organize_type
        if (base_class.contains_reference) attributes.contains_reference = true
        base_class.extended_types.add( this )
      elseIf (this.is_object and this is not Program.type_Object)
        base_class = Program.type_Object
        base_class.ensure_definition
        base_class.organize_type
        base_class.extended_types.add( this )
      endIf

      if (aspects)
        (forEach in aspects).[ensure_definition, organize_type]

        # Build flat list of incorporated aspects. Each aspect will already have
        # a flat list of its own base aspects.
        use aspect_list = WorkList<<Type>>
          forEach (incorporated_aspect in aspects)
            if (incorporated_aspect.aspects)
              aspect_list.add( incorporated_aspect.aspects )
            endIf
            aspect_list.add( incorporated_aspect )
          endForEach
          aspects.clear
          aspects.add( aspect_list )
        endUse

        (forEach in aspects).extended_types.add( this )
      endIf

      # Check attributes
      if (attributes.is_singleton)
        if (is_aspect)    throw t.error( "Aspects cannot have singletons." )
        if (is_compound)  throw t.error( "Compounds cannot have singletons." )
        if (is_primitive) throw t.error( "Primitives cannot have singletons." )
        attributes.is_anchored = true # any SetSingleton command will disprove this
      endIf

    method organize_properties
      if (properties_organized) return
      properties_organized = true

      organize_type

      PropertyOrganizer( module_context ).visit( this, class_def )

      # Inherit properties
      if (base_class or aspects)
        use my_properties = WorkList<<Property>>
          my_properties.add( forEach in properties )
          properties.clear

          if (base_class)
            base_class.[ ensure_definition, organize_properties ]
            if (base_class.contains_reference) attributes.contains_reference = true

            forEach (p in base_class.properties)
              properties[p.name] = p
            endForEach

            forEach (p in base_class.native_properties step -1)
              native_properties.insert( p )
            endForEach
          endIf

          if (aspects)
            forEach (incorporated_aspect in aspects)
              incorporated_aspect.[ ensure_definition, organize_properties ]
              if (incorporated_aspect.contains_reference) attributes.contains_reference = true

              forEach (p in incorporated_aspect.native_properties step -1)
                native_properties.insert( p )
              endForEach

              forEach (p in incorporated_aspect.properties)
                add_extended_property( p.cloned.[type_context=this] )
              endForEach
            endForEach
          endIf

          forEach (p in my_properties)
            add_extended_property( p )
          endForEach

        endUse
      endIf

      if (states.count)
        if (properties.contains("state"))
          local p = properties//state
          throw p.t.error( "Because this class contains STATES it cannot have a property named 'state'." )
        else
          local t = states.first.t
          properties//state = Property( t, "state", LiteralInt32(t,-1), Program.type_Int32 ).[ type_context=this ]
        endIf
      endIf

      if (this.instance_of(Program.type_ListType))
        local p_element_type = properties["element_type"]
        assert p_element_type
        if (p_element_type.type.is_reference)
          attributes.is_reference_list = true
          attributes.contains_reference = true
        endIf
      endIf

    method organize_methods
      if (methods_organizing) return
      methods_organizing = true
      organize_properties

      use organizer = ObjectPool<<MethodOrganizer>>
        temporarily organizer.this_module = module_context
          organizer.visit( this, class_def )
        endTemporarily
      endUse

      # Organize base types
      if (base_class) base_class.organize_methods
      if (aspects)
        (forEach in aspects).organize_methods
      endIf

      # Add init_class() for global property initialization
      block
        local m = global_methods["init_class()"]
        if (not m)
          m = GlobalMethod( t, this, "init_class" )
          m.organize
          global_methods[ m.signature ] = m
        endIf
        m_init_class = m

        if (global_properties.count)
          m.attributes.is_essential = true  # init_class()
          use my_properties = WorkList<<Property>>
            my_properties.add( forEach in global_properties )

            forEach (p in my_properties step -1)
              if (not p.initial_value) p.initial_value = p.type.cmd_default_value( p.t )
              m.statements.insert(
                Assign(
                  p.t,
                  ContextAccess(p.t,TypeContext(p.t,this),p.name),
                  p.initial_value
                )
              )
            endForEach
          endUse
        endIf
      endBlock

      # Add init_object() methods for new initial property assignments
      if (is_object)
        local m = methods["init_object()"]
        if (not m)
          m = Method( t, this, "init_object" )
          m.organize
          methods[ m.signature ] = m
        endIf

        use my_properties = WorkList<<Property>>
          forEach (p in properties)
            if (p.type_context is this) my_properties.add( p )
          endForEach

          forEach (p in my_properties step -1)
            if (p.initial_value)
              local initial_value = p.initial_value.cloned
              AspectMethodPatcher.patch( this, initial_value )  # fix 'this' type
              m.statements.insert( Assign(p.t,Access(p.t,p.name),initial_value) )
            endIf
          endForEach
          if (base_class)
            local prior_m = base_class.methods[ "init_object()" ]
            assert prior_m
            m.statements.insert( CallThisStaticMethod(m.t,prior_m,Args(m.t)) )
          endIf
        endUse
      endIf

      inherit_methods

      if (not is_aspect)
        # module_name()->String
        local m = Method( t, this, "module_name" )
        m.return_type = Program.type_String
        m.statements.add( Return(t,LiteralString(t,"$"(module_context))) )
        m.organize
        methods[ m.signature ] = m

        # type_name()->String
        m = Method( t, this, "type_name" )
        m.return_type = Program.type_String
        m.statements.add( Return(t,LiteralString(t,"$"(name))) )
        m.organize
        methods[ m.signature ] = m

        # type_info()->TypeInfo
        local gm = GlobalMethod( t, this, "type_info" )
        gm.return_type = Program.default_module.must_find_type( t, "TypeInfo" )
        gm.statements.add( Return(t,GetTypeInfo(t,this)) )
        gm.organize
        global_methods[ gm.signature ] = gm

      endIf

      # Add state methods
      if (states.count)
        use state_methods = WorkList<<StateMethod>>
          forEach (state in states)
            state_methods.add( StateMethod(state,forEach in state.methods) )
          endForEach

          forEach (sm in state_methods)
            sm.m.module_context = module_context
            sm.m.type_context = this
            sm.m.organize( &skip_add_to_type )
          endForEach

          local has_enter = false
          local has_leave = false
          forEach (sm in state_methods)
            if (sm.m.signature == "ENTER()")
              has_enter = true
              escapeForEach
            endIf
          endForEach
          forEach (sm in state_methods)
            if (sm.m.signature == "LEAVE()")
              has_leave = true
              escapeForEach
            endIf
          endForEach

          if (has_enter)
            block m = methods["ENTER()"]
              if (not m)
                m = Method( t, this, "ENTER" )
                m.organize
                methods[ m.signature ] = m
              endIf
            endBlock
          endIf

          if (has_leave)
            block m = methods["LEAVE()"]
              if (not m)
                m = Method( t, this, "LEAVE" )
                m.organize
                methods[ m.signature ] = m
              endIf
            endBlock
          endIf

          block m = methods["set_state(Rogue::Int32)"]
            if (not m)
              m = Method( t, this, "set_state" )
              m.parameters.add( Local(t,"new_state",null,Program.type_Int32) )

              local cmd_else : If
              if (has_leave)
                cmd_else = If( t, null, Statements(t,Access(t,"LEAVE")), null )
              endIf

              m.statements.add(
                If( t,
                  CompareEQ(t,Access(t,"new_state"),LiteralInt32(t,-1)),
                  Statements(t,Assign(t,Access(t,"new_state"),LiteralInt32(t,0))),
                  cmd_else
                )
              )

              m.statements.add( Assign(t,DirectAccess(t,"state"),Access(t,"new_state")) )
              if (has_enter) m.statements.add( Access(t,"ENTER") )
              m.organize
              methods[ m.signature ] = m
            endIf
          endBlock

          while (not state_methods.is_empty)
            use variations = WorkList<<StateMethod,Variations>>
              local state_m = state_methods.remove_last
              variations.add( state_m )
              local existing_m = methods[state_m.m.signature]
              forEach (sm at i in state_methods step -1)
                if (sm.m.signature == state_m.m.signature)
                  state_methods.remove_at( i )
                  variations.add( sm )
                endIf
              endForEach

              variations.reverse

              (forEach in variations).m.generate_body

              # Make sure all variations have the same parameters
              forEach (sm in variations from 1)
                contingent
                  necessary (sm.m.parameters.count == state_m.m.parameters.count)
                  forEach (param at i in sm.m.parameters)
                    local param2 = state_m.m.parameters[i]
                    necessary (param.name == param2.name)
                    necessary (param.type is param2.type)
                  endForEach
                  necessary (sm.m.return_type is state_m.m.return_type)
                unsatisfied
                  throw sm.m.t.error( "Each state's implementation of $() must have consistent parameters and return type."(sm.m.name) )
                endContingent
              endForEach

              # All states must define each method or else a base definition must exist outside of STATES.
              if (not existing_m and variations.count < states.count)
                local m = state_m.m
                throw m.t.error( "Definition of $() missing for some states. Either all states must define $() or a general definition of $() must exist outside of the STATES section." (m.name,m.name,m.name) )
              endIf

              local cmd_case_others : Cmd
              if (existing_m)
                if (existing_m.type_context is this)
                  cmd_case_others = existing_m.statements
                else
                  # Call the prior implementation as the default
                  cmd_case_others = Statements(existing_m.t)
                  local args = Args(existing_m.t)
                  forEach (param in existing_m.parameters)
                    args.add( Access(param.t,param.name) )
                  endForEach
                  cmd_case_others = Statements(existing_m.t)
                  local cmd_call = CallThisStaticMethod( existing_m.t, existing_m, args ) : Cmd
                  if (existing_m.return_type) cmd_call = Return( cmd_call.t, cmd_call )
                  cmd_case_others.add( cmd_call )
                  existing_m = null
                endIf
              else
                cmd_case_others = variations.remove_last.m.statements
              endIf

              # Merge method statements from various states
              local t = which{ existing_m:existing_m.t || state_m.m.t }
              local cmd_cases = WhichCases(t)
              local cmd_which = Which( t, Access(t,"state"), cmd_cases, cmd_case_others )
              forEach (sm in variations)
                local m = sm.m
                local args = Args(m.t)
                args.add( Access(m.t,sm.state_def.name) )
                cmd_cases.add( WhichCase(m.t,args,m.statements) )
              endForEach

              if (not existing_m)
                existing_m = state_m.m
                methods[existing_m.signature] = existing_m
              endIf
              existing_m.body.statements = Statements(t,cmd_which)
              existing_m.statements = existing_m.body.statements
            endUse

          endWhile
        endUse
      endIf

      # Compounds get:
      # - to->String and description->String. description() calls to->String by default.
      # - operator==
      if (is_compound)
        block m = methods["description()"]
          if (not m)
            m = Method( t, this, "description" )
            m.return_type = Program.type_String
            m.statements.add( Return(t,Access(t,"to<<Rogue::String>>")) )
            m.organize
            methods[ m.signature ] = m
          endIf
        endBlock

        block m = methods["to<<Rogue::Value>>()"]
          if (not m)
            m = Method( t, this, "to<<Rogue::Value>>" )
            m.return_type = Program.type_String
            m.statements.add( Return(t,TypeAccess(t,Program.type_Value,Args(t,Access(t,"to<<Rogue::Object>>")))) )
            m.organize
            methods[ m.signature ] = m
          endIf
        endBlock

        if (not is_enum)
          # Enums get different versions of to->String/to->Object and operator==()
          block m = methods["to<<Rogue::Object>>()"]
            if (not m)
              local boxed_type = Type( t, "Boxed", this )
              m = Method( t, this, "to<<Rogue::Object>>" )
              m.return_type = boxed_type
              m.statements.add( Return(t,TypeAccess(t,boxed_type,Args(t,This(t,this)))) )
              m.organize
              methods[ m.signature ] = m
            endIf
          endBlock

          block m = methods["to<<Rogue::String>>()"]
            if (not m)
              m = Method( t, this, "to<<Rogue::String>>" )
              m.return_type = Program.type_String
              m.statements.add( Return(t,LiteralString(t,name)) )
              m.organize
              methods[ m.signature ] = m
            endIf
          endBlock

          block m = methods["operator==($::$)"(module_context,name)]
            if (not m)
              m = Method( t, this, "operator==" )
              m.parameters.add( Local(t,"other",null,this) )
              m.return_type = Program.type_Logical
              m.statements.add( Return(t,
                  NativeExpression( t, "0 == memcmp(&$this,&$other,sizeof($<<this>>))", Program.type_Logical )
              ) )
              m.organize
              methods[ m.signature ] = m
            endIf
          endBlock

        endIf
      endIf

      # Enums
      if (is_enum)
        # create(Int32) constructor
        block
          local m = GlobalMethod( t, this, "create" )
          m.parameters.add( Local(t,"value",Program.type_Int32) )
          m.return_type = this
          m.statements.add( Return(t, CreateCompound(t,this)) )
          m.attributes.is_primary = true
          m.organize
          global_methods[ m.signature ] = m
        endBlock

        # create(String) constructor
        block
          local m = GlobalMethod( t, this, "create" )
          m.parameters.add( Local(t,"name",Program.type_String) )
          m.return_type = this
          m.statements.add(
            ForEach( t,
              ForEachInControl( t, "category", null,
                ForEachCollection(t,null,Access(t,"categories"),null,null) ),
              Statements( t,
                If( t, CompareEQ(t,Access(t,"name"),Access(t,"category")),
                  Statements( t, Return(t,Access(t,"category")) ), null
                )
              )
            )
          )
          m.statements.add( Return(t,TypeAccess(t,this,Args(t,LiteralInt32(t,0)))) )
          m.organize
          global_methods[ m.signature ] = m
        endBlock

        # operator?()->Logical
        block
          local m = methods[ "operator?()" ]
          if (not m or m.type_context is not this)
            m = Method( t, this, "operator?" )
            m.return_type = Program.type_Logical
            m.statements.add( Return(t,Logicalize(t,Access(t,"value"))) )
            m.organize
            methods[ m.signature ] = m
          endIf
        endBlock

        # name()->String
        block
          local m = Method( t, this, "name" )
          m.return_type = Program.type_String

          local cmd_cases = WhichCases(t)
          local cmd_which = Which( t, Access(t,"value"), cmd_cases, Statements(t) )
          forEach (category in categories)
            local t = category.t
            local args = Args(t)
            args.add( EnumValue(t,this,category.name) )
            cmd_cases.add( WhichCase(t,args,Statements(t,Return(t,LiteralString(t,category.name)))) )
          endForEach
          cmd_which.statements.add( Return(t,FormattedString(t,name+"($)",Args(t,Access(t,"value")))) )
          m.statements.add( cmd_which )

          m.organize
          methods[ m.signature ] = m
        endBlock

        # operator==(EnumType)->Logical
        block
          local m = methods[ "operator==($)"(scoped_name) ]
          if (not m)
            m = Method( t, this, "operator==" )
            m.parameters.add( Local(t,"other",this) )
            m.return_type = Program.type_Logical
            m.statements.add( Return(t,CompareEQ(t,Access(t,"value"),ContextAccess(t,Access(t,"other"),"value"))) )
            m.organize
            methods[ m.signature ] = m
          endIf
        endBlock

        # to->Int32
        block
          local m = methods[ "to<<Rogue::Int32>>()" ]
          if (not m or m.type_context is not this)
            m = Method( t, this, "to<<Rogue::Int32>>" )
            m.return_type = Program.type_Int32
            m.statements.add( Return(t,Access(t,"value")) )
            m.organize
            methods[ m.signature ] = m
          endIf
        endBlock

        # to->String
        block
          local m = methods[ "to<<Rogue::String>>()" ]
          if (not m or m.type_context is not this)
            m = Method( t, this, "to<<Rogue::String>>" )
            m.return_type = Program.type_String

            local cmd_cases = WhichCases(t)
            local cmd_which = Which( t, Access(t,"value"), cmd_cases, Statements(t) )
            forEach (category in categories)
              local t = category.t
              local args = Args(t)
              args.add( EnumValue(t,this,category.name) )
              cmd_cases.add( WhichCase(t,args,Statements(t,Return(t,LiteralString(t,category.name)))) )
            endForEach
            cmd_which.statements.add( Return(t,FormattedString(t,name+"($)",Args(t,Access(t,"value")))) )
            m.statements.add( cmd_which )

            m.organize
            methods[ m.signature ] = m
          endIf
        endBlock

        block m = methods["to<<Rogue::Object>>()"]
          if (not m)
            m = Method( t, this, "to<<Rogue::Object>>" )
            m.return_type = Program.type_Object
            m.statements.add( Return(t,Access(t,"to<<Rogue::String>>")) )
            m.organize
            methods[ m.signature ] = m
          endIf
        endBlock

        # Create a getter method with hard-coded results for each property of each category
        block
          forEach (p at i in class_def->(as Class).constructor_properties)
            if (not p.type) throw p.t.error( "Enum property '$' must specify a ':Type'."(p.name) )
            local m = Method( t, this, p.name )
            m.return_type = p.type

            local cmd_cases = WhichCases(t)
            local cmd_which = Which( t, Access(t,"value"), cmd_cases, Statements(t) )
            forEach (category in categories)
              if (category.args[i])
                local args = Args(category.t)
                args.add( EnumValue(category.t,this,category.name) )
                cmd_cases.add( WhichCase(category.t,args,Statements(category.t,Return(category.t,category.args[i]))) )
              endIf
            endForEach
            if (p.initial_value)
              cmd_which.statements.add( Return(p.t,p.initial_value) )
            else
              cmd_which.statements.add( Return(p.t,p.type.cmd_default_value(p.t)) )
            endIf
            m.statements.add( cmd_which )

            m.organize
            methods[ m.signature ] = m
          endForEach
        endBlock

        if (attributes.bitflags)
          # Each CATEGORY gets .is_category()->Logical and .set_is_category(setting:Logical) methods.
          forEach (category in categories)
            # .is_category()->Logical
            block
              local m_name = "is_" + category.name.to_lowercase
              local m = methods[ "$()"(m_name) ]
              if (not m)
                m = Method( t, this, m_name )
                m.return_type = Program.type_Logical
                m.statements.add(
                  Return( t,
                    Logicalize( t,
                      BitwiseAnd( t, Access(t,"value"), EnumValue(t,this,category.name) )
                    )
                  )
                )
                m.organize
                methods[ m.signature ] = m
              endIf
            endBlock

            # .set_is_category(Logical)->Logical
            block
              local m_name = "set_is_" + category.name.to_lowercase
              local m = methods[ "$(Rogue::Logical)"(m_name) ]
              if (not m)
                m = Method( t, this, m_name )
                m.attributes.is_mutating = true
                m.parameters.add( Local(t,"setting",Program.type_Logical) )
                m.statements.add(
                  If( t, Access(t,"setting"),
                    Statements( t, BitwiseOrAndAssign(t, Access(t,"value"), EnumValue(t,this,category.name)) ),
                    If( t, null,
                      Statements( t, BitwiseAndAndAssign(t, Access(t,"value"), BitwiseNot(t,EnumValue(t,this,category.name))) ),
                      null )
                  )
                )
                m.organize
                methods[ m.signature ] = m
              endIf
            endBlock
          endForEach

          # operator&(EnumType)->EnumType
          block
            local m = methods[ "operator&($)"(scoped_name) ]
            if (not m)
              m = Method( t, this, "operator&" )
              m.parameters.add( Local(t,"flag",this) )
              m.return_type = this
              m.statements.add(
                Return( t,
                  TypeAccess( t, this,
                    Args( t,
                      BitwiseAnd( t, Access(t,"value"), ContextAccess(t,Access(t,"flag"),"value") )
                    )
                  )
                )
              )
              m.organize
              methods[ m.signature ] = m
            endIf
          endBlock

          # operator|(EnumType)->EnumType
          block
            local m = methods[ "operator|($)"(scoped_name) ]
            if (not m)
              m = Method( t, this, "operator|" )
              m.parameters.add( Local(t,"flag",this) )
              m.return_type = this
              m.statements.add(
                Return( t,
                  TypeAccess( t, this,
                    Args( t,
                      BitwiseOr( t, Access(t,"value"), ContextAccess(t,Access(t,"flag"),"value") )
                    )
                  )
                )
              )
              m.organize
              methods[ m.signature ] = m
            endIf
          endBlock

          # operator!()->EnumType
          block
            local m = methods[ "operator!()" ]
            if (not m)
              m = Method( t, this, "operator!" )
              m.return_type = this
              m.statements.add( Return(t,TypeAccess(t,this,Args(t,BitwiseNot(t,Access(t,"value"))))) )
              m.organize
              methods[ m.signature ] = m
            endIf
          endBlock

        endIf

      endIf

      block
        local m = methods["on_cleanup()"]
        if (m and m.return_type)
          throw m.t.error( "on_cleanup() cannot return a value." )
        endIf
      endBlock

      Transformer().visit_type( this )

      # Any [essential] routine makes class Routine [essential] as well
      if (this.name == "Routine")
        forEach (r in global_methods)
          if (r.attributes.is_essential or r.attributes.is_api)
            this.attributes.is_essential = true
            escapeForEach
          endIf
        endForEach
      endIf

      if (attributes.is_singleton)
        local m = methods["init()"]
        if (m) m.attributes.is_essential = true
      endIf

      if (attributes.is_api)
        (forEach in global_methods.values).attributes.is_essential = true
        (forEach in methods.values).attributes.is_essential = true
      endIf

      methods_organized = true

    method inherit_methods( &missing_only )
      # Inherit base class methods
      if (base_class)
        local has_init = false
        forEach (m in methods)
          if (m.name == "init")
            has_init = true
            escapeForEach
          endIf
        endForEach

        forEach (base_m in base_class.methods)
          local m = methods[ base_m.signature ]

          if (has_init and base_m.name == "init")
            if (m) m.overridden_method = base_m
            nextIteration
          endIf

          if (m)
            if (m.return_type? xor base_m.return_type?)
              if (m.return_type?)
                throw m.t.error( "Return type mismatch - overridden method $ does not return a value."(base_m.context_signature) )
              else
                throw m.t.error( "Return type mismatch - overridden method $ returns a value."(base_m.context_signature) )
              endIf
            endIf
            if (m.return_type and not m.return_type.instance_of(base_m.return_type))
              throw m.t.error( "Return type mismatch - override return type $ is not instanceOf overridden return type $."...
                (m.return_type,base_m.return_type) )
            endIf
            m.overridden_method = base_m
          else
            if (base_m.attributes.is_propagated)
              # 'ThisType' -> (actual type)
              add( base_m.propagated_to(this).[overridden_method=m] )
            else
              add( base_m )
            endIf
          endIf
        endForEach
      endIf

      local this_is_abstract = this.attributes.is_abstract

      # Incorporate augment global methods
      if (aspects)
        # Merge method templates
        forEach (incorporated_aspect in aspects)
          forEach (entry in incorporated_aspect.global_method_templates.entries)
            global_method_templates.add( entry.key, forEach in entry.value )
          endForEach
          forEach (entry in incorporated_aspect.method_templates.entries)
            method_templates.add( entry.key, forEach in entry.value )
          endForEach
        endForEach

        # Incorporate non-insert, non-append methods first
        forEach (incorporated_aspect in aspects)
          if (incorporated_aspect.attributes.is_augment)
            forEach (aspect_m in incorporated_aspect.global_methods)
              if (not (aspect_m.attributes.is_insert or aspect_m.attributes.is_append))
                if (not missing_only or not global_methods.contains(aspect_m.signature))
                  if (this_is_abstract or not aspect_m.attributes.is_abstract)
                    incorporate_global( aspect_m, &is_augment )
                  endIf
                endIf
              endIf
            endForEach
          endIf
        endForEach

        # Incorporate [insert] and [append] methods
        forEach (incorporated_aspect in aspects)
          if (incorporated_aspect.attributes.is_augment)
            forEach (aspect_m in incorporated_aspect.global_methods)
              if (aspect_m.attributes.is_insert or aspect_m.attributes.is_append)
                if (not missing_only or not global_methods.contains(aspect_m.signature))
                  if (this_is_abstract or not aspect_m.attributes.is_abstract)
                    incorporate_global( aspect_m )
                  endIf
                endIf
              endIf
            endForEach
          endIf
        endForEach

        # Create an error if no implementation of an abstract aspect method has been supplied.
        if (not this_is_abstract)
          forEach (incorporated_aspect in aspects)
            forEach (aspect_m in incorporated_aspect.global_methods)
              if (aspect_m.attributes.is_abstract and not global_methods.contains(aspect_m.signature))
                throw aspect_m.t.error(
                "Illegal abstract global method $ in class $." (aspect_m,this) )
              endIf
            endForEach
          endForEach
        endIf
      endIf

      # Incorporate aspect/augment object methods
      if (aspects)
        # Incorporate non-insert, non-append methods first
        forEach (incorporated_aspect in aspects)
          forEach (aspect_m in incorporated_aspect.methods)
            if (not (aspect_m.attributes.is_insert or aspect_m.attributes.is_append))
              if (not missing_only or not methods.contains(aspect_m.signature))
                if (this_is_abstract or not aspect_m.attributes.is_abstract)
                  incorporate( aspect_m, &is_augment=incorporated_aspect.attributes.is_augment )
                endIf
              endIf
            endIf
          endForEach
        endForEach

        # Incorporate [insert] and [append] methods
        forEach (incorporated_aspect in aspects)
          forEach (aspect_m in incorporated_aspect.methods)
            if (aspect_m.attributes.is_insert or aspect_m.attributes.is_append)
              if (not missing_only or not methods.contains(aspect_m.signature))
                if (this_is_abstract or not aspect_m.attributes.is_abstract)
                  incorporate( aspect_m )
                endIf
              endIf
            endIf
          endForEach
        endForEach

        # Create an error if no implementation of an abstract aspect method has been supplied.
        if (not this_is_abstract)
          forEach (incorporated_aspect in aspects)
            forEach (aspect_m in incorporated_aspect.methods)
              if (aspect_m.attributes.is_abstract and not methods.contains(aspect_m.signature))
                throw aspect_m.t.error(
                  "Class $ must either be declared [abstract] or else supply a definition for abstract aspect method $." ...
                  (this,aspect_m) )
              endIf
            endForEach
          endForEach
        endIf

      endIf

      # Verify that every [override] method is indeed overriding a prior method.
      forEach (m in methods)
        if (m.attributes.is_override)
          if (not m.overridden_method)
            throw m.t.error( "Method $ does not override any prior definition. Check for signature type errors or remove the [override] attribute." )
          endIf
        endIf
      endForEach

      forEach (m in global_methods)
        if (m.attributes.is_override)
          throw m.t.error( "A global method cannot [override] a prior definition." )
        endIf
      endForEach

      # Any [abstract] methods require an [abstract] class.
      if (not this.attributes.is_abstract)
        forEach (m in methods)
          if (m.attributes.is_abstract)
            if (m.type_context is this)
              throw m.t.error( "Method $ can only be declared [abstract] in an [abstract] class."(m) )
            else
              throw m.t.error( "Inherited abstract method $.$ be overridden or class $ must be declared [abstract]."...
                               (m.type_context,m,this) )
            endIf
          endIf
        endForEach

        forEach (m in global_methods)
          if (m.attributes.is_abstract)
            throw m.t.error( "Global methods cannot be [abstract]." )
          endIf
        endForEach
      endIf

    method precision_index->Int32
      return 10 # Objects etc.

    method resolve
      if (is_resolved) return

      use resolver = ObjectPool<<Resolver>>
        temporarily resolver.this_module=module_context, resolver.this_procedure=null
          resolver.visit_type( this )
        endTemporarily
      endUse

    method scoped_name->String
      if (@scoped_name) return @scoped_name

      if (name.begins_with('(') or name.begins_with('[') or name.ends_with('?'))
        # Type names beginning with ( are (tuples) or (Functions)
        # Type names beginning with [ are [KeyType:ValueType] tables
        # Type names ending with ? are optional types
        # None of the above use an explicit scope.
        @scoped_name = name
      else
        use builder = StringBuilder.pool
          builder.print module_context.name
          builder.print "::"
          builder.print name
          @scoped_name = builder
        endUse
      endIf

      return @scoped_name

    method to->Character
      return Cmd.to_character(name)


    method to->Int32:  return name
    method to->Logical: return name?

    method to->String: return name

endClass

class StateMethod( state_def:StateDef, m:Method ) [compound]
  METHODS
    method to->String
      return "StateMethod($,$,$)"(%state_def,m,%m.body)
endClass

class BuiltInType : Type;

class TypeLogical : BuiltInType
  METHODS
    method init( t:Token )
      prior.init( t, "Logical", Attribute.PRIMITIVE )

    method precision_index->Int32
      return 0
endClass

class TypeByte : BuiltInType
  METHODS
    method init( t:Token )
      prior.init( t, "Byte", Attribute.PRIMITIVE )

    method precision_index->Int32
      return 1
endClass

class TypeCharacter : BuiltInType
  METHODS
    method init( t:Token )
      prior.init( t, "Character", Attribute.PRIMITIVE )

    method precision_index->Int32
      return 2
endClass

class TypeInt32 : BuiltInType
  METHODS
    method init( t:Token )
      prior.init( t, "Int32", Attribute.PRIMITIVE )

    method precision_index->Int32
      return 3
endClass

class TypeInt64 : BuiltInType
  METHODS
    method init( t:Token )
      prior.init( t, "Int64", Attribute.PRIMITIVE )

    method precision_index->Int32
      return 4
endClass

class TypeReal32 : BuiltInType
  METHODS
    method init( t:Token )
      prior.init( t, "Real32", Attribute.PRIMITIVE )

    method precision_index->Int32
      return 5
endClass

class TypeReal64 : BuiltInType
  METHODS
    method init( t:Token )
      prior.init( t, "Real64", Attribute.PRIMITIVE )

    method precision_index->Int32
      return 6
endClass

class TypeString : BuiltInType
  METHODS
    method init( t:Token )
      prior.init( t, "String", Attribute.OBJECT )
endClass
