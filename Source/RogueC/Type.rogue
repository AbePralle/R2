module Rogue

class Type : Cmd
  DEFINITIONS
    PRIMITIVE = 1
    OBJECT    = (1:<<:1)
    DEFINED   = (1:<<:2)

    ROGUE_ATTRIBUTE( is_primitive, Type.PRIMITIVE )
    ROGUE_ATTRIBUTE( is_object,    Type.OBJECT )
    ROGUE_ATTRIBUTE( is_defined,   Type.DEFINED )

  PROPERTIES
    module_context    : Module
    name              : String
    attributes        : Int32
    properties        = StringTable<<Property>>()
    native_properties = String[]
    native_header     = NativeCHeader[]
    native_code       = NativeCCode[]

  GLOBAL METHODS
    method create( t:Token, name:String )->Type
      local type = Program.current_module.find_type( name, &extended_search )
      if (type) return type

      type = Type( t, name, 0 )
      type.ensure_definition
      return type

  METHODS
    method init( t, name, attributes )
      module_context = Program.current_module
      module_context.types[ name ] = this

    method init( existing:Type )
      prior.init( existing )
      name   = existing.name
      c_name = existing.@c_name
      attributes = existing.attributes
      module_context = existing.module_context

    method cloned->this
      return this

    method ensure_definition
      if (is_defined) return
      local template = Program.templates[ "$<<0>>"(name) ]
      if (template)
        template.generate( null, this )
      else
        throw t.error( "Reference to undefined class '$'."(name) )
      endIf

    method description->String
      return "$" (%name)

    method is_reference->Logical
      return (attributes & OBJECT)?

    method to->Character
      return Cmd.to_character(name)

    method to->Int32:  return name
    method to->Logical: return name?
    method to->String: return name

endClass

class BuiltInType : Type;

class TypeLogical : BuiltInType
  METHODS
    method init( t:Token )
      prior.init( t, "Logical", Type.PRIMITIVE )
endClass

class TypeByte : BuiltInType
  METHODS
    method init( t:Token )
      prior.init( t, "Byte", Type.PRIMITIVE )
endClass

class TypeCharacter : BuiltInType
  METHODS
    method init( t:Token )
      prior.init( t, "Character", Type.PRIMITIVE )
endClass

class TypeInt32 : BuiltInType
  METHODS
    method init( t:Token )
      prior.init( t, "Int32", Type.PRIMITIVE )
endClass

class TypeInt64 : BuiltInType
  METHODS
    method init( t:Token )
      prior.init( t, "Int64", Type.PRIMITIVE )
endClass

class TypeReal32 : BuiltInType
  METHODS
    method init( t:Token )
      prior.init( t, "Real32", Type.PRIMITIVE )
endClass

class TypeReal64 : BuiltInType
  METHODS
    method init( t:Token )
      prior.init( t, "Real64", Type.PRIMITIVE )
endClass

class TypeString : BuiltInType
  METHODS
    method init( t:Token )
      prior.init( t, "String", Type.OBJECT )
endClass

