# Generated and updated by Froley. Custom changes will not be overwritten; customize as desired.
module Rogue

class InspectonVisitor : InspectionVisitor<<Logical>>
endClass

class InspectionVisitor<<$ReturnType>>
  METHODS
    method on( cmd:Cmd )->$ReturnType
      # Default per-node InspectionVisitor call sequence.
      #
      #   CALL                        OVERLOADABLE METHOD
      #   --------------------        ------------------------
      #   visit(cmd)->$ReturnType  -> on(cmd:CmdType)->$ReturnType
      #     enter(cmd) ->               on_enter(cmd:CmdType)
      enter( cmd )
      return $ReturnType.meta.default_value

    method on( cmd:CmdList )->Logical
      forEach (statement in cmd.list)
        local result = visit(statement)
        if (result?) return result
      endForEach
      return $ReturnType.meta.default_value

    method on_enter( cmd:Cmd )
      # This method is called from the default on(CmdType) before
      # children are visited.

    method visit( cmd:Cmd )->$ReturnType [propagated]
      if (cmd is null) return $ReturnType.meta.default_value
      return cmd.dispatch<<ThisType,$ReturnType>>( this )

    method enter( cmd:Cmd ) [propagated]
      cmd.dispatch_on_enter<<ThisType>>( this )

    method on( cmd:Access )->$ReturnType
      local result : $ReturnType
      result = visit(cmd.args)
      return result

    method on( cmd:AddAndAssignLocal )->$ReturnType
      local result : $ReturnType
      result = visit(cmd.info)
      if (result?) return result
      result = visit(cmd.operand)
      return result

    method on( cmd:Assign )->$ReturnType
      local result : $ReturnType
      result = visit(cmd.target)
      if (result?) return result
      result = visit(cmd.new_value)
      return result

    method on( cmd:Binary )->$ReturnType
      local result : $ReturnType
      result = visit(cmd.left)
      if (result?) return result
      result = visit(cmd.right)
      return result

    method on( cmd:CallMethod )->$ReturnType
      local result : $ReturnType
      result = visit(cmd.context)
      if (result?) return result
      result = visit(cmd.args)
      return result

    method on( cmd:CallProcedure )->$ReturnType
      local result : $ReturnType
      result = visit(cmd.args)
      return result

    method on( cmd:Catch )->$ReturnType
      local result : $ReturnType
      result = visit(cmd.exception_type)
      if (result?) return result
      result = visit(cmd.statements)
      return result

    method on( cmd:Class )->$ReturnType
      local result : $ReturnType
      result = visit(cmd.constructor_properties)
      if (result?) return result
      result = visit(cmd.base_types)
      if (result?) return result
      result = visit(cmd.attributes)
      if (result?) return result
      result = visit(cmd.sections)
      return result

    method on( cmd:Conditional )->$ReturnType
      local result : $ReturnType
      result = visit(cmd.condition)
      if (result?) return result
      result = visit(cmd.statements)
      return result

    method on( cmd:ContextAccess )->$ReturnType
      local result : $ReturnType
      result = visit(cmd.context)
      if (result?) return result
      result = visit(cmd.args)
      return result

    method on( cmd:ControlStructure )->$ReturnType
      local result : $ReturnType
      result = visit(cmd.initialization)
      if (result?) return result
      result = visit(cmd.statements)
      return result

    method on( cmd:ConvertToType )->$ReturnType
      local result : $ReturnType
      result = visit(cmd.operand)
      if (result?) return result
      result = visit(cmd.to_type)
      return result

    method on( cmd:CreateObjectAndSetLocal )->$ReturnType
      local result : $ReturnType
      result = visit(cmd.of_type)
      if (result?) return result
      result = visit(cmd.info)
      return result

    method on( cmd:DefineModule )->$ReturnType
      local result : $ReturnType
      result = visit(cmd.attributes)
      return result

    method on( cmd:Definition )->$ReturnType
      local result : $ReturnType
      result = visit(cmd.value)
      return result

    method on( cmd:ForEach )->$ReturnType
      local result : $ReturnType
      result = visit(cmd.condition)
      if (result?) return result
      result = visit(cmd.statements)
      return result

    method on( cmd:ForEachCollection )->$ReturnType
      local result : $ReturnType
      result = visit(cmd.data)
      if (result?) return result
      result = visit(cmd.starting_index)
      if (result?) return result
      result = visit(cmd.step_size)
      return result

    method on( cmd:ForEachControl )->$ReturnType
      local result : $ReturnType
      result = visit(cmd.optional_at)
      if (result?) return result
      result = visit(cmd.collection)
      return result

    method on( cmd:GetLocal )->$ReturnType
      local result : $ReturnType
      result = visit(cmd.info)
      return result

    method on( cmd:GetProperty )->$ReturnType
      local result : $ReturnType
      result = visit(cmd.context)
      if (result?) return result
      result = visit(cmd.info)
      return result

    method on( cmd:GetSingleton )->$ReturnType
      local result : $ReturnType
      result = visit(cmd.type)
      return result

    method on( cmd:GetThisProperty )->$ReturnType
      local result : $ReturnType
      result = visit(cmd.info)
      return result

    method on( cmd:If )->$ReturnType
      local result : $ReturnType
      result = visit(cmd.condition)
      if (result?) return result
      result = visit(cmd.statements)
      if (result?) return result
      result = visit(cmd.cmd_else)
      return result

    method on( cmd:IndexAccess )->$ReturnType
      local result : $ReturnType
      result = visit(cmd.context)
      if (result?) return result
      result = visit(cmd.index)
      return result

    method on( cmd:Iterator )->$ReturnType
      local result : $ReturnType
      result = visit(cmd.initialization)
      if (result?) return result
      result = visit(cmd.control)
      if (result?) return result
      result = visit(cmd.condition)
      if (result?) return result
      result = visit(cmd.statements)
      if (result?) return result
      result = visit(cmd.upkeep)
      return result

    method on( cmd:Local )->$ReturnType
      local result : $ReturnType
      result = visit(cmd.initial_value)
      if (result?) return result
      result = visit(cmd.type)
      return result

    method on( cmd:LocalDeclarations )->$ReturnType
      local result : $ReturnType
      result = visit(cmd.declarations)
      if (result?) return result
      result = visit(cmd.type)
      return result

    method on( cmd:ModuleQualifiedID )->$ReturnType
      local result : $ReturnType
      result = visit(cmd.context)
      return result

    method on( cmd:NativeExpression )->$ReturnType
      local result : $ReturnType
      result = visit(cmd.result_type)
      return result

    method on( cmd:OpAndAssign )->$ReturnType
      local result : $ReturnType
      result = visit(cmd.target)
      if (result?) return result
      result = visit(cmd.operand)
      return result

    method on( cmd:Print )->$ReturnType
      local result : $ReturnType
      result = visit(cmd.args)
      return result

    method on( cmd:PrintValue )->$ReturnType
      local result : $ReturnType
      result = visit(cmd.operand)
      return result

    method on( cmd:Println )->$ReturnType
      local result : $ReturnType
      result = visit(cmd.args)
      return result

    method on( cmd:Procedure )->$ReturnType
      local result : $ReturnType
      result = visit(cmd.parameters)
      if (result?) return result
      result = visit(cmd.return_type)
      if (result?) return result
      result = visit(cmd.attributes)
      if (result?) return result
      result = visit(cmd.body)
      return result

    method on( cmd:Property )->$ReturnType
      local result : $ReturnType
      result = visit(cmd.initial_value)
      if (result?) return result
      result = visit(cmd.type)
      return result

    method on( cmd:PropertyDeclarations )->$ReturnType
      local result : $ReturnType
      result = visit(cmd.declarations)
      if (result?) return result
      result = visit(cmd.type)
      if (result?) return result
      result = visit(cmd.attributes)
      return result

    method on( cmd:Return )->$ReturnType
      local result : $ReturnType
      result = visit(cmd.result)
      return result

    method on( cmd:SetLocal )->$ReturnType
      local result : $ReturnType
      result = visit(cmd.info)
      if (result?) return result
      result = visit(cmd.new_value)
      return result

    method on( cmd:SetProperty )->$ReturnType
      local result : $ReturnType
      result = visit(cmd.context)
      if (result?) return result
      result = visit(cmd.info)
      if (result?) return result
      result = visit(cmd.new_value)
      return result

    method on( cmd:SetThisProperty )->$ReturnType
      local result : $ReturnType
      result = visit(cmd.info)
      if (result?) return result
      result = visit(cmd.new_value)
      return result

    method on( cmd:Throw )->$ReturnType
      local result : $ReturnType
      result = visit(cmd.exception)
      return result

    method on( cmd:Try )->$ReturnType
      local result : $ReturnType
      result = visit(cmd.statements)
      if (result?) return result
      result = visit(cmd.catches)
      return result

    method on( cmd:TypeContext )->$ReturnType
      local result : $ReturnType
      result = visit(cmd.type)
      return result

    method on( cmd:Unary )->$ReturnType
      local result : $ReturnType
      result = visit(cmd.operand)
      return result

    method on( cmd:CreateObject )->$ReturnType
      local result : $ReturnType
      result = visit(cmd.of_type)
      if (result?) return result
      result = visit(cmd.args)
      return result

    method on( cmd:UsesModule )->$ReturnType
      local result : $ReturnType
      result = visit(cmd.path)
      if (result?) return result
      result = visit(cmd.attributes)
      return result

    method on( cmd:Convert )->$ReturnType
      local result : $ReturnType
      result = visit(cmd.operand)
      return result

    method on( cmd:Stepper )->$ReturnType
      local result : $ReturnType
      result = visit(cmd.operand)
      return result

    method on( cmd:Type )->$ReturnType
      local result : $ReturnType
      result = visit(cmd.type_args)
      return result

endClass
