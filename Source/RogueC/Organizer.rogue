module Rogue

class Organizer : Visitor
  PROPERTIES
    this_module    : Module
    this_type      : Type
    this_procedure : Procedure

    current_statements_rewriter : ListRewriter<<Cmd>>

  METHODS
    method init( this_module )

    method visit( this_type, class_def:Cmd )
      # Called when instantiating a template
      visit( class_def )

    method on( cmd:GlobalMethod )->Cmd
      cmd.module_context = this_module
      cmd.type_context = this_type
      cmd.organize
      cmd.type_context.global_methods[ cmd.signature ] = cmd
      return cmd

    method on( cmd:NativeCCode )->Cmd
      this_type.native_code.add( cmd )
      return null

    method on( cmd:NativeCHeader )->Cmd
      this_type.native_header.add( cmd )
      return null

    method on( cmd:PropertyDeclarations )->Cmd
      local type = cmd.type
      if (type)
        forEach (decl in cmd.declarations)
          local p = decl->(as Property)
          if (p)
            p.type = type
            collect( decl.t, p )
          else
            throw decl.t.error( "Native properties must be on individual lines." )
          endIf
        endForEach
      else
        forEach (decl in cmd.declarations)
          local p = decl->(as Property)
          if (p)
            collect( p.t, p )
          else
            local c_property = decl->(as NativeCProperty)
            if (c_property)
              this_type.native_properties.add( c_property.expression )
            endIf
          endIf
        endForEach
      endIf
      return null

    method collect( t:Token, p:Property )
      assert this_type

      if (not p.type)
        if (p.initial_value)
          p.type = p.initial_value.type
          if (not p.type)
            throw p.t.error(
              ''Cannot implicitly determine type of property "$" from initial value. ''(p.name) +
              ''Add an explicit ': Type' at the end of the line.''
            )
          endIf
        else
          throw p.t.error( ''Property "$" must have an initial assignment or a declared ': Type'.''(p.name) )
        endIf
      endIf

      visit( p )
      if (this_type.properties.contains(p.name))
        throw t.error( ''Type $ already defines a property named "$".''(this_type,p.name) )
      endIf
      this_type.properties[ p.name ] = p

endClass
