module Rogue

class Attribute
  DEFINITIONS
    GENERATED        = 1
    PRIMITIVE        = (1:<<:1)
    COMPOUND         = (1:<<:2)
    OBJECT           = (1:<<:3)
    ASPECT           = (1:<<:4)
    EXPORT           = (1:<<:5)
    ESSENTIAL        = (1:<<:6)
    SINGLETON        = (1:<<:7)
    DEFINED          = (1:<<:8)
    ORGANIZED        = (1:<<:9)
    RESOLVED         = (1:<<:10)
    ANCHORED         = (1:<<:11)  # holds a reference that has been ref-counted elsewhere in the stack
    METHOD           = (1:<<:12) # object method (not global method or routine)
    HAS_RETURN       = (1:<<:13)
    VISITING         = (1:<<:14)
    REQUIRES_CLEANUP = (1:<<:15)
    OVERRIDDEN       = (1:<<:16)
    DYNAMIC_DISPATCH = (1:<<:17)
endClass

class Attributes : CmdList
  ROGUE_ATTRIBUTE( is_generated,     Attribute.GENERATED )
  ROGUE_ATTRIBUTE( is_primitive,     Attribute.PRIMITIVE )
  ROGUE_ATTRIBUTE( is_compound,      Attribute.COMPOUND )
  ROGUE_ATTRIBUTE( is_object,        Attribute.OBJECT )
  ROGUE_ATTRIBUTE( is_aspect,        Attribute.ASPECT )
  ROGUE_ATTRIBUTE( is_exported,      Attribute.EXPORT )
  ROGUE_ATTRIBUTE( is_essential,     Attribute.ESSENTIAL )
  ROGUE_ATTRIBUTE( is_singleton,     Attribute.SINGLETON )
  ROGUE_ATTRIBUTE( is_defined,       Attribute.DEFINED )
  ROGUE_ATTRIBUTE( is_organized,     Attribute.ORGANIZED )
  ROGUE_ATTRIBUTE( is_resolved,      Attribute.RESOLVED )
  ROGUE_ATTRIBUTE( is_anchored,      Attribute.ANCHORED )
  ROGUE_ATTRIBUTE( is_method,        Attribute.METHOD )
  ROGUE_ATTRIBUTE( has_return,       Attribute.HAS_RETURN )
  ROGUE_ATTRIBUTE( is_visiting,      Attribute.VISITING )
  ROGUE_ATTRIBUTE( requires_cleanup, Attribute.REQUIRES_CLEANUP )
  ROGUE_ATTRIBUTE( is_overridden,    Attribute.OVERRIDDEN )
  ROGUE_ATTRIBUTE( dynamic_dispatch, Attribute.DYNAMIC_DISPATCH )

  PROPERTIES
    flags : Int32

  METHODS
    method init( t )

    method init( t, flags )

    method init( other:Attributes )
      t = other.t
      flags = other.flags

    method add( cmd:Cmd )
      flags |= cmd.attribute_flags

    method add( flags:Int32 )
      flags |= flags

    method contains( flags:Int32 )->Logical
      return (flags & flags)?

    method contains( value:String )->Logical
      if ((forEach in this)->String == value) return true
      return false

    method description->String
      return "Attributes" + list_description

    method is_reference->Logical
      return (flags & (Attribute.OBJECT | Attribute.ASPECT))?
endClass

augment
  METHODS
    method Cmd.attribute_flags->Int32
      return 0

    method AttributeAspect.attribute_flags->Int32
      return Attribute.ASPECT

    method AttributeEssential.attribute_flags->Int32
      return Attribute.ESSENTIAL

    method AttributeExport.attribute_flags->Int32
      return Attribute.EXPORT

    method AttributePrimitive.attribute_flags->Int32
      return Attribute.PRIMITIVE

    method AttributeSingleton.attribute_flags->Int32
      return Attribute.SINGLETON
endAugment

