# Generated and updated by Froley. Custom changes will not be overwritten; customize as desired.
module Rogue

class Cmd( t:Token )
  GLOBAL METHODS
    method to_character( st:String )->Character
      if (st is null or st.count == 0) return Character(0)
      return st[0]

  METHODS
    method init( existing:Cmd )
      t = existing.t

    method cloned->ThisType [propagated]
      return ThisType(this)

    method add( cmd:Cmd )
      throw UnsupportedOperationError()

    method clear
      throw UnsupportedOperationError()

    method count->Int32
      return 0

    method description->String
      return "Cmd"

    method dispatch<<$VisitorType>>( visitor:$VisitorType ) [propagated]
      visitor.visit( this )

    method dispatch<<$VisitorType,$ReturnType>>( visitor:$VisitorType )->$ReturnType [propagated]
      return visitor.on( this )

    method dispatch_on_visit<<$VisitorType>>( visitor:$VisitorType ) [propagated]
      visitor.on_visit( this )

    method dispatch_on_visit_children<<$VisitorType>>( visitor:$VisitorType ) [propagated]
      visitor.on_visit_children( this )

    method dispatch_on_validate<<$VisitorType,$ReturnType>>( visitor:$VisitorType )->$ReturnType [propagated]
      return visitor.on_validate( this )

    method first->Cmd
      throw UnsupportedOperationError()

    method get( index:Int32 )->Cmd
      throw UnsupportedOperationError()

    method get<<$AsType>>( index:Int32 )->$AsType
      return get(index)->(as $AsType)

    method insert( element:Cmd, before_index=0:Int32 )
      throw UnsupportedOperationError()

    method last->Cmd
      throw UnsupportedOperationError()

    method list->Cmd[]
      throw UnsupportedOperationError()

    method remove_first->Cmd
      throw UnsupportedOperationError()

    method remove_last->Cmd
      throw UnsupportedOperationError()

    method set( index:Int32, value:Cmd )
      throw UnsupportedOperationError()

    method to->Character
      return Character(this->Int32)

    method to->Int32
      return 0

    method to->Logical
      return (this->Int32)?

    method to->Real64
      return this->Int32

    method to->String
      return description
endClass

class CmdList : Cmd
  PROPERTIES
    list = Cmd[]

  METHODS
    method init( t )
      noAction

    method init( t, element:Cmd )
      list.add( element )

    method init( t, element1:Cmd, element2:Cmd )
      list.add( element1 )
      list.add( element2 )

    method init( existing:CmdList )
      prior.init( existing )
      list = existing.list.cloned

    method add( cmd:Cmd )
      @list.add( cmd )

    method clear
      @list.clear

    method count->Int32
      return @list.count

    method description->String
      return "CmdList" + list_description

    method first->Cmd
      return @list.first

    method get( index:Int32 )->Cmd
      return @list[index]

    method insert( element:Cmd, before_index=0:Int32 )
      list.insert( element, before_index )

    method last->Cmd
      return @list.last

    method list->Cmd[]
      return @list

    method list_description->String
      use builder = StringBuilder.pool
        builder.print '['
        forEach (element at index in @list)
          if (index > 0) builder.print ','
          builder.print( %element )
        endForEach
        builder.print ']'
        return builder->String
      endUse

    method remove_first->Cmd
      return @list.remove_first

    method remove_last->Cmd
      return @list.remove_last

    method set( index:Int32, value:Cmd )
      @list[index] = value
endClass

class TokenList : Cmd
  PROPERTIES
    list : Token[]

  METHODS
    method init( t )
      list = Token[]

    method init( t, list )

    method init( existing:TokenList )
      prior.init( existing )
      list = existing.list.cloned

    method to->Token[]
      return list
endClass

class Unary( t, operand:Cmd ) : Cmd
  METHODS
    method init( existing:Unary )
      prior.init( existing )
      operand = existing.operand.cloned

    method description->String
      return "Unary($)"(%operand)
endClass

class Binary( t, left:Cmd, right:Cmd ) : Cmd
  METHODS
    method init( existing:Binary )
      prior.init( existing )
      left = existing.left.cloned
      right = existing.right.cloned

    method description->String
      return "Binary($,$)"(%left,%right)
endClass

class Args : CmdList
  METHODS
    method description->String
      return "Args" + list_description
endClass

class Statements : CmdList
  METHODS
    method description->String
      return "Statements" + list_description
endClass


class Print : Cmd
  PROPERTIES
    args : Cmd

  METHODS
    method init( t, args )

    method init( existing:Print )
      prior.init( existing )
      if (existing.args) args = existing.args.cloned

    method description->String
      return "Print($)" (%args)

endClass

class Println : Cmd
  PROPERTIES
    args : Cmd

  METHODS
    method init( t, args )

    method init( existing:Println )
      prior.init( existing )
      if (existing.args) args = existing.args.cloned

    method description->String
      return "Println($)" (%args)

endClass

class Add : Binary
  METHODS
    method description->String
      return "Add($,$)" (%left,%right)

endClass

class BitwiseAnd : Binary
  METHODS
    method description->String
      return "BitwiseAnd($,$)" (%left,%right)

endClass

class BitwiseOr : Binary
  METHODS
    method description->String
      return "BitwiseOr($,$)" (%left,%right)

endClass

class BitwiseXor : Binary
  METHODS
    method description->String
      return "BitwiseXor($,$)" (%left,%right)

endClass

class Compare : Binary
  METHODS
    method description->String
      return "Compare($,$)" (%left,%right)

endClass

class CompareEQ : Compare
  METHODS
    method description->String
      return "CompareEQ($,$)" (%left,%right)

endClass

class CompareGE : Compare
  METHODS
    method description->String
      return "CompareGE($,$)" (%left,%right)

endClass

class CompareGT : Compare
  METHODS
    method description->String
      return "CompareGT($,$)" (%left,%right)

endClass

class CompareLE : Compare
  METHODS
    method description->String
      return "CompareLE($,$)" (%left,%right)

endClass

class CompareLT : Compare
  METHODS
    method description->String
      return "CompareLT($,$)" (%left,%right)

endClass

class CompareNE : Binary
  METHODS
    method description->String
      return "CompareNE($,$)" (%left,%right)

endClass

class ContextAccess : Cmd
  PROPERTIES
    context : Cmd
    name    : String
    args    : Cmd

  METHODS
    method init( t, context, name, args )

    method init( existing:ContextAccess )
      prior.init( existing )
      if (existing.context) context = existing.context.cloned
      name = existing.name
      if (existing.args) args = existing.args.cloned

    method description->String
      return "ContextAccess($,$,$)" (%context,%name,%args)

endClass

class Divide : Binary
  METHODS
    method description->String
      return "Divide($,$)" (%left,%right)

endClass

class Identifier : Cmd
  PROPERTIES
    name : String

  METHODS
    method init( t, name )

    method init( existing:Identifier )
      prior.init( existing )
      name = existing.name

    method description->String
      return "Identifier($)" (%name)

    method to->Character
      return Cmd.to_character(name)

    method to->Int32:  return name
    method to->Logical: return name?
    method to->String: return name

endClass

class IndexAccess : Cmd
  PROPERTIES
    context : Cmd
    index   : Cmd

  METHODS
    method init( t, context, index )

    method init( existing:IndexAccess )
      prior.init( existing )
      if (existing.context) context = existing.context.cloned
      if (existing.index) index = existing.index.cloned

    method description->String
      return "IndexAccess($,$)" (%context,%index)

endClass

class LeftShift : Binary
  METHODS
    method description->String
      return "LeftShift($,$)" (%left,%right)

endClass

class Literal : Cmd
  METHODS
    method description->String
      return "Literal"
endClass

class LiteralCharacter : Cmd
  PROPERTIES
    value : Character

  METHODS
    method init( t, value )

    method init( existing:LiteralCharacter )
      prior.init( existing )
      value = existing.value

    method description->String
      return "LiteralCharacter($)" (%value)

    method to->Character: return value
    method to->Int32:     return value
    method to->String:    return value

endClass

class LiteralInteger : Cmd
  GLOBAL METHODS
    method create( t:Token, content:String, base:Int32 )->LiteralInteger
      contingent
        sufficient (base == 2 and content.count <= 32)
        if (base == 8)
          sufficient (content.count <= 10 or (content.count == 11 and content[0] <= '3'))
        endIf
        sufficient (base == 16 and content.count <= 8)

        return LiteralInt64( t, content->Int64(&=base) )

      satisfied
        return LiteralInt32( t, content->Int32(&=base) )

      endContingent

  METHODS
    method init( existing:LiteralInteger )
      prior.init( existing )

    method description->String
      return "LiteralInteger()"

endClass

class LiteralInt32 : LiteralInteger
  PROPERTIES
    value   : Int32

  METHODS
    method init( t, value )

    method init( existing:LiteralInt32 )
      prior.init( existing )
      value = existing.value

    method description->String
      return "LiteralInt32($)" (%value)

endClass

class LiteralInt64 : LiteralInteger
  PROPERTIES
    value   : Int64

  METHODS
    method init( t, value )

    method init( existing:LiteralInt64 )
      prior.init( existing )
      value = existing.value

    method description->String
      return "LiteralInt64($)" (%value)

endClass

class LiteralReal64 : Cmd
  PROPERTIES
    value : Real64

  METHODS
    method init( t, value )

    method init( existing:LiteralReal64 )
      prior.init( existing )
      value = existing.value

    method description->String
      return "LiteralReal64($)" (%value)

    method to->Int32:  return value
    method to->Real64: return value
    method to->String: return value

endClass

class LiteralString : Literal
  PROPERTIES
    value : String

  METHODS
    method init( t, value )

    method init( existing:LiteralString )
      prior.init( existing )
      value = existing.value

    method description->String
      return "LiteralString($)" (%value)

    method to->Character
      return Cmd.to_character(value)

    method to->Int32:  return value
    method to->Logical: return value?
    method to->String: return value

endClass

class LogicalAnd : Binary
  METHODS
    method description->String
      return "LogicalAnd($,$)" (%left,%right)

endClass

class LogicalNot : Unary
  METHODS
    method description->String
      return "LogicalNot($)" (%operand)

endClass

class LogicalOr : Binary
  METHODS
    method description->String
      return "LogicalOr($,$)" (%left,%right)

endClass

class LogicalXor : Binary
  METHODS
    method description->String
      return "LogicalXor($,$)" (%left,%right)

endClass

class Mod : Binary
  METHODS
    method description->String
      return "Mod($,$)" (%left,%right)

endClass

class Multiply : Binary
  METHODS
    method description->String
      return "Multiply($,$)" (%left,%right)

endClass

class Negate : Unary
  METHODS
    method description->String
      return "Negate($)" (%operand)

endClass

class RightShift : Binary
  METHODS
    method description->String
      return "RightShift($,$)" (%left,%right)

endClass

class RightShiftX : Binary
  METHODS
    method description->String
      return "RightShiftX($,$)" (%left,%right)

endClass

class Subtract : Binary
  METHODS
    method description->String
      return "Subtract($,$)" (%left,%right)

endClass

class Join : Cmd
  PROPERTIES
    a : String
    b : String

  METHODS
    method init( t, a, b )

    method init( existing:Join )
      prior.init( existing )
      a = existing.a
      b = existing.b

    method description->String
      return "Join($,$)" (%a,%b)

endClass

class PrintString : PrintValue
  METHODS
    method description->String
      return "PrintString($)" (%operand)

endClass

class PrintNewline : Cmd
  METHODS
    method description->String
      return "PrintNewline"
endClass

class Local : Cmd
  PROPERTIES
    name          : String
    initial_value : Cmd
    type          : Type

  METHODS
    method init( t, name, initial_value, type )

    method init( existing:Local )
      prior.init( existing )
      name = existing.name
      if (existing.initial_value) initial_value = existing.initial_value.cloned
      if (existing.type) type = existing.type.cloned

    method description->String
      return "Local($,$,$)" (%name,%initial_value,%type)

endClass

class LocalDeclarations : Cmd
  PROPERTIES
    declarations : Cmd
    type         : Type

  METHODS
    method init( t, declarations, type )

    method init( existing:LocalDeclarations )
      prior.init( existing )
      if (existing.declarations) declarations = existing.declarations.cloned
      if (existing.type) type = existing.type.cloned

    method description->String
      return "LocalDeclarations($,$)" (%declarations,%type)

endClass

class Access : Cmd
  PROPERTIES
    name : String
    args : Cmd

  METHODS
    method init( t, name, args=null )

    method init( existing:Access )
      prior.init( existing )
      name = existing.name
      if (existing.args) args = existing.args.cloned

    method description->String
      return "Access($,$)" (%name,%args)

endClass

class Assign : Cmd
  PROPERTIES
    target    : Cmd
    new_value : Cmd

  METHODS
    method init( t, target, new_value )

    method init( existing:Assign )
      prior.init( existing )
      if (existing.target) target = existing.target.cloned
      if (existing.new_value) new_value = existing.new_value.cloned

    method description->String
      return "Assign($,$)" (%target,%new_value)

endClass

class SetLocal : Cmd
  PROPERTIES
    info      : Local
    new_value : Cmd

  METHODS
    method init( t, info, new_value )

    method init( existing:SetLocal )
      prior.init( existing )
      if (existing.info) info = existing.info.cloned
      if (existing.new_value) new_value = existing.new_value.cloned

    method description->String
      return "SetLocal($,$)" (%info,%new_value)

endClass

class GetLocal : Cmd
  PROPERTIES
    info : Local

  METHODS
    method init( t, info )

    method init( existing:GetLocal )
      prior.init( existing )
      if (existing.info) info = existing.info.cloned

    method description->String
      return "GetLocal($)" (%info)

endClass

class PrintInt32 : PrintValue
  METHODS
    method description->String
      return "PrintInt32($)" (%operand)

endClass

class Class : Cmd
  PROPERTIES
    name                   : Cmd
    template_parameters    : Cmd
    constructor_properties : Cmd
    base_types             : Cmd
    attributes             : Attributes
    sections               : Cmd

  METHODS
    method init( t, name, template_parameters, constructor_properties, base_types, attributes, sections )

    method init( existing:Class )
      prior.init( existing )
      if (existing.name) name = existing.name.cloned
      if (existing.template_parameters) template_parameters = existing.template_parameters.cloned
      if (existing.constructor_properties) constructor_properties = existing.constructor_properties.cloned
      if (existing.base_types) base_types = existing.base_types.cloned
      if (existing.attributes) attributes = existing.attributes.cloned
      if (existing.sections) sections = existing.sections.cloned

    method description->String
      return "Class($,$,$,$,$)" (%name,%constructor_properties,%base_types,%attributes,%sections)

endClass

class Placeholder : Cmd
  PROPERTIES
    name : String

  METHODS
    method init( t, name )

    method init( existing:Placeholder )
      prior.init( existing )
      name = existing.name

    method description->String
      return "Placeholder($)" (%name)

    method to->Character
      return Cmd.to_character(name)

    method to->Int32:  return name
    method to->Logical: return name?
    method to->String: return name

endClass

class PropertyDeclarations : Cmd
  PROPERTIES
    declarations : Cmd
    type         : Type
    attributes   : Attributes

  METHODS
    method init( t, declarations, type, attributes )

    method init( existing:PropertyDeclarations )
      prior.init( existing )
      if (existing.declarations) declarations = existing.declarations.cloned
      if (existing.type) type = existing.type.cloned

    method description->String
      return "PropertyDeclarations($,$)" (%declarations,%type)

endClass

class Property : Cmd
  DEFINITIONS
    IS_NATIVE = 1

    ROGUE_ATTRIBUTE( is_native, IS_NATIVE )

  PROPERTIES
    name          : String
    initial_value : Cmd
    type          : Type
    attributes    : Int32

  METHODS
    method init( t, name, initial_value, type )

    method init( existing:Property )
      prior.init( existing )
      name = existing.name
      if (existing.initial_value) initial_value = existing.initial_value.cloned
      if (existing.type) type = existing.type.cloned
      attributes = existing.attributes

    method description->String
      return "Property($,$,$)" (%name,%initial_value,%type)

endClass

class NativeCProperty : NativeProperty
  METHODS
    method description->String
      return "NativeCProperty($)" (%expression)

endClass

class NativeProperty : Cmd
  PROPERTIES
    expression : String

  METHODS
    method init( t, expression )

    method init( existing:NativeProperty )
      prior.init( existing )
      expression = existing.expression

    method description->String
      return "NativeProperty($)" (%expression)

    method to->Character
      return Cmd.to_character(expression)

    method to->Int32:  return expression
    method to->Logical: return expression?
    method to->String: return expression

endClass

class NativeCode : Cmd
  PROPERTIES
    content : String

  METHODS
    method init( t, content )

    method init( existing:NativeCode )
      prior.init( existing )
      content = existing.content

    method description->String
      return "NativeCode($)" (%content)

    method to->Character
      return Cmd.to_character(content)

    method to->Int32:  return content
    method to->Logical: return content?
    method to->String: return content

endClass

class NativeHeader : Cmd
  PROPERTIES
    content : String

  METHODS
    method init( t, content )

    method init( existing:NativeHeader )
      prior.init( existing )
      content = existing.content

    method description->String
      return "NativeHeader($)" (%content)

    method to->Character
      return Cmd.to_character(content)

    method to->Int32:  return content
    method to->Logical: return content?
    method to->String: return content

endClass

class ControlStructure : Cmd
  PROPERTIES
    locals         = Local[]  # local to the scope of the control structure
    initialization : Cmd
    statements     : Cmd
    control_type   : ControlType

  METHODS
    method init( t:Token, control_type:ControlType )
      init( t, Statements(t), Statements(t), control_type )

    method init( t:Token, statements:Cmd, control_type:ControlType )
      init( t, Statements(t), statements, control_type )

    method init( t, initialization, statements, control_type=ControlType.UNDEFINED )

    method init( existing:ControlStructure )
      prior.init( existing )
      if (existing.locals) locals = existing.locals.cloned
      if (existing.initialization) initialization = existing.initialization.cloned
      if (existing.statements) statements = existing.statements.cloned

    method description->String
      return "ControlStructure($,$)" (%initialization,%statements)

endClass

class LocalScope : ControlStructure
  METHODS
    method init( t:Token )
      prior.init( t, ControlType.LOCAL_SCOPE )

    method init( t:Token, statements:Cmd )
      prior.init( t, statements, ControlType.LOCAL_SCOPE )

    method init( existing:LocalScope )
      prior.init( existing )

    method description->String
      return "LocalScope($,$)"(%initialization,%statements)
endClass

class Conditional : ControlStructure
  PROPERTIES
    condition : Cmd

  METHODS
    method init( t:Token, control_type:ControlType )
      init( t, Statements(t), null, Statements(t), control_type )

    method init( t:Token, initialization, condition, statements,
        control_type=ControlType.UNDEFINED:ControlType )
      prior.init( t, initialization, statements, control_type )

    method init( existing:Conditional )
      prior.init( existing )
      if (existing.condition) condition = existing.condition.cloned

    method description->String
      return "Conditional($,$,$)" (%initialization,%condition,%statements)

endClass

class Iterator : Conditional
  PROPERTIES
    control : Cmd
    upkeep  : Cmd

  METHODS
    method init( t:Token, statements:Cmd, control_type:ControlType )
      init( t, Statements(t), Statements(t), null, Statements(t), statements, control_type )

    method init( t:Token, initialization:Cmd, control, condition:Cmd, statements:Cmd, upkeep,
                 control_type=ControlType.UNDEFINED:ControlType )
      prior.init( t, initialization, condition, statements, control_type )

    method init( existing:Iterator )
      prior.init( existing )
      if (existing.control) control = existing.control.cloned
      if (existing.upkeep)  upkeep  = existing.upkeep.cloned

    method description->String
      return "Iterator($,$,$,$,$)" (%initialization,%control,%condition,%statements,%upkeep)

endClass

class ForEach : Cmd
  PROPERTIES
    condition    : ForEachControl
    statements : Cmd

  METHODS
    method init( t, condition, statements )

    method init( existing:ForEach )
      prior.init( existing )
      if (existing.condition) condition = existing.condition.cloned
      if (existing.statements) statements = existing.statements.cloned

    method description->String
      return "ForEach($,$)" (%condition,%statements)

endClass

class ForEachAt : Cmd
  PROPERTIES
    name : String

  METHODS
    method init( t, name )

    method init( existing:ForEachAt )
      prior.init( existing )
      name = existing.name

    method description->String
      return "ForEachAt($)" (%name)

    method to->Character
      return Cmd.to_character(name)

    method to->Int32:  return name
    method to->Logical: return name?
    method to->String: return name

endClass

class ForEachCollection : Cmd
  PROPERTIES
    name           : String
    data           : Cmd
    starting_index : Cmd
    step_size      : Cmd

  METHODS
    method init( t, name, data, starting_index, step_size )

    method init( existing:ForEachCollection )
      prior.init( existing )
      name = existing.name
      if (existing.data) data = existing.data.cloned
      if (existing.starting_index) starting_index = existing.starting_index.cloned
      if (existing.step_size) step_size = existing.step_size.cloned

    method description->String
      return "ForEachCollection($,$,$,$)" (%name,%data,%starting_index,%step_size)

endClass

class ForEachControl : Cmd
  PROPERTIES
    name        : String
    optional_at : ForEachAt
    collection  : ForEachCollection

  METHODS
    method init( t, name, optional_at, collection )

    method init( existing:ForEachControl )
      prior.init( existing )
      name = existing.name
      if (existing.optional_at) optional_at = existing.optional_at.cloned
      if (existing.collection) collection = existing.collection.cloned

    method description->String
      return "ForEachControl($,$,$)" (%name,%optional_at,%collection)

endClass

class ForEachInControl : ForEachControl
  METHODS
    method description->String
      return "ForEachInControl($,$,$)" (%name,%optional_at,%collection)

endClass

class ForEachOfControl : ForEachControl
  METHODS
    method description->String
      return "ForEachOfControl($,$,$)" (%name,%optional_at,%collection)

endClass

class Range : Binary
  METHODS
    method description->String
      return "Range($,$)" (%left,%right)

endClass

class RangeDownTo : Range
  METHODS
    method description->String
      return "RangeDownTo($,$)" (%left,%right)

endClass

class RangeDownToGreaterThan : Range
  METHODS
    method description->String
      return "RangeDownToGreaterThan($,$)" (%left,%right)

endClass

class RangeUpTo : Range
  METHODS
    method description->String
      return "RangeUpTo($,$)" (%left,%right)

endClass

class RangeUpToLessThan : Range
  METHODS
    method description->String
      return "RangeUpToLessThan($,$)" (%left,%right)

endClass

class Block : Cmd
  PROPERTIES
    statements : Cmd

  METHODS
    method init( t, statements )

    method init( existing:Block )
      prior.init( existing )
      if (existing.statements) statements = existing.statements.cloned

    method description->String
      return "Block($)" (%statements)

endClass


class PrintLogical : PrintValue
  METHODS
    method description->String
      return "PrintLogical($)" (%operand)

endClass


class Postdecrement : Unary
  METHODS
    method description->String
      return "Postdecrement($)" (%operand)

endClass

class Postincrement : Unary
  METHODS
    method description->String
      return "Postincrement($)" (%operand)

endClass

class Predecrement : Unary
  METHODS
    method description->String
      return "Predecrement($)" (%operand)

endClass

class Preincrement : Unary
  METHODS
    method description->String
      return "Preincrement($)" (%operand)

endClass


class If : Conditional
  PROPERTIES
    cmd_else : If

  METHODS
    method init( t, condition, statements, cmd_else )

    method init( existing:If )
      prior.init( existing )
      if (existing.cmd_else) cmd_else = existing.cmd_else.cloned

    method description->String
      return "If($,$,$)" (%condition,%statements,%cmd_else)

endClass

class PrintValue : Cmd
  PROPERTIES
    operand : Cmd

  METHODS
    method init( t, operand )

    method init( existing:PrintValue )
      operand = existing.operand.cloned

    method description->String
      return "PrintValue($)" (%operand)

endClass

class Return : Cmd
  PROPERTIES
    result : Cmd

  METHODS
    method init( t, result )

    method init( existing:Return )
      prior.init( existing )
      if (existing.result) result = existing.result.cloned

    method description->String
      return "Return($)" (%result)

endClass

class CallProcedure : Cmd
  PROPERTIES
    info : Procedure
    args : Cmd

  METHODS
    method init( t, args )

    method init( t, info, args )

    method init( existing:CallProcedure )
      prior.init( existing )
      if (existing.args) args = existing.args.cloned

    method description->String
      return "CallProcedure($)" (%args)

endClass

class CallRoutine : CallProcedure
  METHODS
    method description->String
      return "CallRoutine($)" (%args)

endClass

class BitwiseNot : Unary
  METHODS
    method description->String
      return "BitwiseNot($)" (%operand)

endClass

class LiteralLogical : Cmd
  PROPERTIES
    value : Logical

  METHODS
    method init( t, value )

    method init( existing:LiteralLogical )
      prior.init( existing )
      value = existing.value

    method description->String
      return "LiteralLogical($)" (%value)

    method to->Int32:   return which{value:1 || 0}
    method to->Logical: return value
    method to->String:  return which{value:"true" || "false"}

endClass

class LiteralPi : Cmd
  METHODS
    method description->String
      return "LiteralPi"
endClass

class Convert : Unary
  METHODS
    method description->String
      return "Convert($)" (%operand)

endClass

class ConvertToByte : Convert
  METHODS
    method description->String
      return "ConvertToByte($)" (%operand)

endClass

class ConvertToCharacter : Convert
  METHODS
    method description->String
      return "ConvertToCharacter($)" (%operand)

endClass

class ConvertToInt32 : Convert
  METHODS
    method description->String
      return "ConvertToInt32($)" (%operand)

endClass

class ConvertToInt64 : Convert
  METHODS
    method description->String
      return "ConvertToInt64($)" (%operand)

endClass

class ConvertToLogical : Convert
  METHODS
    method description->String
      return "ConvertToLogical($)" (%operand)

endClass

class ConvertToReal32 : Convert
  METHODS
    method description->String
      return "ConvertToReal32($)" (%operand)

endClass

class ConvertToReal64 : Convert
  METHODS
    method description->String
      return "ConvertToReal64($)" (%operand)

endClass

class PrintReal64 : PrintValue
  METHODS
    method description->String
      return "PrintReal64($)" (%operand)

endClass

class UsesModule : Cmd
  PROPERTIES
    path       : Cmd
    attributes : Attributes

  METHODS
    method init( t, path, attributes )

    method init( existing:UsesModule )
      prior.init( existing )
      if (existing.path) path = existing.path.cloned
      if (existing.attributes) attributes = existing.attributes.cloned

    method description->String
      return "UsesModule($,$)" (%path,%attributes)

endClass

class AttributeExport : Cmd
  METHODS
    method description->String
      return "AttributeExport"
endClass

class DefineModule : Cmd
  PROPERTIES
    name       : String
    attributes : Attributes

  METHODS
    method init( t, name, attributes )

    method init( existing:DefineModule )
      prior.init( existing )
      name = existing.name
      if (existing.attributes) attributes = existing.attributes.cloned

    method description->String
      return "DefineModule($,$)" (%name,%attributes)

endClass


class ModuleQualifiedID : Cmd
  PROPERTIES
    context : Cmd
    name    : String

  METHODS
    method init( t, context, name )

    method init( existing:ModuleQualifiedID )
      prior.init( existing )
      if (existing.context) context = existing.context.cloned
      name = existing.name

    method description->String
      return "ModuleQualifiedID($,$)" (%context,%name)

    method to->String
      return "$::$"(context->String,name)

endClass

class NativeExpression : Cmd
  PROPERTIES
    content     : String
    result_type : Cmd

  METHODS
    method init( t, content, result_type )

    method init( existing:NativeExpression )
      prior.init( existing )
      content = existing.content
      if (existing.result_type) result_type = existing.result_type.cloned

    method description->String
      return "NativeExpression($,$)" (%content,%result_type)

endClass

class NativeStatement : Cmd
  PROPERTIES
    content : String

  METHODS
    method init( t, content )

    method init( existing:NativeStatement )
      prior.init( existing )
      content = existing.content

    method description->String
      return "NativeStatement($)" (%content)

    method to->Character
      return Cmd.to_character(content)

    method to->Int32:  return content
    method to->Logical: return content?
    method to->String: return content

endClass

class UnresolvedCreateObject : Cmd
  PROPERTIES
    of_type : Type
    m_init  : Method
    args    : Cmd

  METHODS
    method init( t, of_type, m_init, args )
      # Real constructor

    method init( t, of_type, args )
      # Froley constructor

    method init( existing:UnresolvedCreateObject )
      prior.init( existing )
      if (existing.of_type) of_type = existing.of_type.cloned
      if (existing.args) args = existing.args.cloned

    method description->String
      return "UnresolvedCreateObject($,$)" (%of_type,%args)

endClass

class TypeContext : Cmd
  PROPERTIES
    type : Type

  METHODS
    method init( t, type )

    method init( existing:TypeContext )
      prior.init( existing )
      if (existing.type) type = existing.type.cloned

    method description->String
      return "TypeContext($)" (%type)

endClass

class CallGlobalMethod : CallProcedure
  METHODS
    method description->String
      return "CallGlobalMethod($)" (%args)

endClass

class AddAndAssign : OpAndAssign
  METHODS
    method description->String
      return "AddAndAssign($,$)" (%target,%operand)

endClass

class AddAndAssignLocal : Cmd
  PROPERTIES
    info    : Local
    operand : Cmd

  METHODS
    method init( t, info, operand )

    method init( existing:AddAndAssignLocal )
      prior.init( existing )
      if (existing.info) info = existing.info.cloned
      if (existing.operand) operand = existing.operand.cloned

    method description->String
      return "AddAndAssignLocal($,$)" (%info,%operand)

endClass

class OpAndAssign : Cmd
  PROPERTIES
    target  : Cmd
    operand : Cmd

  METHODS
    method init( t, target, operand )

    method init( existing:OpAndAssign )
      prior.init( existing )
      if (existing.target) target = existing.target.cloned
      if (existing.operand) operand = existing.operand.cloned

    method description->String
      return "OpAndAssign($,$)" (%target,%operand)

endClass

class LiteralNull : Cmd
  PROPERTIES
    of_type : Type

  METHODS
    method description->String
      return "LiteralNull"
endClass

class Routine : Procedure
  METHODS
    method organize
      if (is_organized) return
      prior.organize
      module_context.add( this )
endClass

class GlobalMethod : Procedure
  PROPERTIES
    type_context : Type

  METHODS
    method organize
      if (is_organized) return
      prior.organize
      type_context.add( this )

endClass

class Method : Procedure
  PROPERTIES
    type_context : Type

  METHODS
    method organize
      if (is_organized) return
      prior.organize

      # TODO: inherit
      type_context.add( this )

endClass

class CallMethod : CallProcedure
  PROPERTIES
    context : Cmd

  METHODS
    method init( t, context, args )

    method init( t, context, info, args )

    method init( existing:CallMethod )
      prior.init( existing )
      if (existing.context) context = existing.context.cloned

    method description->String
      return "CallMethod($,$)" (%context,%args)

endClass

class CallThisMethod : CallProcedure
  METHODS
    method init( t, args )

    method init( t, info, args )

    method init( existing:CallThisMethod )
      prior.init( existing )

    method description->String
      return "CallThisMethod($,$)" (info.name,%args)

endClass

class GetProperty : Cmd
  PROPERTIES
    context : Cmd
    info    : Property

  METHODS
    method init( t, context, info )

    method init( existing:GetProperty )
      prior.init( existing )
      if (existing.context) context = existing.context.cloned
      if (existing.info) info = existing.info.cloned

    method description->String
      return "GetProperty($,$)" (%context,%info)

endClass

class GetThisProperty : Cmd
  PROPERTIES
    info : Property

  METHODS
    method init( t, info )

    method init( existing:GetThisProperty )
      prior.init( existing )
      if (existing.info) info = existing.info.cloned

    method description->String
      return "GetThisProperty($)" (%info)

endClass

class SetProperty : Cmd
  PROPERTIES
    context   : Cmd
    info      : Property
    new_value : Cmd

  METHODS
    method init( t, context, info, new_value )

    method init( existing:SetProperty )
      prior.init( existing )
      if (existing.context) context = existing.context.cloned
      if (existing.info) info = existing.info.cloned
      if (existing.new_value) new_value = existing.new_value.cloned

    method description->String
      return "SetProperty($,$,$)" (%context,%info,%new_value)

endClass

class SetThisProperty : Cmd
  PROPERTIES
    info      : Property
    new_value : Cmd

  METHODS
    method init( t, info, new_value )

    method init( existing:SetThisProperty )
      prior.init( existing )
      if (existing.info) info = existing.info.cloned
      if (existing.new_value) new_value = existing.new_value.cloned

    method description->String
      return "SetThisProperty($,$)" (%info,%new_value)

endClass

class Is : Binary
  METHODS
    method description->String
      return "Is($,$)" (%left,%right)

endClass

class IsNot : Binary
  METHODS
    method description->String
      return "IsNot($,$)" (%left,%right)

endClass

class PrintCharacter : PrintValue
  METHODS
    method description->String
      return "PrintCharacter($)" (%operand)

endClass

class AttributeEssential : Cmd
  METHODS
    method description->String
      return "AttributeEssential"
endClass

class AttributeSingleton : Cmd
  METHODS
    method description->String
      return "AttributeSingleton"
endClass

class PrintInt64 : PrintValue
  METHODS
    method description->String
      return "PrintInt64($)" (%operand)

endClass

class GetSingleton : Cmd
  PROPERTIES
    type : Type

  METHODS
    method init( t, type )

    method init( existing:GetSingleton )
      prior.init( existing )
      if (existing.type) type = existing.type.cloned

    method description->String
      return "GetSingleton($)" (%type)

endClass

class ConvertToType : Cmd
  PROPERTIES
    operand : Cmd
    to_type : Type

  METHODS
    method init( t, operand, to_type )

    method init( existing:ConvertToType )
      prior.init( existing )
      if (existing.operand) operand = existing.operand.cloned
      if (existing.to_type) to_type = existing.to_type.cloned

    method description->String
      return "ConvertToType($,$)" (%operand,%to_type)

endClass


class CreateObject : Cmd
  PROPERTIES
    of_type : Type
    m_init  : Procedure
    args    : Cmd
    info    : Local

  METHODS
    method init( t, of_type, m_init, args, info )
      # Real constructor

    method init( t, of_type, args, info )
      # Froley constructor

    method init( existing:CreateObject )
      prior.init( existing )
      if (existing.of_type) of_type = existing.of_type.cloned
      if (existing.args) args = existing.args.cloned
      if (existing.info) info = existing.info.cloned

    method description->String
      return "CreateObject($,$,$)" (%of_type,%args,%info)

endClass

class Definition : Cmd
  PROPERTIES
    name  : String
    value : Cmd

  METHODS
    method init( t, name, value )

    method init( existing:Definition )
      prior.init( existing )
      name = existing.name
      if (existing.value) value = existing.value.cloned

    method description->String
      return "Definition($,$)" (%name,%value)

endClass
