# Generated and updated by Froley. Custom changes will not be overwritten; customize as desired.
module Rogue

class Cmd( t:Token )
  GLOBAL METHODS
    method to_character( st:String )->Character
      if (st is null or st.count == 0) return Character(0)
      return st[0]

  METHODS
    method init( existing:Cmd )
      t = existing.t

    method cloned->ThisType [propagated]
      return ThisType(this)

    method add( cmd:Cmd )
      throw UnsupportedOperationError()

    method catches_escape( cmd:Cmd )->Logical
      return catches_escape( cmd.control_type )

    method catches_escape( escape_type:ControlType )->Logical
      return false

    method clear
      throw UnsupportedOperationError()

    method control_type->ControlType
      return ControlType.UNDEFINED

    method count->Int32
      return 0

    method description->String
      return "Cmd"

    method dispatch<<$m,$VisitorType>>( visitor:$VisitorType ) [propagated]
      visitor.$m( this )

    method dispatch<<$m,$VisitorType,$ReturnType>>( visitor:$VisitorType )->$ReturnType [propagated]
      return visitor.$m( this )

    method first->Cmd
      throw UnsupportedOperationError()

    method get( index:Int32 )->Cmd
      throw UnsupportedOperationError()

    method get<<$AsType>>( index:Int32 )->$AsType
      return get(index)->(as $AsType)

    method insert( element:Cmd, before_index=0:Int32 )
      throw UnsupportedOperationError()

    method last->Cmd
      throw UnsupportedOperationError()

    method remove_first->Cmd
      throw UnsupportedOperationError()

    method remove_last->Cmd
      throw UnsupportedOperationError()

    method set( index:Int32, value:Cmd )
      throw UnsupportedOperationError()

    method to->Character
      return Character(this->Int32)

    method to->Int32
      return 0

    method to->Logical
      return (this->Int32)?

    method to->Real64
      return this->Int32

    method to->String
      return description
endClass

class CmdList : Cmd
  PROPERTIES
    list = Cmd[]

  METHODS
    method init( t )
      noAction

    method init( element:Cmd )
      init( element.t, element )

    method init( t, element:Cmd )
      list.add( element )

    method init( element1:Cmd, element2:Cmd )
      init( element1.t, element1, element2 )

    method init( t, element1:Cmd, element2:Cmd )
      list.add( element1 )
      list.add( element2 )

    method init( existing:CmdList )
      prior.init( existing )
      list = existing.list.cloned

    method add( cmd:Cmd )
      @list.add( cmd )

    method clear
      @list.clear

    method count->Int32
      return @list.count

    method description->String
      return "CmdList" + list_description

    method first->Cmd
      return @list.first

    method get( index:Int32 )->Cmd
      return @list[index]

    method insert( element:Cmd, before_index=0:Int32 )
      list.insert( element, before_index )

    method last->Cmd
      return @list.last

    method list_description->String
      use builder = StringBuilder.pool
        builder.print '['
        forEach (element at index in @list)
          if (index > 0) builder.print ','
          builder.print( %element )
        endForEach
        builder.print ']'
        return builder->String
      endUse

    method remove_first->Cmd
      return @list.remove_first

    method remove_last->Cmd
      return @list.remove_last

    method set( index:Int32, value:Cmd )
      @list[index] = value
endClass

class TokenList : Cmd
  PROPERTIES
    tokens : Token[]

  METHODS
    method init( t )
      tokens = Token[]

    method init( t, tokens )

    method init( existing:TokenList )
      prior.init( existing )
      tokens = existing.tokens.cloned

    method description->String
      return "TokenList($)"(tokens)

    method to->Token[]
      return tokens
endClass

class Unary( t, operand:Cmd ) : Cmd
  METHODS
    method init( existing:Unary )
      prior.init( existing )
      operand = existing.operand.cloned

    method description->String
      return "Unary($)"(%operand)
endClass

class Binary( t, left:Cmd, right:Cmd ) : Cmd
  METHODS
    method init( existing:Binary )
      prior.init( existing )
      left = existing.left.cloned
      right = existing.right.cloned

    method description->String
      return "Binary($,$)"(%left,%right)
endClass

class Args : CmdList
  METHODS
    method description->String
      return "Args" + list_description
endClass

class Statements : CmdList
  METHODS
    method description->String
      return "Statements" + list_description
endClass


class Print : Cmd
  PROPERTIES
    args : Cmd

  METHODS
    method init( t, args )

    method init( existing:Print )
      prior.init( existing )
      if (existing.args) args = existing.args.cloned

    method description->String
      return "Print($)" (%args)

endClass

class Println : Cmd
  PROPERTIES
    args : Cmd

  METHODS
    method init( t, args )

    method init( existing:Println )
      prior.init( existing )
      if (existing.args) args = existing.args.cloned

    method description->String
      return "Println($)" (%args)

endClass

class Add : Binary
  METHODS
    method description->String
      return "Add($,$)" (%left,%right)

endClass

class BitwiseAnd : Binary
  METHODS
    method description->String
      return "BitwiseAnd($,$)" (%left,%right)

endClass

class BitwiseOr : Binary
  METHODS
    method description->String
      return "BitwiseOr($,$)" (%left,%right)

endClass

class BitwiseXor : Binary
  METHODS
    method description->String
      return "BitwiseXor($,$)" (%left,%right)

endClass

class Compare : Binary
  METHODS
    method description->String
      return "Compare($,$)" (%left,%right)

endClass

class CompareEQ : Compare
  METHODS
    method description->String
      return "CompareEQ($,$)" (%left,%right)

endClass

class CompareGE : Compare
  METHODS
    method description->String
      return "CompareGE($,$)" (%left,%right)

endClass

class CompareGT : Compare
  METHODS
    method description->String
      return "CompareGT($,$)" (%left,%right)

endClass

class CompareLE : Compare
  METHODS
    method description->String
      return "CompareLE($,$)" (%left,%right)

endClass

class CompareLT : Compare
  METHODS
    method description->String
      return "CompareLT($,$)" (%left,%right)

endClass

class CompareNE : Compare
  METHODS
    method description->String
      return "CompareNE($,$)" (%left,%right)

endClass

class ContextAccess : Cmd
  PROPERTIES
    context : Cmd
    name    : String
    args    : Cmd

  METHODS
    method init( t, context, name, args=null )

    method init( existing:ContextAccess )
      prior.init( existing )
      if (existing.context) context = existing.context.cloned
      name = existing.name
      if (existing.args) args = existing.args.cloned

    method description->String
      return "ContextAccess($,$,$)" (%context,%name,%args)

endClass

class Divide : Binary
  METHODS
    method description->String
      return "Divide($,$)" (%left,%right)

endClass

class Identifier : Cmd
  PROPERTIES
    name : String

  METHODS
    method init( t, name )

    method init( existing:Identifier )
      prior.init( existing )
      name = existing.name

    method description->String
      return "Identifier($)" (%name)

    method to->Character
      return Cmd.to_character(name)

    method to->Int32:  return name
    method to->Logical: return name?
    method to->String: return name

endClass

class IndexedAccess : Cmd
  PROPERTIES
    context : Cmd
    index   : Cmd

  METHODS
    method init( t, context, index )

    method init( existing:IndexedAccess )
      prior.init( existing )
      if (existing.context) context = existing.context.cloned
      if (existing.index) index = existing.index.cloned

    method description->String
      return "IndexedAccess($,$)" (%context,%index)

endClass

class BitShiftLeft : Binary
  METHODS
    method description->String
      return "BitShiftLeft($,$)" (%left,%right)

endClass

class Literal : Cmd
  METHODS
    method description->String
      return "Literal"
endClass

class LiteralCharacter : Literal
  PROPERTIES
    value : Character

  METHODS
    method init( t, value )

    method init( existing:LiteralCharacter )
      prior.init( existing )
      value = existing.value

    method description->String
      return "LiteralCharacter($)" (%value)

    method to->Character: return value
    method to->Int32:     return value
    method to->String:    return value

endClass

class LiteralInteger : Literal
  GLOBAL METHODS
    method create( t:Token, content:String, base:Int32 )->LiteralInteger
      contingent
        if (base == 10)
          sufficient (content.count > 10)
          local n64 = content->Int64(&=base)
          sufficient (n64 != n64->Int32->Int64)
          return LiteralInt32( t, n64->Int32 )
        endIf

        sufficient (base == 2 and content.count > 32)
        if (base == 8)
          sufficient (content.count > 11 or (content.count == 11 and content[0] > '3'))
        endIf
        sufficient (base == 16 and content.count > 8)

        return LiteralInt32( t, content->Int32(&=base) )

      satisfied
        return LiteralInt64( t, content->Int64(&=base) )

      endContingent

  METHODS
    method init( existing:LiteralInteger )
      prior.init( existing )

    method description->String
      return "LiteralInteger()"

endClass

class LiteralInt32 : LiteralInteger
  PROPERTIES
    value   : Int32

  METHODS
    method init( t, value )

    method init( existing:LiteralInt32 )
      prior.init( existing )
      value = existing.value

    method description->String
      return "LiteralInt32($)" (%value)

endClass

class LiteralInt64 : LiteralInteger
  PROPERTIES
    value   : Int64

  METHODS
    method init( t, value )

    method init( existing:LiteralInt64 )
      prior.init( existing )
      value = existing.value

    method description->String
      return "LiteralInt64($)" (%value)

endClass

class LiteralReal : Literal
  PROPERTIES
    value : Real64

  METHODS
    method init( t, value )

    method init( existing:LiteralReal )
      prior.init( existing )
      value = existing.value

    method description->String
      return "LiteralReal($)" (%value)

    method to->Int32:  return value
    method to->Real64: return value
    method to->String: return value

endClass

class LiteralString : Literal
  PROPERTIES
    value : String

  METHODS
    method init( t, value )

    method init( existing:LiteralString )
      prior.init( existing )
      value = existing.value

    method description->String
      return "LiteralString($)" (%value)

    method to->Character
      return Cmd.to_character(value)

    method to->Int32:  return value
    method to->Logical: return value?
    method to->String: return value

endClass

class LogicalAnd : Binary
  METHODS
    method description->String
      return "LogicalAnd($,$)" (%left,%right)

endClass

class LogicalNot : Unary
  METHODS
    method description->String
      return "LogicalNot($)" (%operand)

endClass

class LogicalOr : Binary
  METHODS
    method description->String
      return "LogicalOr($,$)" (%left,%right)

endClass

class LogicalXor : Binary
  METHODS
    method description->String
      return "LogicalXor($,$)" (%left,%right)

endClass

class Mod : Binary
  METHODS
    method description->String
      return "Mod($,$)" (%left,%right)

endClass

class Multiply : Binary
  METHODS
    method description->String
      return "Multiply($,$)" (%left,%right)

endClass

class Negate : Unary
  METHODS
    method description->String
      return "Negate($)" (%operand)

endClass

class BitShiftRight : Binary
  METHODS
    method description->String
      return "BitShiftRight($,$)" (%left,%right)

endClass

class BitShiftRightX : Binary
  METHODS
    method description->String
      return "BitShiftRightX($,$)" (%left,%right)

endClass

class Subtract : Binary
  METHODS
    method description->String
      return "Subtract($,$)" (%left,%right)

endClass

class Join : Cmd
  PROPERTIES
    a : String
    b : String

  METHODS
    method init( t, a, b )

    method init( existing:Join )
      prior.init( existing )
      a = existing.a
      b = existing.b

    method description->String
      return "Join($,$)" (%a,%b)

endClass

class Local : Cmd
  PROPERTIES
    name          : String
    original_name : String   # for auto-store parameters
    initial_value : Cmd
    type          : Type
    attributes    : Attributes

  METHODS
    method init( t, name, type )
      original_name = name
      ensure attributes(t)
      attributes.is_anchored = true  # starting assumption

    method init( t, name, initial_value, type, &default_parameter )
      original_name = name
      ensure attributes(t)
      attributes.is_default_parameter = default_parameter
      attributes.is_anchored = true  # starting assumption

    method init( existing:Local )
      prior.init( existing )
      name = existing.name
      original_name = existing.original_name
      if (existing.initial_value) initial_value = existing.initial_value.cloned
      if (existing.type) type = existing.type.cloned
      attributes = existing.attributes.cloned

    method description->String
      return "Local($,$,$)" (%name,%initial_value,%type)

endClass

class LocalDeclarations : Cmd
  PROPERTIES
    declarations : Cmd
    type         : Type

  METHODS
    method init( t, declarations, type )

    method init( existing:LocalDeclarations )
      prior.init( existing )
      if (existing.declarations) declarations = existing.declarations.cloned
      if (existing.type) type = existing.type.cloned

    method description->String
      return "LocalDeclarations($,$)" (%declarations,%type)

endClass

class Access : Cmd
  PROPERTIES
    name : String
    args : Cmd

  METHODS
    method init( t, name, args=null )

    method init( existing:Access )
      prior.init( existing )
      name = existing.name
      if (existing.args) args = existing.args.cloned

    method description->String
      return "Access($,$)" (%name,%args)

endClass

class Assign : Cmd
  PROPERTIES
    target    : Cmd
    new_value : Cmd

  METHODS
    method init( t, target, new_value )

    method init( existing:Assign )
      prior.init( existing )
      if (existing.target) target = existing.target.cloned
      if (existing.new_value) new_value = existing.new_value.cloned

    method description->String
      return "Assign($,$)" (%target,%new_value)

endClass

class SetLocal : Cmd
  PROPERTIES
    info                  : Local
    new_value             : Cmd
    is_initial_assignment : Logical

  METHODS
    method init( info:Local, new_value:Cmd, &initial_assignment )
      init( info.t, info, new_value, &=initial_assignment )

    method init( t, info, new_value, &initial_assignment )
      is_initial_assignment = initial_assignment
      info.attributes.is_anchored = initial_assignment

    method init( existing:SetLocal )
      prior.init( existing )
      info = existing.info
      if (existing.new_value) new_value = existing.new_value.cloned

    method description->String
      return "SetLocal($,$)" (%info,%new_value)

endClass

class GetLocal : Cmd
  PROPERTIES
    info : Local

  METHODS
    method init( info )
      t = info.t

    method init( t, info )

    method init( existing:GetLocal )
      prior.init( existing )
      if (existing.info) info = existing.info

    method description->String
      return "GetLocal($)" (%info)

endClass

class Class : Cmd
  PROPERTIES
    constructor_properties : Parameters
    base_types             : TypeList
    attributes             : Attributes
    sections               : Cmd

  METHODS
    method init( t, constructor_properties, base_types, attributes, sections )

    method init( existing:Class )
      prior.init( existing )
      if (existing.constructor_properties) constructor_properties = existing.constructor_properties.cloned
      if (existing.base_types) base_types = existing.base_types.cloned
      if (existing.attributes) attributes = existing.attributes.cloned
      if (existing.sections) sections = existing.sections.cloned

    method description->String
      return "Class($,$,$,$)" (%constructor_properties,%base_types,%attributes,%sections)

endClass

class Placeholder : Cmd
  PROPERTIES
    name : String

  METHODS
    method init( t, name )

    method init( existing:Placeholder )
      prior.init( existing )
      name = existing.name

    method description->String
      return "Placeholder($)" (%name)

    method to->Character
      return Cmd.to_character(name)

    method to->Int32:  return name
    method to->Logical: return name?
    method to->String: return name

endClass

class PropertyDeclarations : Cmd
  PROPERTIES
    declarations : Cmd
    type         : Type
    attributes   : Attributes

  METHODS
    method init( t, declarations, type, attributes )

    method init( existing:PropertyDeclarations )
      prior.init( existing )
      if (existing.declarations) declarations = existing.declarations.cloned
      if (existing.type) type = existing.type.cloned

    method description->String
      return "PropertyDeclarations($,$)" (%declarations,%type)

endClass

class Property : Cmd
  PROPERTIES
    type_context  : Type
    name          : String
    initial_value : Cmd
    type          : Type
    attributes    : Attributes

  METHODS
    method init( t, name, initial_value, type )
      attributes = Attributes(t)

    method init( existing:Property )
      prior.init( existing )
      type_context = existing.type_context
      name = existing.name
      if (existing.initial_value) initial_value = existing.initial_value.cloned
      if (existing.type) type = existing.type.cloned
      if (existing.attributes) attributes = existing.attributes.cloned

    method description->String
      return "Property($,$,$)" (%name,%initial_value,%type)

endClass

class NativeCProperty : NativeProperty
  METHODS
    method description->String
      return "NativeCProperty($)" (%expression)

endClass

class NativeProperty : Cmd
  PROPERTIES
    expression : String

  METHODS
    method init( t, expression )

    method init( existing:NativeProperty )
      prior.init( existing )
      expression = existing.expression

    method description->String
      return "NativeProperty($)" (%expression)

    method to->Character
      return Cmd.to_character(expression)

    method to->Int32:  return expression
    method to->Logical: return expression?
    method to->String: return expression

endClass

class NativeCode : Cmd
  PROPERTIES
    content : String

  METHODS
    method init( t, content )

    method init( existing:NativeCode )
      prior.init( existing )
      content = existing.content

    method description->String
      return "NativeCode($)" (%content)

    method to->Character
      return Cmd.to_character(content)

    method to->Int32:  return content
    method to->Logical: return content?
    method to->String: return content

endClass

class NativeHeader : Cmd
  PROPERTIES
    content : String

  METHODS
    method init( t, content )

    method init( existing:NativeHeader )
      prior.init( existing )
      content = existing.content

    method description->String
      return "NativeHeader($)" (%content)

    method to->Character
      return Cmd.to_character(content)

    method to->Int32:  return content
    method to->Logical: return content?
    method to->String: return content

endClass

class ControlStructure : Cmd
  PROPERTIES
    locals                = Local[]  # local to the scope of the control structure
    statements            : Cmd
    control_type          : ControlType
    catches_escape        : Logical # catches control escape
    exception_passthrough : Logical # a thrown exception passes through

  METHODS
    method init( t, control_type )
      statements = Statements(t)

    method init( t, statements, control_type=ControlType.UNDEFINED )

    method init( existing:ControlStructure )
      prior.init( existing )
      if (existing.locals) locals = existing.locals.cloned
      if (existing.statements) statements = existing.statements.cloned

    method control_type->ControlType
      return @control_type

    method description->String
      return "ControlStructure($)" (%statements)

    method requires_cleanup->Logical
      return false

endClass

class LocalScope : ControlStructure
  METHODS
    method init( t:Token )
      prior.init( t, ControlType.LOCAL_SCOPE )

    method init( t:Token, statements:Cmd )
      prior.init( t, statements, ControlType.LOCAL_SCOPE )

    method init( existing:LocalScope )
      prior.init( existing )

    method description->String
      return "LocalScope($)"(%statements)
endClass

class Conditional : ControlStructure
  PROPERTIES
    condition      : Cmd

  METHODS
    method init( t:Token, control_type:ControlType )
      prior.init( t, control_type )

    method init( t:Token, condition, statements:Cmd, control_type=ControlType.UNDEFINED:ControlType )
      prior.init( t, statements, control_type )

    method init( existing:Conditional )
      prior.init( existing )
      if (existing.condition) condition = existing.condition.cloned

    method description->String
      return "Conditional($,$)" (%condition,%statements)

endClass

class Iterator : Conditional
  PROPERTIES
    control        : Cmd
    upkeep         : Cmd

  METHODS
    method init( t:Token, statements:Cmd, control_type:ControlType )
      init( t, Statements(t), null, statements, Statements(t), control_type )

    method init( t:Token, control, condition:Cmd, statements:Cmd, upkeep,
                 control_type=ControlType.UNDEFINED:ControlType )
     prior.init( t, condition, statements, control_type )

    method init( existing:Iterator )
      prior.init( existing )
      if (existing.control)        control = existing.control.cloned
      if (existing.upkeep)         upkeep  = existing.upkeep.cloned

    method catches_escape( escape_type:ControlType )->Logical
      if (@control_type != escape_type) return false
      catches_escape = true
      return true

    method description->String
      return "Iterator($,$,$,$)" (%control,%condition,%statements,%upkeep)


endClass

class ForEach : Cmd
  PROPERTIES
    control  : ForEachControl
    statements : Cmd

  METHODS
    method init( t, control, statements )

    method init( existing:ForEach )
      prior.init( existing )
      if (existing.control) control = existing.control.cloned
      if (existing.statements) statements = existing.statements.cloned

    method description->String
      return "ForEach($,$)" (%control,%statements)

endClass

class ForEachAt : Cmd
  PROPERTIES
    name : String

  METHODS
    method init( t, name )

    method init( existing:ForEachAt )
      prior.init( existing )
      name = existing.name

    method description->String
      return "ForEachAt($)" (%name)

    method to->Character
      return Cmd.to_character(name)

    method to->Int32:  return name
    method to->Logical: return name?
    method to->String: return name

endClass

class ForEachCollection : Cmd
  PROPERTIES
    name           : String
    data           : Cmd
    starting_index : Cmd
    step_size      : Cmd

  METHODS
    method init( t, name, data, starting_index, step_size )

    method init( existing:ForEachCollection )
      prior.init( existing )
      name = existing.name
      if (existing.data) data = existing.data.cloned
      if (existing.starting_index) starting_index = existing.starting_index.cloned
      if (existing.step_size) step_size = existing.step_size.cloned

    method description->String
      return "ForEachCollection($,$,$,$)" (%name,%data,%starting_index,%step_size)

endClass

class ForEachControl : Cmd
  PROPERTIES
    name        : String
    optional_at : ForEachAt
    collection  : ForEachCollection

  METHODS
    method init( t, name, optional_at, collection )

    method init( existing:ForEachControl )
      prior.init( existing )
      name = existing.name
      if (existing.optional_at) optional_at = existing.optional_at.cloned
      if (existing.collection) collection = existing.collection.cloned

    method description->String
      return "ForEachControl($,$,$)" (%name,%optional_at,%collection)

endClass

class ForEachInControl : ForEachControl
  METHODS
    method description->String
      return "ForEachInControl($,$,$)" (%name,%optional_at,%collection)

endClass

class ForEachOfControl : ForEachControl
  METHODS
    method description->String
      return "ForEachOfControl($,$,$)" (%name,%optional_at,%collection)

endClass

class Range : Binary
  METHODS
    method description->String
      return "Range($,$)" (%left,%right)

endClass

class RangeDownTo : Range
  METHODS
    method description->String
      return "RangeDownTo($,$)" (%left,%right)

endClass

class RangeDownToGreaterThan : Range
  METHODS
    method description->String
      return "RangeDownToGreaterThan($,$)" (%left,%right)

endClass

class RangeUpTo : Range
  METHODS
    method description->String
      return "RangeUpTo($,$)" (%left,%right)

endClass

class RangeUpToLessThan : Range
  METHODS
    method description->String
      return "RangeUpToLessThan($,$)" (%left,%right)

endClass

class Block : ControlStructure
  METHODS
    method init( t )
      prior.init( t, ControlType.BLOCK )

    method init( t, statements:Cmd )
      prior.init( t, statements, ControlType.BLOCK )

    method init( existing:Block )
      prior.init( existing )

    method description->String
      return "Block($)" (%statements)

endClass

class Stepper : Cmd
  PROPERTIES
    operand : Cmd

  METHODS
    method init( t, operand )

    method init( existing:Stepper )
      prior.init( existing )
      if (existing.operand) operand = existing.operand.cloned

    method description->String
      return "Stepper($)" (%operand)

endClass

class Decrement : Stepper
  METHODS
    method description->String
      return "Decrement($)" (%operand)

endClass

class Increment : Stepper
  METHODS
    method description->String
      return "Increment($)" (%operand)

endClass

class If : Conditional
  PROPERTIES
    cmd_else : If

  METHODS
    method init( t, condition, statements:Cmd, cmd_else )
      prior.init( t, condition, statements, ControlType.IF )

    method init( existing:If )
      prior.init( existing )
      if (existing.cmd_else) cmd_else = existing.cmd_else.cloned

    method description->String
      return "If($,$,$)" (%condition,%statements,%cmd_else)

endClass

class Return : Cmd
  PROPERTIES
    result : Cmd

  METHODS
    method init( t, result )

    method init( existing:Return )
      prior.init( existing )
      if (existing.result) result = existing.result.cloned

    method description->String
      return "Return($)" (%result)

endClass

class CallProcedure : Cmd
  PROPERTIES
    info : Procedure
    args : Cmd

  METHODS
    method init( t, args )

    method init( t, info, args )

    method init( existing:CallProcedure )
      prior.init( existing )
      info = existing.info
      if (existing.args) args = existing.args.cloned

    method description->String
      return "CallProcedure($)" (%args)

endClass

class CallRoutine : CallProcedure
  METHODS
    method description->String
      return "CallRoutine($,$)" (%info,%args)

endClass

class BitwiseNot : Unary
  METHODS
    method description->String
      return "BitwiseNot($)" (%operand)

endClass

class LiteralLogical : Literal
  PROPERTIES
    value : Logical

  METHODS
    method init( t, value )

    method init( existing:LiteralLogical )
      prior.init( existing )
      value = existing.value

    method description->String
      return "LiteralLogical($)" (%value)

    method to->Int32:   return which{value:1 || 0}
    method to->Logical: return value
    method to->String:  return which{value:"true" || "false"}

endClass

class LiteralPi : Literal
  METHODS
    method description->String
      return "LiteralPi"
endClass

class Convert( t, operand:Cmd ) : Cmd
  METHODS
    method init( existing:Convert )
      if (existing.operand) operand = existing.operand.cloned

    method description->String
      return "Convert($)" (%operand)

endClass

class ConvertToByte : Convert
  METHODS
    method description->String
      return "ConvertToByte($)" (%operand)

endClass

class ConvertToCharacter : Convert
  METHODS
    method description->String
      return "ConvertToCharacter($)" (%operand)

endClass

class ConvertToInt32 : Convert
  METHODS
    method description->String
      return "ConvertToInt32($)" (%operand)

endClass

class ConvertToInt64 : Convert
  METHODS
    method description->String
      return "ConvertToInt64($)" (%operand)

endClass

class ConvertToLogical : Convert
  METHODS
    method description->String
      return "ConvertToLogical($)" (%operand)

endClass

class ConvertToReal32 : Convert
  METHODS
    method description->String
      return "ConvertToReal32($)" (%operand)

endClass

class ConvertToReal64 : Convert
  METHODS
    method description->String
      return "ConvertToReal64($)" (%operand)

endClass

class UsesModule : Cmd
  PROPERTIES
    path       : Cmd
    attributes : Attributes

  METHODS
    method init( t, path, attributes )

    method init( existing:UsesModule )
      prior.init( existing )
      if (existing.path) path = existing.path.cloned
      if (existing.attributes) attributes = existing.attributes.cloned

    method description->String
      return "UsesModule($,$)" (%path,%attributes)

endClass

class AttributeExport : Cmd
  METHODS
    method description->String
      return "AttributeExport"
endClass

class DefineModule : Cmd
  PROPERTIES
    name       : String
    attributes : Attributes

  METHODS
    method init( t, name, attributes )

    method init( existing:DefineModule )
      prior.init( existing )
      name = existing.name
      if (existing.attributes) attributes = existing.attributes.cloned

    method description->String
      return "DefineModule($,$)" (%name,%attributes)

endClass


class ModuleQualifiedID : Cmd
  PROPERTIES
    context : Cmd
    name    : String

  METHODS
    method init( t, context, name )

    method init( existing:ModuleQualifiedID )
      prior.init( existing )
      if (existing.context) context = existing.context.cloned
      name = existing.name

    method description->String
      return "ModuleQualifiedID($,$)" (%context,%name)

    method to->String
      return "$::$"(context->String,name)

endClass

class NativeExpression : Cmd
  PROPERTIES
    content     : String
    result_type : Type

  METHODS
    method init( t, content, result_type )

    method init( existing:NativeExpression )
      prior.init( existing )
      content = existing.content
      if (existing.result_type) result_type = existing.result_type.cloned

    method description->String
      return "NativeExpression($,$)" (%content,%result_type)

endClass

class NativeStatement : Cmd
  PROPERTIES
    content : String

  METHODS
    method init( t, content )

    method init( existing:NativeStatement )
      prior.init( existing )
      content = existing.content

    method description->String
      return "NativeStatement($)" (%content)

    method to->Character
      return Cmd.to_character(content)

    method to->Int32:  return content
    method to->Logical: return content?
    method to->String: return content

endClass

class CreateObject : Cmd
  PROPERTIES
    of_type : Type
    m_init  : Method
    args    : Cmd

  METHODS
    method init( t, of_type, m_init, args )
      # Real constructor

    method init( t, of_type, args )
      # Froley constructor

    method init( existing:CreateObject )
      prior.init( existing )
      if (existing.of_type) of_type = existing.of_type.cloned
      if (existing.args) args = existing.args.cloned

    method description->String
      return "CreateObject($,$)" (%of_type,%args)

endClass

class TypeContext : Cmd
  PROPERTIES
    type : Type

  METHODS
    method init( t, type )

    method init( existing:TypeContext )
      prior.init( existing )
      if (existing.type) type = existing.type.cloned

    method description->String
      return "TypeContext($)" (%type)

endClass

class CallGlobalMethod : CallProcedure
  METHODS
    method description->String
      return "CallGlobalMethod($,$,$)" (info->(as GlobalMethod).type_context,%info,%args)

endClass

class AddAndAssign : OpAndAssign
  METHODS
    method description->String
      return "AddAndAssign($,$)" (%target,%operand)

endClass

class OpAndAssign : Cmd
  PROPERTIES
    target  : Cmd
    operand : Cmd

  METHODS
    method init( t, target, operand )

    method init( existing:OpAndAssign )
      prior.init( existing )
      if (existing.target) target = existing.target.cloned
      if (existing.operand) operand = existing.operand.cloned

    method description->String
      return "OpAndAssign($,$)" (%target,%operand)

endClass

class LiteralNull : Literal
  PROPERTIES
    of_type : Type

  METHODS
    method init( t )

    method init( t, of_type )

    method init( existing:LiteralNull )
      t = existing.t
      of_type = existing.of_type

    method description->String
      return "LiteralNull"
endClass

class Routine : Procedure
  METHODS
    method organize( organizer=null:MethodOrganizer )
      if (is_organized) return

      ensure organizer( module_context )
      prior.organize( organizer )

      module_context.add( this )
endClass

class GlobalMethod : Procedure
  PROPERTIES
    type_context : Type

  METHODS
    method init( t:Token, type_context, name:String )
      prior.init( t, type_context.module_context, name, null, null, null, null )
      this.attributes.is_global = true

    method init( t:Token, name:String, parameters=null:Parameters, return_type=null:Type,
                 attributes=null:Attributes, body=null:LocalScope )
      prior.init( t, name, parameters, return_type, attributes, body )
      this.attributes.is_global = true

    method init( existing:GlobalMethod )
      prior.init( existing )
      type_context = existing.@type_context

    method context_signature->String
      return "$::$.$"(module_context,type_context,signature)

    method organize( organizer=null:MethodOrganizer )
      if (is_organized) return

      ensure organizer( module_context )
      prior.organize( organizer )

      @type_context.add( this )

    method type_context->Type
      return @type_context

endClass

class Method : Procedure
  PROPERTIES
    type_context : Type
    id           : Int32

  METHODS
    method init( t:Token, name:String, parameters=null:Parameters, return_type=null:Type,
        attributes=null:Attributes, body=null:LocalScope )
      init( t, null, name, parameters, return_type, attributes, body )

    method init( t:Token, module_context:Module, name:String, parameters=null:Parameters, return_type=null:Type,
        attributes=null:Attributes, body=null:LocalScope )
      prior.init( t, module_context, name, parameters, return_type, attributes, body )

    method init( t:Token, type_context, name:String )
      prior.init( t, type_context.module_context, name, null, null, null, null )

    method init( existing:Method )
      prior.init( existing )
      type_context = existing.@type_context

    method context_signature->String
      return "$::$.$"(module_context,@type_context,signature)

    method organize( organizer=null:MethodOrganizer )
      if (is_organized) return

      ensure organizer( module_context )
      temporarily organizer.this_type = @type_context
        prior.organize( organizer )
      endTemporarily

      @type_context.add( this )

    method type_context->Type
      return @type_context

endClass

class CallDynamicMethod : CallProcedure
  PROPERTIES
    context : Cmd

  METHODS
    method init( t, context, args )

    method init( t, context, info, args )

    method init( existing:CallDynamicMethod )
      prior.init( existing )
      if (existing.context) context = existing.context.cloned

    method description->String
      return "CallDynamicMethod($,$,$)" (%context,%info,%args)

endClass

class CallThisDynamicMethod : CallProcedure
  METHODS
    method init( t, args )

    method init( t, info, args )

    method init( existing:CallThisDynamicMethod )
      prior.init( existing )

    method description->String
      return "CallThisDynamicMethod($,$)" (info,%args)

endClass

class GetProperty : Cmd
  PROPERTIES
    context : Cmd
    info    : Property

  METHODS
    method init( t, context, info )

    method init( existing:GetProperty )
      prior.init( existing )
      if (existing.context) context = existing.context.cloned
      if (existing.info) info = existing.info.cloned

    method description->String
      return "GetProperty($,$)" (%context,%info)

endClass

class GetThisProperty : Cmd
  PROPERTIES
    info : Property

  METHODS
    method init( t, info )

    method init( existing:GetThisProperty )
      prior.init( existing )
      if (existing.info) info = existing.info.cloned

    method description->String
      return "GetThisProperty($)" (%info)

endClass

class SetProperty : Cmd
  PROPERTIES
    context   : Cmd
    info      : Property
    new_value : Cmd

  METHODS
    method init( context, info, new_value )
      t = context.t

    method init( t, context, info, new_value )

    method init( existing:SetProperty )
      prior.init( existing )
      if (existing.context) context = existing.context.cloned
      if (existing.info) info = existing.info.cloned
      if (existing.new_value) new_value = existing.new_value.cloned

    method description->String
      return "SetProperty($,$,$)" (%context,%info,%new_value)

endClass

class SetThisProperty : Cmd
  PROPERTIES
    info      : Property
    new_value : Cmd

  METHODS
    method init( info, new_value )
      t = info.t

    method init( t, info, new_value )

    method init( existing:SetThisProperty )
      prior.init( existing )
      if (existing.info) info = existing.info.cloned
      if (existing.new_value) new_value = existing.new_value.cloned

    method description->String
      return "SetThisProperty($,$)" (%info,%new_value)

endClass

class Is : Binary
  METHODS
    method description->String
      return "Is($,$)" (%left,%right)

endClass

class IsNot : Binary
  METHODS
    method description->String
      return "IsNot($,$)" (%left,%right)

endClass

class AttributeEssential : Cmd
  METHODS
    method description->String
      return "AttributeEssential"
endClass

class AttributeSingleton : Cmd
  METHODS
    method description->String
      return "AttributeSingleton"
endClass

class GetSingleton : Cmd
  PROPERTIES
    type : Type

  METHODS
    method init( t, type )

    method init( existing:GetSingleton )
      prior.init( existing )
      if (existing.type) type = existing.type.cloned

    method description->String
      return "GetSingleton($)" (%type)

endClass

class ConvertToType : Cmd
  PROPERTIES
    operand : Cmd
    to_type : Type

  METHODS
    method init( t, operand, to_type )

    method init( existing:ConvertToType )
      prior.init( existing )
      if (existing.operand) operand = existing.operand.cloned
      if (existing.to_type) to_type = existing.to_type.cloned

    method description->String
      return "ConvertToType($,$)" (%operand,%to_type)

endClass


class CreateObjectAndSetLocal : Cmd
  PROPERTIES
    of_type : Type
    info    : Local  # local ref to store the new object

  METHODS
    method init( t, of_type, info )

    method init( existing:CreateObjectAndSetLocal )
      prior.init( existing )
      if (existing.of_type) of_type = existing.of_type.cloned
      if (existing.info)    info = existing.info.cloned

    method description->String
      return "CreateObjectAndSetLocal($,$)" (%of_type,%info)

endClass

class Definition : Cmd
  PROPERTIES
    name  : String
    value : Cmd

  METHODS
    method init( t, name, value )

    method init( existing:Definition )
      prior.init( existing )
      name = existing.name
      if (existing.value) value = existing.value.cloned

    method description->String
      return "Definition($,$)" (%name,%value)

endClass

class Throw : Cmd
  PROPERTIES
    exception : Cmd

  METHODS
    method init( t, exception )

    method init( existing:Throw )
      prior.init( existing )
      if (existing.exception) exception = existing.exception.cloned

    method description->String
      return "Throw($)" (%exception)

endClass

class Catch : ControlStructure
  PROPERTIES
    var_name       : String
    exception_type : Type

  METHODS
    method init( t, var_name, exception_type, statements:Cmd )
      prior.init( t, statements, ControlType.CATCH )

    method init( existing:Catch )
      prior.init( existing )
      var_name = existing.var_name
      if (existing.exception_type) exception_type = existing.exception_type.cloned

    method description->String
      return "Catch($,$,$)" (%var_name,%exception_type,%statements)

endClass

class Try : ControlStructure
  PROPERTIES
    catches : Catches

  METHODS
    method init( t, statements, catches )
      prior.init( t, statements, ControlType.TRY )

    method init( existing:Try )
      prior.init( existing )
      if (existing.catches) catches = existing.catches.cloned->(as Catches)

    method description->String
      return "Try($,$)" (%statements,%catches)

endClass

class Catches : CmdList
  METHODS
    method description->String
      return "Catches" + list_description

    method get( index:Int32 )->Catch
      return list[index]->(as Catch)
endClass


class DummyInitialValue : Cmd [singleton]
  METHODS
    method description->String
      return "DummyInitialValue"
endClass

class ReturnOnException : Cmd
  METHODS
    method description->String
      return "ReturnOnException"
endClass

class Power : Binary
  METHODS
    method description->String
      return "Power($,$)" (%left,%right)

endClass

class AttributePrimitive : Cmd
  METHODS
    method description->String
      return "AttributePrimitive"
endClass

class This : Cmd
  PROPERTIES
    this_type : Type

  METHODS
    method init( t )

    method init( t, this_type )

    method init( other:This )
      prior.init( other )
      this_type = other.this_type

    method description->String
      return "This($)"(this_type)
endClass

class TypeList : CmdList
  METHODS
    method description->String
      return "TypeList" + list_description

    method get( index:Int32 )->Type
      return list[index]->(as Type)
endClass

class TemplateArgs : CmdList
  METHODS
    method description->String
      return "TemplateArgs" + list_description

    method get( index:Int32 )->TokenList
      return list[index]->(as TokenList)
endClass

class AttributeAspect : Cmd
  METHODS
    method description->String
      return "AttributeAspect"
endClass

class Parameters : CmdList
  METHODS
    method description->String
      return "Parameters" + list_description

    method get( index:Int32 )->Local
      return list[index]->(as Local)
endClass

class CallStaticMethod : CallProcedure
  PROPERTIES
    context : Cmd

  METHODS
    method init( t, context, args )

    method init( t, context, info, args )

    method init( existing:CallStaticMethod )
      prior.init( existing )
      if (existing.context) context = existing.context.cloned

    method description->String
      return "CallStaticMethod($,$,$)" (%context,%info,%args)

endClass

class CallThisStaticMethod : CallProcedure
  METHODS
    method init( t, args )

    method init( t, info, args )

    method init( existing:CallThisStaticMethod )
      prior.init( existing )

    method description->String
      return "CallThisStaticMethod($,$)" (%info,%args)

endClass

class AttributeAppend : Cmd
  METHODS
    method description->String
      return "AttributeAppend"
endClass

class AttributeInsert : Cmd
  METHODS
    method description->String
      return "AttributeInsert"
endClass

class InlineWhich : Cmd
  PROPERTIES
    cases       : InlineWhichCases
    result_type : Type

  METHODS
    method init( t, cases )

    method init( existing:InlineWhich )
      prior.init( existing )
      if (existing.cases) cases = existing.cases.cloned

    method description->String
      return "InlineWhich($)" (%cases)

    method type->Type
      return result_type

endClass

class InlineWhichCase : Cmd
  PROPERTIES
    condition : Cmd
    value     : Cmd

  METHODS
    method init( t, condition, value )

    method init( existing:InlineWhichCase )
      prior.init( existing )
      if (existing.condition) condition = existing.condition.cloned
      if (existing.value) value = existing.value.cloned

    method description->String
      return "InlineWhichCase($,$)" (%condition,%value)

endClass

class InlineWhichCases : CmdList
  METHODS
    method description->String
      return "InlineWhichCases" + list_description

    method get( index:Int32 )->InlineWhichCase
      return list[index]->(as InlineWhichCase)
endClass

#class DiscardResult : Cmd
#  PROPERTIES
#    operand : Cmd
#
#  METHODS
#    method init( t, operand )
#
#    method init( existing:DiscardResult )
#      prior.init( existing )
#      if (existing.operand) operand = existing.operand.cloned
#
#    method description->String
#      return "DiscardResult($)" (%operand)
#
#endClass

class AttributeCompound : Cmd
  METHODS
    method description->String
      return "AttributeCompound"
endClass

class CreateCompound : Cmd
  PROPERTIES
    of_type : Type

  METHODS
    method init( t )

    method init( t, of_type )

    method init( existing:CreateCompound )
      prior.init( existing )

    method description->String
      return "CreateCompound"
endClass

class IsType : Cmd
  PROPERTIES
    operand : Cmd
    compare_type : Type

  METHODS
    method init( t, operand, compare_type )

    method init( existing:IsType )
      prior.init( existing )
      if (existing.operand) operand = existing.operand.cloned
      if (existing.compare_type) compare_type = existing.compare_type.cloned

    method description->String
      return "IsType($,$)" (%operand,%compare_type)

endClass

class InstanceOf : Cmd
  PROPERTIES
    operand      : Cmd
    compare_type : Type

  METHODS
    method init( t, operand, compare_type )

    method init( existing:InstanceOf )
      prior.init( existing )
      if (existing.operand) operand = existing.operand.cloned
      if (existing.compare_type) compare_type = existing.compare_type.cloned

    method description->String
      return "InstanceOf($,$)" (%operand,%compare_type)

endClass

class IsCompound : Cmd
  PROPERTIES
    operand : Cmd

  METHODS
    method init( t, operand )

    method init( existing:IsCompound )
      prior.init( existing )
      if (existing.operand) operand = existing.operand.cloned

    method description->String
      return "IsCompound($)" (%operand)

endClass

class IsPrimitive : Cmd
  PROPERTIES
    operand : Cmd

  METHODS
    method init( t, operand )

    method init( existing:IsPrimitive )
      prior.init( existing )
      if (existing.operand) operand = existing.operand.cloned

    method description->String
      return "IsPrimitive($)" (%operand)

endClass

class IsReference : Cmd
  PROPERTIES
    operand : Cmd

  METHODS
    method init( t, operand )

    method init( existing:IsReference )
      prior.init( existing )
      if (existing.operand) operand = existing.operand.cloned

    method description->String
      return "IsReference($)" (%operand)

endClass


class AttributeReturnsThis : Cmd
  METHODS
    method description->String
      return "AttributeReturnsThis"
endClass

class ContextBlock : Cmd
  PROPERTIES
    context  : Cmd
    commands : Cmd

  METHODS
    method init( t, context, commands=null )
      if (not commands) commands = Args(t)

    method init( existing:ContextBlock )
      prior.init( existing )
      if (existing.context) context = existing.context.cloned
      if (existing.commands) commands = existing.commands.cloned

    method add( cmd:Cmd )
      commands.add( cmd )

    method add( cmd:String, args=null:Args )
      commands.add( ContextAccess( t, ContextBlockContext(t), cmd, args ) )

    method description->String
      return "ContextBlock($,$)" (%context,%commands)

endClass

class ContextBlockContext : Cmd
  METHODS
    method description->String
      return "ContextBlockContext"
endClass

class NamedArg : Cmd
  PROPERTIES
    name       : String
    value      : Cmd
    is_zero    : Logical
    is_forward : Logical

  METHODS
    method init( t, name, value, &zero, &forward )
      is_zero = zero
      is_forward = forward

    method init( existing:NamedArg )
      prior.init( existing )
      name = existing.name
      if (existing.value) value = existing.value.cloned
      is_zero = existing.is_zero
      is_forward = existing.is_forward

    method description->String
      return "NamedArg($,$)" (%name,%value)

endClass

class DefaultArg : Unary
  METHODS
    method description->String
      return "DefaultArg($)" (%operand)

endClass

class Loop : Cmd
  PROPERTIES
    loop_count : Cmd
    statements : Cmd

  METHODS
    method init( t, loop_count, statements )

    method init( existing:Loop )
      prior.init( existing )
      if (existing.loop_count) loop_count = existing.loop_count.cloned
      if (existing.statements) statements = existing.statements.cloned

    method description->String
      return "Loop($,$)" (%loop_count,%statements)

endClass

class GlobalPropertyDeclarations : Cmd
  PROPERTIES
    declarations : Cmd
    type         : Type
    attributes   : Attributes

  METHODS
    method init( t, declarations, type, attributes )

    method init( existing:GlobalPropertyDeclarations )
      prior.init( existing )
      if (existing.declarations) declarations = existing.declarations.cloned
      if (existing.type) type = existing.type.cloned
      if (existing.attributes) attributes = existing.attributes.cloned

    method description->String
      return "GlobalPropertyDeclarations($,$,$)" (%declarations,%type,%attributes)

endClass

class TypeAccess : Cmd
  PROPERTIES
    of_type : Type
    args    : Cmd

  METHODS
    method init( t, of_type, args )

    method init( existing:TypeAccess )
      prior.init( existing )
      if (existing.of_type) of_type = existing.of_type.cloned
      if (existing.args) args = existing.args.cloned

    method description->String
      return "TypeAccess($,$)" (%of_type,%args)

endClass

class GetGlobalProperty : Cmd
  PROPERTIES
    info : Property

  METHODS
    method init( t, info )

    method init( existing:GetGlobalProperty )
      prior.init( existing )
      if (existing.info) info = existing.info.cloned

    method description->String
      return "GetGlobalProperty($)" (%info)

endClass

class SetGlobalProperty : Cmd
  PROPERTIES
    info      : Property
    new_value : Cmd

  METHODS
    method init( info, new_value )
      t = info.t

    method init( t, info, new_value )

    method init( existing:SetGlobalProperty )
      prior.init( existing )
      if (existing.info) info = existing.info.cloned
      if (existing.new_value) new_value = existing.new_value.cloned

    method description->String
      return "SetGlobalProperty($,$)" (%info,%new_value)

endClass

class ContextDirectAccess : Cmd
  PROPERTIES
    context : Cmd
    name    : String

  METHODS
    method init( t, context, name )

    method init( existing:ContextDirectAccess )
      prior.init( existing )
      if (existing.context) context = existing.context.cloned
      name = existing.name

    method description->String
      return "ContextDirectAccess($,$)" (%context,%name)

endClass

class DirectAccess : Cmd
  PROPERTIES
    name : String

  METHODS
    method init( t, name )

    method init( existing:DirectAccess )
      prior.init( existing )
      name = existing.name

    method description->String
      return "DirectAccess($)" (%name)

    method to->Character
      return Cmd.to_character(name)

    method to->Int32:  return name
    method to->Logical: return name?
    method to->String: return name

endClass

class Logicalize : Unary
  METHODS
    method description->String
      return "Logicalize($)" (%operand)

endClass

class WideningCast : Cmd
  PROPERTIES
    operand : Cmd
    to_type : Type

  METHODS
    method init( t, operand, to_type )

    method init( existing:WideningCast )
      prior.init( existing )
      if (existing.operand) operand = existing.operand.cloned
      if (existing.to_type) to_type = existing.to_type.cloned

    method description->String
      return "WideningCast($,$)" (%operand,%to_type)

endClass

class Logicalized : Unary
  METHODS
    method description->String
      return "Logicalized($)" (%operand)

endClass

class CompareOp : Compare
  METHODS
    method description->String
      return "CompareOp($,$)" (%left,%right)

endClass

class UsedResource : Cmd
  PROPERTIES
    name     : String
    resource : Cmd

  METHODS
    method init( t, name, resource )

    method init( existing:UsedResource )
      prior.init( existing )
      name = existing.name
      if (existing.resource) resource = existing.resource.cloned

    method description->String
      return "UsedResource($,$)" (%name,%resource)

endClass

class UsedResources : CmdList
  METHODS
    method description->String
      return "UsedResources" + list_description

    method get( index:Int32 )->UsedResource
      return list[index]->(as UsedResource)
endClass

class Use : ControlStructure
  PROPERTIES
    resources  : UsedResources
    statements : Cmd

  METHODS
    method init( t, resources, statements )

    method init( existing:Use )
      prior.init( existing )
      if (existing.resources) resources = existing.resources.cloned
      if (existing.statements) statements = existing.statements.cloned

    method description->String
      return "Use($,$)" (%resources,%statements)

    method requires_cleanup->Logical
      return true

endClass

class CleanupBlock : ControlStructure
  PROPERTIES
    cleanup : Cmd

  METHODS
    method init( t, control_type:ControlType )
      prior.init( t, control_type )
      cleanup = Statements(t)

    method init( t, statements, cleanup=null )
      cleanup = Statements(t)

    method init( existing:CleanupBlock )
      prior.init( existing )
      if (existing.cleanup) cleanup = existing.cleanup.cloned

    method description->String
      return "CleanupBlock($,$)" (%statements,%cleanup)

    method requires_cleanup->Logical
      return true
endClass

class While : Cmd
  PROPERTIES
    condition  : Cmd
    statements : Cmd

  METHODS
    method init( t, condition, statements )

    method init( existing:While )
      prior.init( existing )
      if (existing.condition) condition = existing.condition.cloned
      if (existing.statements) statements = existing.statements.cloned

    method description->String
      return "While($,$)" (%condition,%statements)

endClass

class LiteralList : CmdList
  METHODS
    method description->String
      return "LiteralList" + list_description
endClass

class AddAndAssignGlobalProperty : ResolvedOpAndAssignProperty
  METHODS
    method description->String
      return "AddAndAssignGlobalProperty($,$)" (%info,%operand)

endClass

class AddAndAssignLocal : ResolvedOpAndAssignLocal
  METHODS
    method description->String
      return "AddAndAssignLocal($,$)" (%info,%operand)

endClass

class AddAndAssignProperty : ResolvedOpAndAssignProperty
  PROPERTIES
    context : Cmd

  METHODS
    method init( t, context, info, operand )

    method init( existing:AddAndAssignProperty )
      prior.init( existing )
      if (existing.context) context = existing.context.cloned

    method description->String
      return "AddAndAssignProperty($,$,$)" (%context,%info,%operand)

endClass

class AddAndAssignThisProperty : ResolvedOpAndAssignProperty
  METHODS
    method description->String
      return "AddAndAssignThisProperty($,$)" (%info,%operand)

endClass

class BitShiftLeftAndAssign : OpAndAssign
  METHODS
    method description->String
      return "BitShiftLeftAndAssign($,$)" (%target,%operand)

endClass

class BitShiftLeftAndAssignGlobalProperty : ResolvedOpAndAssignProperty
  METHODS
    method description->String
      return "BitShiftLeftAndAssignGlobalProperty($,$)" (%info,%operand)

endClass

class BitShiftLeftAndAssignLocal : ResolvedOpAndAssignLocal
  METHODS
    method description->String
      return "BitShiftLeftAndAssignLocal($,$)" (%info,%operand)

endClass

class BitShiftLeftAndAssignProperty : ResolvedOpAndAssignProperty
  PROPERTIES
    context : Cmd

  METHODS
    method init( t, context, info, operand )

    method init( existing:BitShiftLeftAndAssignProperty )
      prior.init( existing )
      if (existing.context) context = existing.context.cloned

    method description->String
      return "BitShiftLeftAndAssignProperty($,$,$)" (%context,%info,%operand)

endClass

class BitShiftLeftAndAssignThisProperty : ResolvedOpAndAssignProperty
  METHODS
    method description->String
      return "BitShiftLeftAndAssignThisProperty($,$)" (%info,%operand)

endClass

class BitShiftRightAndAssign : OpAndAssign
  METHODS
    method description->String
      return "BitShiftRightAndAssign($,$)" (%target,%operand)

endClass

class BitShiftRightXAndAssign : OpAndAssign
  METHODS
    method description->String
      return "BitShiftRightXAndAssign($,$)" (%target,%operand)

endClass

class BitShiftRightXAndAssignGlobalProperty : ResolvedOpAndAssignProperty
  METHODS
    method description->String
      return "BitShiftRightXAndAssignGlobalProperty($,$)" (%info,%operand)

endClass

class BitShiftRightXAndAssignLocal : ResolvedOpAndAssignLocal
  METHODS
    method description->String
      return "BitShiftRightXAndAssignLocal($,$)" (%info,%operand)

endClass

class BitShiftRightXAndAssignProperty : ResolvedOpAndAssignProperty
  PROPERTIES
    context : Cmd

  METHODS
    method init( t, context, info, operand )

    method init( existing:BitShiftRightXAndAssignProperty )
      prior.init( existing )
      if (existing.context) context = existing.context.cloned

    method description->String
      return "BitShiftRightXAndAssignProperty($,$,$)" (%context,%info,%operand)

endClass

class BitShiftRightXAndAssignThisProperty : ResolvedOpAndAssignProperty
  METHODS
    method description->String
      return "BitShiftRightXAndAssignThisProperty($,$)" (%info,%operand)

endClass

class BitwiseAndAndAssign : OpAndAssign
  METHODS
    method description->String
      return "BitwiseAndAndAssign($,$)" (%target,%operand)

endClass

class BitwiseAndAndAssignGlobalProperty : ResolvedOpAndAssignProperty
  METHODS
    method description->String
      return "BitwiseAndAndAssignGlobalProperty($,$)" (%info,%operand)

endClass

class BitwiseAndAndAssignLocal : ResolvedOpAndAssignLocal
  METHODS
    method description->String
      return "BitwiseAndAndAssignLocal($,$)" (%info,%operand)

endClass

class BitwiseAndAndAssignProperty : ResolvedOpAndAssignProperty
  PROPERTIES
    context : Cmd

  METHODS
    method init( t, context, info, operand )

    method init( existing:BitwiseAndAndAssignProperty )
      prior.init( existing )
      if (existing.context) context = existing.context.cloned

    method description->String
      return "BitwiseAndAndAssignProperty($,$,$)" (%context,%info,%operand)

endClass

class BitwiseAndAndAssignThisProperty : ResolvedOpAndAssignProperty
  METHODS
    method description->String
      return "BitwiseAndAndAssignThisProperty($,$)" (%info,%operand)

endClass

class BitwiseOrAndAssign : OpAndAssign
  METHODS
    method description->String
      return "BitwiseOrAndAssign($,$)" (%target,%operand)

endClass

class BitwiseOrAndAssignGlobalProperty : ResolvedOpAndAssignProperty
  METHODS
    method description->String
      return "BitwiseOrAndAssignGlobalProperty($,$)" (%info,%operand)

endClass

class BitwiseOrAndAssignLocal : ResolvedOpAndAssignLocal
  METHODS
    method description->String
      return "BitwiseOrAndAssignLocal($,$)" (%info,%operand)

endClass

class BitwiseOrAndAssignProperty : ResolvedOpAndAssignProperty
  PROPERTIES
    context : Cmd

  METHODS
    method init( t, context, info, operand )

    method init( existing:BitwiseOrAndAssignProperty )
      prior.init( existing )
      if (existing.context) context = existing.context.cloned

    method description->String
      return "BitwiseOrAndAssignProperty($,$,$)" (%context,%info,%operand)

endClass

class BitwiseOrAndAssignThisProperty : ResolvedOpAndAssignProperty
  METHODS
    method description->String
      return "BitwiseOrAndAssignThisProperty($,$)" (%info,%operand)

endClass

class BitwiseXorAndAssign : OpAndAssign
  METHODS
    method description->String
      return "BitwiseXorAndAssign($,$)" (%target,%operand)

endClass

class BitwiseXorAndAssignGlobalProperty : ResolvedOpAndAssignProperty
  METHODS
    method description->String
      return "BitwiseXorAndAssignGlobalProperty($,$)" (%info,%operand)

endClass

class BitwiseXorAndAssignLocal : ResolvedOpAndAssignLocal
  METHODS
    method description->String
      return "BitwiseXorAndAssignLocal($,$)" (%info,%operand)

endClass

class BitwiseXorAndAssignProperty : ResolvedOpAndAssignProperty
  PROPERTIES
    context : Cmd

  METHODS
    method init( t, context, info, operand )

    method init( existing:BitwiseXorAndAssignProperty )
      prior.init( existing )
      if (existing.context) context = existing.context.cloned

    method description->String
      return "BitwiseXorAndAssignProperty($,$,$)" (%context,%info,%operand)

endClass

class BitwiseXorAndAssignThisProperty : ResolvedOpAndAssignProperty
  METHODS
    method description->String
      return "BitwiseXorAndAssignThisProperty($,$)" (%info,%operand)

endClass

class DivideAndAssign : OpAndAssign
  METHODS
    method description->String
      return "DivideAndAssign($,$)" (%target,%operand)

endClass

class DivideAndAssignGlobalProperty : ResolvedOpAndAssignProperty
  METHODS
    method description->String
      return "DivideAndAssignGlobalProperty($,$)" (%info,%operand)

endClass

class DivideAndAssignLocal : ResolvedOpAndAssignLocal
  METHODS
    method description->String
      return "DivideAndAssignLocal($,$)" (%info,%operand)

endClass

class DivideAndAssignProperty : ResolvedOpAndAssignProperty
  PROPERTIES
    context : Cmd

  METHODS
    method init( t, context, info, operand )

    method init( existing:DivideAndAssignProperty )
      prior.init( existing )
      if (existing.context) context = existing.context.cloned

    method description->String
      return "DivideAndAssignProperty($,$,$)" (%context,%info,%operand)

endClass

class DivideAndAssignThisProperty : ResolvedOpAndAssignProperty
  METHODS
    method description->String
      return "DivideAndAssignThisProperty($,$)" (%info,%operand)

endClass

class ModAndAssign : OpAndAssign
  METHODS
    method description->String
      return "ModAndAssign($,$)" (%target,%operand)

endClass

class MultiplyAndAssign : OpAndAssign
  METHODS
    method description->String
      return "MultiplyAndAssign($,$)" (%target,%operand)

endClass

class MultiplyAndAssignGlobalProperty : ResolvedOpAndAssignProperty
  METHODS
    method description->String
      return "MultiplyAndAssignGlobalProperty($,$)" (%info,%operand)

endClass

class MultiplyAndAssignLocal : ResolvedOpAndAssignLocal
  METHODS
    method description->String
      return "MultiplyAndAssignLocal($,$)" (%info,%operand)

endClass

class MultiplyAndAssignProperty : ResolvedOpAndAssignProperty
  PROPERTIES
    context : Cmd

  METHODS
    method init( t, context, info, operand )

    method init( existing:MultiplyAndAssignProperty )
      prior.init( existing )
      if (existing.context) context = existing.context.cloned

    method description->String
      return "MultiplyAndAssignProperty($,$,$)" (%context,%info,%operand)

endClass

class MultiplyAndAssignThisProperty : ResolvedOpAndAssignProperty
  METHODS
    method description->String
      return "MultiplyAndAssignThisProperty($,$)" (%info,%operand)

endClass

class PowerAndAssign : OpAndAssign
  METHODS
    method description->String
      return "PowerAndAssign($,$)" (%target,%operand)

endClass

class ResolvedOpAndAssignLocal : Cmd
  PROPERTIES
    info    : Local
    operand : Cmd

  METHODS
    method init( t, info, operand )

    method init( existing:ResolvedOpAndAssignLocal )
      prior.init( existing )
      if (existing.info) info = existing.info.cloned
      if (existing.operand) operand = existing.operand.cloned

    method description->String
      return "ResolvedOpAndAssignLocal($,$)" (%info,%operand)

endClass

class ResolvedOpAndAssignProperty : Cmd
  PROPERTIES
    info    : Property
    operand : Cmd

  METHODS
    method init( t, info, operand )

    method init( existing:ResolvedOpAndAssignProperty )
      prior.init( existing )
      if (existing.info) info = existing.info.cloned
      if (existing.operand) operand = existing.operand.cloned

    method description->String
      return "ResolvedOpAndAssignProperty($,$)" (%info,%operand)

endClass

class SubtractAndAssign : OpAndAssign
  METHODS
    method description->String
      return "SubtractAndAssign($,$)" (%target,%operand)

endClass

class SubtractAndAssignGlobalProperty : ResolvedOpAndAssignProperty
  METHODS
    method description->String
      return "SubtractAndAssignGlobalProperty($,$)" (%info,%operand)

endClass

class SubtractAndAssignLocal : ResolvedOpAndAssignLocal
  METHODS
    method description->String
      return "SubtractAndAssignLocal($,$)" (%info,%operand)

endClass

class SubtractAndAssignProperty : ResolvedOpAndAssignProperty
  PROPERTIES
    context : Cmd

  METHODS
    method init( t, context, info, operand )

    method init( existing:SubtractAndAssignProperty )
      prior.init( existing )
      if (existing.context) context = existing.context.cloned

    method description->String
      return "SubtractAndAssignProperty($,$,$)" (%context,%info,%operand)

endClass

class SubtractAndAssignThisProperty : ResolvedOpAndAssignProperty
  METHODS
    method description->String
      return "SubtractAndAssignThisProperty($,$)" (%info,%operand)

endClass

class AccessAndAssign : Cmd
  PROPERTIES
    operand : Cmd

  METHODS
    method init( t, operand )

    method init( existing:AccessAndAssign )
      prior.init( existing )
      if (existing.operand) operand = existing.operand.cloned

    method description->String
      return "AccessAndAssign($)" (%operand)

endClass

class AccessAndAssignContext : Cmd
  PROPERTIES
    context : Cmd

  METHODS
    method init( t, context )

    method init( existing:AccessAndAssignContext )
      prior.init( existing )
      if (existing.context) context = existing.context.cloned

    method description->String
      return "AccessAndAssignContext($)" (%context)

endClass

class InlineForEach : Cmd
  PROPERTIES
    control : ForEachControl

  METHODS
    method init( t, control )

    method init( existing:InlineForEach )
      prior.init( existing )
      if (existing.control) control = existing.control.cloned

    method description->String
      return "InlineForEach($)" (%control)

endClass

class DecrementGlobalProperty : Cmd
  PROPERTIES
    info : Property

  METHODS
    method init( t, info )

    method init( existing:DecrementGlobalProperty )
      prior.init( existing )
      if (existing.info) info = existing.info.cloned

    method description->String
      return "DecrementGlobalProperty($)" (%info)

endClass

class DecrementLocal : Cmd
  PROPERTIES
    info : Local

  METHODS
    method init( t, info )

    method init( existing:DecrementLocal )
      prior.init( existing )
      if (existing.info) info = existing.info.cloned

    method description->String
      return "DecrementLocal($)" (%info)

endClass

class DecrementProperty : Cmd
  PROPERTIES
    context : Cmd
    info    : Property

  METHODS
    method init( t, context, info )

    method init( existing:DecrementProperty )
      prior.init( existing )
      if (existing.context) context = existing.context.cloned
      if (existing.info) info = existing.info.cloned

    method description->String
      return "DecrementProperty($,$)" (%context,%info)

endClass

class DecrementThisProperty : Cmd
  PROPERTIES
    info : Property

  METHODS
    method init( t, info )

    method init( existing:DecrementThisProperty )
      prior.init( existing )
      if (existing.info) info = existing.info.cloned

    method description->String
      return "DecrementThisProperty($)" (%info)

endClass

class IncrementGlobalProperty : Cmd
  PROPERTIES
    info : Property

  METHODS
    method init( t, info )

    method init( existing:IncrementGlobalProperty )
      prior.init( existing )
      if (existing.info) info = existing.info.cloned

    method description->String
      return "IncrementGlobalProperty($)" (%info)

endClass

class IncrementLocal : Cmd
  PROPERTIES
    info : Local

  METHODS
    method init( t, info )

    method init( existing:IncrementLocal )
      prior.init( existing )
      if (existing.info) info = existing.info.cloned

    method description->String
      return "IncrementLocal($)" (%info)

endClass

class IncrementProperty : Cmd
  PROPERTIES
    context : Cmd
    info    : Property

  METHODS
    method init( t, context, info )

    method init( existing:IncrementProperty )
      prior.init( existing )
      if (existing.context) context = existing.context.cloned
      if (existing.info) info = existing.info.cloned

    method description->String
      return "IncrementProperty($,$)" (%context,%info)

endClass

class IncrementThisProperty : Cmd
  PROPERTIES
    info : Property

  METHODS
    method init( t, info )

    method init( existing:IncrementThisProperty )
      prior.init( existing )
      if (existing.info) info = existing.info.cloned

    method description->String
      return "IncrementThisProperty($)" (%info)

endClass

class PreDecrementLocal : Cmd
  PROPERTIES
    info : Local

  METHODS
    method init( t, info )

    method init( existing:PreDecrementLocal )
      prior.init( existing )
      if (existing.info) info = existing.info.cloned

    method description->String
      return "PreDecrementLocal($)" (%info)

endClass

class LiteralReal32 : Literal
  PROPERTIES
    value : Real64

  METHODS
    method init( t, value )

    method init( existing:LiteralReal32 )
      prior.init( existing )
      value = existing.value

    method description->String
      return "LiteralReal32($)" (%value)

    method to->Int32:  return value
    method to->Real64: return value
    method to->String: return value

endClass

class LiteralReal64 : Literal
  PROPERTIES
    value : Real64

  METHODS
    method init( t, value )

    method init( existing:LiteralReal64 )
      prior.init( existing )
      value = existing.value

    method description->String
      return "LiteralReal64($)" (%value)

    method to->Int32:  return value
    method to->Real64: return value
    method to->String: return value

endClass

class Escape : Cmd
  METHODS
    method control_type->ControlType
      throw UnsupportedOperationError()

    method description->String
      return "Escape"
endClass

class EscapeForEach : Escape
  METHODS
    method control_type->ControlType
      return ControlType.FOR_EACH

    method description->String
      return "EscapeForEach"
endClass


class EscapeBlock : Escape
  METHODS
    method control_type->ControlType
      return ControlType.BLOCK

    method description->String
      return "EscapeBlock"
endClass

class EscapeIf : Escape
  METHODS
    method control_type->ControlType
      return ControlType.IF

    method description->String
      return "EscapeIf"
endClass

class EscapeWhile : Escape
  METHODS
    method control_type->ControlType
      return ControlType.WHILE

    method description->String
      return "EscapeWhile"
endClass

class EscapeLoop : Escape
  METHODS
    method control_type->ControlType
      return ControlType.LOOP

    method description->String
      return "EscapeLoop"
endClass


class FormattedString : Cmd
  PROPERTIES
    format : String
    args   : Cmd

  METHODS
    method init( t, format, args )

    method init( existing:FormattedString )
      prior.init( existing )
      format = existing.format
      if (existing.args) args = existing.args.cloned

    method description->String
      return "FormattedString($,$)" (%format,%args)

endClass
