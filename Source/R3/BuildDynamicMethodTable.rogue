module RogueC

class BuildDynamicMethodTable : InspectionVisitor
  METHODS
    method apply
      Program.apply( this )

      forEach (method_group in Program.dynamic_methods)
        # Remove aspect methods and abstract methods, keeping at least one
        # of them if there are no concrete methods.
        local first = method_group.first
        forEach (m in writer=method_group.rewriter)
          if (not (m.type_context.is_aspect or m.attributes.is_abstract))
            writer.write( m )
          endIf
        endForEach
        if (method_group.is_empty)
          first.attributes.is_placeholder = true
          method_group.add( first )
        endIf
      endForEach

    method on_visit( m:Method )
      if (this_type.is_reference)
        if (m.type_context is this_type)
          local dynamic_sig = m.dynamic_signature
          local methods = Program.dynamic_methods[dynamic_sig]
          if (not methods)
            methods = Method[]
            Program.dynamic_methods[dynamic_sig] = methods
          endIf
          methods.add( m )
        endIf
      endIf
      visit_children( m )

endClass
